"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[66938],{63398:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return p}});var a=t(58168),o=t(80045),i=(t(88763),t(15680)),d=t(83407);const r=["components"],s={},m={_frontmatter:s},l=d.A;function p(e){let{components:n}=e,t=(0,o.A)(e,r);return(0,i.mdx)(l,(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"add-a-new-field-in-the-address-form"},"Add a new field in the address form"),(0,i.mdx)("p",null,"You can add new fields to default checkout forms, such as shipping address or billing address forms. To illustrate this ability, this topic describes adding a field to the shipping address form."),(0,i.mdx)("p",null,"To add your custom field to the checkout address form and access its value on the client side:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("a",{parentName:"li",href:"#step-1-add-the-field-to-layout"},"Add the field to layout"),"."),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("a",{parentName:"li",href:"#step-2-add-a-js-mixin-to-modify-data-submission"},"Add a JS mixin to modify data submission"),"."),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("a",{parentName:"li",href:"#step-3-load-your-mixin"},"Load your mixin"),"."),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("a",{parentName:"li",href:"#step-4-add-field-to-address-model"},"Add the field to address model"),"."),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("a",{parentName:"li",href:"#step-5-access-the-value-of-the-custom-field-on-server-side"},"Access the value of the custom field on server side"),".")),(0,i.mdx)("h2",{id:"step-1-add-the-field-to-layout"},"Step 1: Add the field to layout"),(0,i.mdx)("p",null,"Both shipping address and billing address forms are ",(0,i.mdx)("a",{parentName:"p",href:"add-form.md#dynamically-defined-forms"},"generated dynamically"),". To modify their layouts, create a ",(0,i.mdx)("a",{parentName:"p",href:"../../../development/components/plugins.md"},"plugin")," for the ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Checkout\\Block\\Checkout\\LayoutProcessor::process")," method and declare it in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"di.xml")," file in your module."),(0,i.mdx)("p",null,"The following code snippet enumerates sample logic for adding a field named ",(0,i.mdx)("inlineCode",{parentName:"p"},"Custom Attribute")," to the shipping address form:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-php?start_inline=1"},"$customAttributeCode = 'custom_field';\n$customField = [\n    'component' => 'Magento_Ui/js/form/element/abstract',\n    'config' => [\n        // customScope is used to group elements within a single form (e.g. they can be validated separately)\n        'customScope' => 'shippingAddress.custom_attributes',\n        'customEntry' => null,\n        'template' => 'ui/form/field',\n        'elementTmpl' => 'ui/form/element/input',\n        'tooltip' => [\n            'description' => 'this is what the field is for',\n        ],\n    ],\n    'dataScope' => 'shippingAddress.custom_attributes' . '.' . $customAttributeCode,\n    'label' => 'Custom Attribute',\n    'provider' => 'checkoutProvider',\n    'sortOrder' => 0,\n    'validation' => [\n       'required-entry' => true\n    ],\n    'options' => [],\n    'filterBy' => null,\n    'customEntry' => null,\n    'visible' => true,\n    'value' => '' // value field is used to set a default value of the attribute\n];\n\n$jsLayout['components']['checkout']['children']['steps']['children']['shipping-step']['children']['shippingAddress']['children']['shipping-address-fieldset']['children'][$customAttributeCode] = $customField;\n")),(0,i.mdx)("p",null,"Via the previous example, the field is added to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"customAttributes")," property of ",(0,i.mdx)("inlineCode",{parentName:"p"},"'Magento_Checkout/js/model/new-customer-address.js"),", a JavaScript object that lists all predefined address attributes and matches the corresponding server-side interface ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Quote\\Api\\Data\\AddressInterface"),"."),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"customAttributes")," property was designed to contain custom EAV address attributes and is related to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Quote\\Model\\Quote\\Address\\CustomAttributeListInterface::getAttributes")," method. The sample code above will automatically handle local storage persistence on the frontend."),(0,i.mdx)("p",null,"Optionally, instead of adding a plugin, you can use a ",(0,i.mdx)("a",{parentName:"p",href:"../../../development/components/dependency-injection.md"},"dependency injection (DI)"),". To use a DI, add the ",(0,i.mdx)("inlineCode",{parentName:"p"},"LayoutProcessor"),", which adds the custom field to the address form class, to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"<your_module_dir>/Block/Checkout/")," directory. The class must implement the ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Checkout\\Block\\Checkout\\LayoutProcessorInterface")," interface. Use the code sample above as an example of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Checkout\\Block\\Checkout\\LayoutProcessorInterface::process()")," method implementation."),(0,i.mdx)("p",null,"To add your ",(0,i.mdx)("inlineCode",{parentName:"p"},"LayoutProcessor")," class the corresponding pool of processors, specify the following (where ",(0,i.mdx)("inlineCode",{parentName:"p"},"%unique_name%")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"%path\\to\\your\\LayoutProcessor%")," must be replaced by your real values) in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"<your_module_dir>/etc/frontend/di.xml")," file:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-xml"},'<type name="Magento\\Checkout\\Block\\Onepage">\n        <arguments>\n            <argument name="layoutProcessors" xsi:type="array">\n                <item name="%unique_name%" xsi:type="object">%path\\to\\your\\LayoutProcessor%</item>\n            </argument>\n        </arguments>\n</type>\n')),(0,i.mdx)("h2",{id:"step-2-add-a-js-mixin-to-modify-data-submission"},"Step 2: Add a JS mixin to modify data submission"),(0,i.mdx)("p",null,"Add a JS mixin, to the server side, to change the behavior of the component responsible for the data submission."),(0,i.mdx)("p",null,"In your custom module, define a mixin as a separate AMD module that returns a callback function. Add the mixin file anywhere in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"<your_module_dir>/view/frontend/web")," directory. There are no strict requirements for the mixin file naming."),(0,i.mdx)("p",null,"The following code sample is a sample mixin modifying the behavior of ",(0,i.mdx)("inlineCode",{parentName:"p"},"Magento_Checkout/js/action/set-shipping-information"),", the component responsible for data submission between shipping and billing checkout steps:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"/*jshint browser:true jquery:true*/\n/*global alert*/\ndefine([\n    'jquery',\n    'mage/utils/wrapper',\n    'Magento_Checkout/js/model/quote'\n], function ($, wrapper, quote) {\n    'use strict';\n\n    return function (setShippingInformationAction) {\n\n        return wrapper.wrap(setShippingInformationAction, function (originalAction) {\n            var shippingAddress = quote.shippingAddress();\n            if (shippingAddress['extension_attributes'] === undefined) {\n                shippingAddress['extension_attributes'] = {};\n            }\n\n            var attribute = shippingAddress.customAttributes.find(\n                function (element) {\n                    return element.attribute_code === 'custom_field';\n                }\n            );\n\n            shippingAddress['extension_attributes']['custom_field'] = attribute.value;\n            // pass execution to original action ('Magento_Checkout/js/action/set-shipping-information')\n            return originalAction();\n        });\n    };\n});\n")),(0,i.mdx)("p",null,"When adding a field to the billing address form, you must modify the behavior of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Magento_Checkout/js/action/place-order")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"Magento_Checkout/js/action/set-payment-information")," component, depending on when do you need the custom field valued to be passed to the server side."),(0,i.mdx)("p",null,"To see an example of a mixing that modifies one of these components, see the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/CheckoutAgreements/view/frontend/web/js/model/place-order-mixin.js"},"place-order-mixin.js")," in the Magento_CheckoutAgreements module."),(0,i.mdx)("h2",{id:"step-3-load-your-mixin"},"Step 3: Load your mixin"),(0,i.mdx)("p",null,"Tell the application to load your mixin for the corresponding JS component by adding the ",(0,i.mdx)("inlineCode",{parentName:"p"},"requirejs-config.js")," to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"<YourModule_dir>/view/frontend/")," directory."),(0,i.mdx)("p",null,"The following code sample shows an example utilizing the sample mixin added earlier:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"var config = {\n    config: {\n        mixins: {\n            'Magento_Checkout/js/action/set-shipping-information': {\n                '<YourNamespace_YourModule>/js/action/set-shipping-information-mixin': true\n            }\n        }\n    }\n};\n")),(0,i.mdx)("h2",{id:"step-4-add-field-to-address-model"},"Step 4: Add field to address model"),(0,i.mdx)("p",null,"To add the field to the address model on the server side, add the ",(0,i.mdx)("inlineCode",{parentName:"p"},"extension_attributes.xml")," file in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"<YourModule_dir>/etc/")," directory."),(0,i.mdx)("p",null,"The following code is an example of an ",(0,i.mdx)("inlineCode",{parentName:"p"},"extension_attributes.xml")," file:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0"?>\n\n<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Api/etc/extension_attributes.xsd">\n    <extension_attributes for="Magento\\Quote\\Api\\Data\\AddressInterface">\n        <attribute code="custom_field" type="string" />\n    </extension_attributes>\n</config>\n')),(0,i.mdx)("p",null,"Clear the ",(0,i.mdx)("inlineCode",{parentName:"p"},"generated/code")," directory when you run the ",(0,i.mdx)("inlineCode",{parentName:"p"},"setup:di:compile")," command. New getter and setter methods will be added in ",(0,i.mdx)("inlineCode",{parentName:"p"},"generated/code/Magento/Quote/Api/Data/AddressExtension.php")," file."),(0,i.mdx)("h2",{id:"step-5-access-the-value-of-the-custom-field-on-server-side"},"Step 5: Access the value of the custom field on server side"),(0,i.mdx)("p",null,"If you completed all the steps described in the previous sections, the application generates the interface that includes your custom attribute and you can access your field value."),(0,i.mdx)("p",null,"You can set/get these attributes values by creating an instance of the  ",(0,i.mdx)("inlineCode",{parentName:"p"},"Magento/Quote/Api/Data/AddressInterface.php")," interface."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-php"},"<?php\n\n// ... //\n\nuse Magento\\Checkout\\Api\\Data\\ShippingInformationInterface;\nuse Magento\\Framework\\View\\Element\\Template;\nuse Magento\\Framework\\View\\Element\\Template\\Context;\n\nclass MyBlock extends Template {\n\n    /**\n     * @var ShippingInformationInterface\n     */\n    private $_addressInformation;\n\n    /**\n     * @param Context $context\n     * @param ShippingInformationInterface $addressInformation\n     * @param array $data\n     */\n    public function __construct(\n        Context $context,\n        ShippingInformationInterface $addressInformation,\n        array $data = []\n    ) {\n        $this->_addressInformation = $addressInformation;\n        parent::__construct($context, $data);\n    }\n\n    /**\n     * Get custom Shipping Charge\n     *\n     * @return String\n     */\n    public function getShippingCharge()\n    {\n        $extAttributes = $this->_addressInformation->getExtensionAttributes();\n        return $extAttributes->getCustomField(); //get custom attribute data.\n    }\n}\n")),(0,i.mdx)("h2",{id:"step-6-run-cli-commands"},"Step 6: Run CLI commands"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},"Compile the code with:"),(0,i.mdx)("pre",{parentName:"li"},(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento setup:di:compile\n"))),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},"Next, deploy static content:"),(0,i.mdx)("pre",{parentName:"li"},(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento setup:static-content:deploy\n"))),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("p",{parentName:"li"},"Then clean the cache:"),(0,i.mdx)("pre",{parentName:"li"},(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento cache:clean\n")))))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-tutorials-frontend-custom-checkout-add-address-field-md-0daf7011fbd6267dd1e3.js.map