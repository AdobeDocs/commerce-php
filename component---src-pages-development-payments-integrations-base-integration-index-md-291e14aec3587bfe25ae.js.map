{"version":3,"file":"component---src-pages-development-payments-integrations-base-integration-index-md-291e14aec3587bfe25ae.js","mappings":"uMAWsBA,E,kFAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAI5E,SAAC,UAAD,CAAMA,QAAQ,UACd,eACE,GAAM,mDADR,sDAGA,uOACA,qFAAsE,cAAGC,WAAW,IAChF,KAAQ,uBAD0D,qCAAtE,MAGA,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,uNACA,yNAA0M,cAAGC,WAAW,IACpN,KAAQ,+CAD8L,kBAA1M,sDAGe,cAAGA,WAAW,IACzB,KAAQ,2EADG,aAHf,0BAMA,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,4CAA6B,cAAGC,WAAW,IACvC,KAAQ,yFADiB,yBAA7B,YAE8C,uBAAYA,WAAW,KAAvB,4BAF9C,6GAIA,wFACA,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,sEAAyF,cAAGA,WAAW,IACnG,KAAQ,2BAD6E,uCAAzF,aAIF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,mDAAsE,cAAGA,WAAW,IAChF,KAAQ,4BAD0D,gCAAtE,OAIF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,wDAA2E,cAAGA,WAAW,IACrF,KAAQ,uCAD+D,UAA3E,+GAEkI,cAAGA,WAAW,IAC5I,KAAQ,2BADsH,yBAFlI,SAI2C,cAAGA,WAAW,IACrD,KAAQ,oBAD+B,4CAJ3C,OAQF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,2FAA8G,cAAGA,WAAW,IACxH,KAAQ,qBADkG,6BAKlH,yEAA0D,cAAGA,WAAW,IACpE,KAAQ,2CAD8C,cAA1D,iNAEwO,cAAGA,WAAW,IAClP,KAAQ,wBAD4N,oCAFxO,YAKA,eACE,GAAM,cADR,eAGA,uBACE,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,SAGA,eAAIA,WAAW,KACb,MAAS,MADX,kBAKJ,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,mCAGA,eAAIA,WAAW,KACb,MAAS,MADX,wEAQT,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/base-integration/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/pages/_includes/braintree-note.md';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"adding-a-new-payment-integration-payment-method\"\n    }}>{`Adding a new payment integration (payment method)`}</h1>\n    <p>{`Out-of-the-box Adobe Commerce implements integration with PayPal, Braintree, and Authorize.Net payment service providers. These integrations allow you to create and handle transactions based on order details.`}</p>\n    <p>{`You can create integration with other payment providers, using `}<a parentName=\"p\" {...{\n        \"href\": \"../payment-gateway/\"\n      }}>{`Commerce payment provider gateway`}</a>{`.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The Commerce payment provider gateway allows creating secure and PCI-compliant integrations with payment services. To keep PCI compliance, you must not store sensitive credit card information.`}</p>\n    <p>{`The topics in this chapter explain how to add an integration with a custom payment service provider (in other words, add a new payment method) and implement the authorize payment action for this `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/payment-method\"\n      }}>{`payment method`}</a>{`. For illustration, we use code\nsamples from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree\"\n      }}>{`Braintree`}</a>{` payment integration.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You can also view the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2-samples/tree/master/sample-module-payment-gateway\"\n      }}>{`Payment sample module`}</a>{` in the `}<inlineCode parentName=\"p\">{`magento/magento2-samples`}</inlineCode>{`\nrepository to understand the underlying principles. However, be aware that this code is NOT supported.`}</p>\n    <p>{`To add a new payment method, take the following high-level steps:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Configure general payment method module options. Described in the `}<a parentName=\"p\" {...{\n            \"href\": \"module-configuration.md\"\n          }}>{`Payment method module configuration`}</a>{` topic.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Configure payment method options. Described in `}<a parentName=\"p\" {...{\n            \"href\": \"payment-option-config.md\"\n          }}>{`Payment method configuration`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Implement and configure payment method facade - the `}<a parentName=\"p\" {...{\n            \"href\": \"https://glossary.magento.com/entity\"\n          }}>{`entity`}</a>{` allowing to process payment actions between Commerce sales management and payment processor. Described in `}<a parentName=\"p\" {...{\n            \"href\": \"facade-configuration.md\"\n          }}>{`Payment method facade`}</a>{` and `}<a parentName=\"p\" {...{\n            \"href\": \"formblocktype.md\"\n          }}>{`Payment info rendering in Admin checkout`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Implement and configure payment actions (like authorize, void and so on). Described in `}<a parentName=\"p\" {...{\n            \"href\": \"payment-action.md\"\n          }}>{`Add a gateway command`}</a></p>\n      </li>\n    </ol>\n    <p>{`Your payment method might be available from either `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/storefront\"\n      }}>{`storefront`}</a>{` and Admin, or both. And also can have a different configuration for each area. The keynotes on how to configure where the method can be used, and how to implement different behavior, are described in the `}<a parentName=\"p\" {...{\n        \"href\": \"admin-integration.md\"\n      }}>{`Configure payment method by area`}</a>{` topic.`}</p>\n    <h2 {...{\n      \"id\": \"terms-used\"\n    }}>{`Terms Used`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Term`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Payment additional information`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Array of data where you can store any payment-related information`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}