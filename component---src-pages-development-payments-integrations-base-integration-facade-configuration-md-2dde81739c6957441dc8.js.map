{"version":3,"file":"component---src-pages-development-payments-integrations-base-integration-facade-configuration-md-2dde81739c6957441dc8.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/base-integration/facade-configuration.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"payment-method-facade\"\n    }}>{`Payment method facade`}</h1>\n    <p>{`Payment facade is an instance of `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Model/Method/Adapter.php\"\n      }}>{`Payment Adapter`}</a>{` configured with virtual types. It allows you to process payment actions between Adobe Commerce Sales Management and the payment processor.`}</p>\n    <p>{`Add the `}<a parentName=\"p\" {...{\n        \"href\": \"../../components/dependency-injection.md\"\n      }}>{`dependency injection (DI)`}</a>{` configuration for payment method facade in your `}<inlineCode parentName=\"p\">{`%Vendor_Module%/etc/di.xml`}</inlineCode>{`.`}</p>\n    <p>{`The following sample is an illustration of this configuration (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/etc/di.xml\"\n      }}>{`app/code/Magento/Braintree/etc/di.xml`}</a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeFacade\" type=\"Magento\\\\Payment\\\\Model\\\\Method\\\\Adapter\">\n    <arguments>\n        <argument name=\"code\" xsi:type=\"const\">Magento\\\\Braintree\\\\Model\\\\Ui\\\\ConfigProvider::CODE</argument>\n        <argument name=\"formBlockType\" xsi:type=\"string\">Magento\\\\Braintree\\\\Block\\\\Form</argument>\n        <argument name=\"infoBlockType\" xsi:type=\"string\">Magento\\\\Braintree\\\\Block\\\\Info</argument>\n        <argument name=\"valueHandlerPool\" xsi:type=\"object\">BraintreeValueHandlerPool</argument>\n        <argument name=\"validatorPool\" xsi:type=\"object\">BraintreeValidatorPool</argument>\n        <argument name=\"commandPool\" xsi:type=\"object\">BraintreeCommandPool</argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`The following mandatory arguments must be configured:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Option`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`code`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The code for the payment method.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`formBlockType`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name of the block class responsible for payment provider gateway form rendering. Only the Admin panel uses this block because the storefront form renders using knockout.js. See the `}<a parentName=\"td\" {...{\n              \"href\": \"formblocktype.md\"\n            }}>{`Admin integration`}</a>{` topic for details.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`infoBlockType`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name of the block class responsible for Transaction/Payment Information details rendering in the Order block, in the Admin panel or in a customer account on storefront. In most cases it will be enough to specify the default implementation of `}<a parentName=\"td\" {...{\n              \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Block/ConfigurableInfo.php\"\n            }}>{`Configurable Info`}</a>{`. To customize specify your own implementation.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`valueHandlerPool`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Pool of value handlers used for queries to configuration. For details see the `}<a parentName=\"td\" {...{\n              \"href\": \"#value-handlers-pool\"\n            }}>{`following paragraph`}</a>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`validatorPool`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#validators-pool\"\n            }}>{`Pool of validators`}</a>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`commandPool`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"../payment-gateway/command-pool.md\"\n            }}>{`Pool of gateway commands`}</a>{`.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"value-handlers-pool\"\n    }}>{`Value handlers pool`}</h4>\n    <p>{`Let's look closer at the value handlers pool of a payment method. This pool enables you to set payment configuration that is based on certain conditions.`}</p>\n    <p>{`For example, the `}<inlineCode parentName=\"p\">{`can_void`}</inlineCode>{` configuration option might depend on payment transaction status or paid amount. The following sample shows how to set the corresponding configuration (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/etc/di.xml\"\n      }}>{`app/code/Magento/Braintree/etc/di.xml`}</a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeValueHandlerPool\" type=\"Magento\\\\Payment\\\\Gateway\\\\Config\\\\ValueHandlerPool\">\n    <arguments>\n        <argument name=\"handlers\" xsi:type=\"array\">\n            <item name=\"default\" xsi:type=\"string\">BraintreeConfigValueHandler</item>\n            <item name=\"can_void\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Config\\\\CanVoidHandler</item>\n            <item name=\"can_cancel\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Config\\\\CanVoidHandler</item>\n        </argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`You must always specify the default handler. In this example it is the config reader for Braintree:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeConfigValueHandler\" type=\"Magento\\\\Payment\\\\Gateway\\\\Config\\\\ConfigValueHandler\">\n    <arguments>\n        <argument name=\"configInterface\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\Config\\\\Config</argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`In your configuration you can use default `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Config/Config.php\"\n      }}>{`Magento\\\\Payment\\\\Gateway\\\\Config\\\\Config`}</a>{` or you can add a custom config interface by implementing the `}<inlineCode parentName=\"p\">{`Magento\\\\Payment\\\\Gateway\\\\ConfigInterface`}</inlineCode>{` interface.`}</p>\n    <p><inlineCode parentName=\"p\">{`Magento\\\\Payment\\\\Gateway\\\\Config\\\\Config`}</inlineCode>{` can read configuration by payment method code, so is useful to use it or extend it for your own purposes.`}</p>\n    <p>{`And `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/Gateway/Config/Config.php\"\n      }}>{`Magento\\\\Braintree\\\\Gateway\\\\Config\\\\Config`}</a>{` reads\nconfiguration from database or payment config file.`}</p>\n    <p>{`Other handlers contain some logic, for example, `}<inlineCode parentName=\"p\">{`can_cancel`}</inlineCode>{` option is the same as `}<inlineCode parentName=\"p\">{`can_void`}</inlineCode>{` and depends on whether the order has paid amount (invoiced).`}</p>\n    <p>{`Your custom handlers must implement the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Config/ValueHandlerInterface.php\"\n      }}>{`Value Handler interface`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"validators-pool\"\n    }}>{`Validators pool`}</h4>\n    <p>{`You can configure the pool of validators, which allows processing various payment method validations. Below are the examples of such validators:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`country`}</inlineCode>{` — checks if billing country is allowed for the payment method`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`currency`}</inlineCode>{` — checks if the selected currency is allowed for the payment method`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`availability`}</inlineCode>{` — checks if the payment method is available`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`global`}</inlineCode>{` — the validation that is called before placing an order`}</p>\n      </li>\n    </ul>\n    <p>{`A custom validator should implement the `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Payment\\\\Gateway\\\\Validator\\\\ValidatorInterface`}</inlineCode>{`. In the most cases, it is enough\nto extend the `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Payment\\\\Gateway\\\\Validator\\\\AbstractValidator`}</inlineCode>{` and create an implementation of the `}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{` method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class CountryValidator extends AbstractValidator\n{\n    /**\n     * @inheritdoc\n     */\n    public function validate(array $validationSubject)\n    {\n        $isValid = true;\n        $storeId = $validationSubject['storeId'];\n\n        if ((int)$this->config->getValue('allowspecific', $storeId) === 1) {\n            $availableCountries = explode(\n                ',',\n                $this->config->getValue('specificcountry', $storeId)\n            );\n\n            if (!in_array($validationSubject['country'], $availableCountries)) {\n                $isValid =  false;\n            }\n        }\n\n        return $this->createResult($isValid);\n    }\n}\n`}</code></pre>\n    <p>{`Then, the newly created validator needs to be added to the global pool of validators:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeValidatorPool\" type=\"Magento\\\\Payment\\\\Gateway\\\\Validator\\\\ValidatorPool\">\n    <arguments>\n        <argument name=\"validators\" xsi:type=\"array\">\n            <item name=\"country\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Validator\\\\CountryValidator</item>\n        </argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}