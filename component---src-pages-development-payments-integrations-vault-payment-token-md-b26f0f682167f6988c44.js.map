{"version":3,"file":"component---src-pages-development-payments-integrations-vault-payment-token-md-b26f0f682167f6988c44.js","mappings":"+RASaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,SAAC,IAAD,CAAMA,QAAQ,UACd,eACE,GAAM,iBACH,kBACL,kBAAK,oQACL,kBAAK,6CAA2C,cAAGC,WAAW,IAC1D,KAAQ,0GACL,yBAA6B,MACpC,kBAAK,iEAA+D,cAAGA,WAAW,IAC9E,KAAQ,0CACL,oBAAwB,gHAC/B,kBAAK,2EACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,s4DAoDP,kBAAK,qDACL,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,qFAAkG,8BACpJ,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,iFAA8F,+CAElJ,kBAAK,sGACL,kBAAK,6FACiC,uBAAYA,WAAW,KAAM,cAA2B,kBAAgB,uBAAYA,WAAW,KAAM,gDAA6D,QAAM,uBAAYA,WAAW,KAAM,UAAuB,yJAAuJ,uBAAYA,WAAW,KAAM,6DAA0E,MAChgB,kBAAK,+BAA6B,uBAAYA,WAAW,KAAM,qBAAkC,wPAEjG,kBAAK,iGAA+F,uBAAYA,WAAW,KAAM,UAAuB,MACxJ,kBAAK,6BAA2B,uBAAYA,WAAW,KAAM,UAAuB,MACpF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,8YAUP,kBAAK,kEAAgE,cAAGA,WAAW,IAC/E,KAAQ,uEACL,gBAAoB,KAG9B,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/vault/payment-token.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"payment-token\"\n    }}>{`Payment Token`}</h1>\n    <p>{`Adobe Commerce does not store any private credit card details. Commerce only stores the Payment Token, which is comprised of the following data received from the payment provider: the payment processor token and credit card details without sensitive data.`}</p>\n    <p>{`The basic interface for Payment Token is `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Api/Data/PaymentTokenInterface.php\"\n      }}>{`PaymentTokenInterface`}</a>{`.`}</p>\n    <p>{`To retrieve and store token details, you need to implement a `}<a parentName=\"p\" {...{\n        \"href\": \"../payment-gateway/response-handler.md\"\n      }}>{`response handler`}</a>{`. In the response handler a Payment Token entity is created and stored in the payment extension attributes.`}</p>\n    <p>{`Following sample is an example of the response handler implementation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nuse Magento\\\\Vault\\\\Api\\\\Data\\\\PaymentTokenFactoryInterface;\nuse Magento\\\\Vault\\\\Api\\\\Data\\\\PaymentTokenInterface;\n\nclass VaultDetailsHandler implements HandlerInterface\n{\n    /**\n     * @inheritdoc\n     */\n    public function handle(array $handlingSubject, array $response)\n    {\n        $paymentDO = $this->subjectReader->readPayment($handlingSubject);\n        $transaction = $this->subjectReader->readTransaction($response);\n        $payment = $paymentDO->getPayment();\n\n        // add vault payment token entity to extension attributes\n        $paymentToken = $this->getVaultPaymentToken($transaction);\n        if (null !== $paymentToken) {\n            $extensionAttributes = $this->getExtensionAttributes($payment);\n            $extensionAttributes->setVaultPaymentToken($paymentToken);\n        }\n    }\n\n    /**\n     * Get vault payment token entity\n     *\n     * @param \\\\Braintree\\\\Transaction $transaction\n     * @return PaymentTokenInterface|null\n     */\n    protected function getVaultPaymentToken(Transaction $transaction)\n    {\n        // Check token existing in gateway response\n        $token = $transaction->creditCardDetails->token;\n        if (empty($token)) {\n            return null;\n        }\n\n        /** @var PaymentTokenInterface $paymentToken */\n        $paymentToken = $this->paymentTokenFactory->create(PaymentTokenFactoryInterface::TOKEN_TYPE_CREDIT_CARD);\n        $paymentToken->setGatewayToken($token);\n        $paymentToken->setExpiresAt($this->getExpirationDate($transaction));\n\n        $paymentToken->setTokenDetails($this->convertDetailsToJSON([\n            'type' => $this->getCreditCardType($transaction->creditCardDetails->cardType),\n            'maskedCC' => $transaction->creditCardDetails->last4,\n            'expirationDate' => $transaction->creditCardDetails->expirationDate\n        ]));\n\n        return $paymentToken;\n    }\n}\n`}</code></pre>\n    <p>{`There are two available types of payment tokens:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\\\\Magento\\\\Vault\\\\Api\\\\Data\\\\PaymentTokenFactoryInterface::TOKEN_TYPE_CREDIT_CARD`}</inlineCode>{` is used for credit cards`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\\\\Magento\\\\Vault\\\\Api\\\\Data\\\\PaymentTokenFactoryInterface::TOKEN_TYPE_ACCOUNT`}</inlineCode>{` is used for payment accounts like PayPal`}</li>\n    </ul>\n    <p>{`Depending on your payment integration, you need to specify one of them to create a payment token.`}</p>\n    <p>{`Also, you can create own type of payment token.\nBut in that case you must re-define the `}<inlineCode parentName=\"p\">{`tokenTypes`}</inlineCode>{` argument for `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Vault\\\\Model\\\\PaymentTokenFactory`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` (not just replacing with argument but appending your token type to existing to avoid breaking existing functionality) or provide own preference for `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Vault\\\\Api\\\\Data\\\\PaymentTokenFactoryInterface`}</inlineCode>{`.`}</p>\n    <p>{`The important thing is the `}<inlineCode parentName=\"p\">{`setGatewayToken()`}</inlineCode>{` method. This method gets the gateway token: a hashed value based on some credit card details.\nDifferent payment providers use different algorithms to create this hash. In most cases, exactly this token is used to perform place order actions.`}</p>\n    <p>{`The created response handler must be added to the handler chain in the DI configuration file `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`.`}</p>\n    <p>{`Example of the Braintree `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeAuthorizationHandler\" type=\"Magento\\\\Payment\\\\Gateway\\\\Response\\\\HandlerChain\">\n    <arguments>\n        <argument name=\"handlers\" xsi:type=\"array\">\n            ...\n            <item name=\"vault_details\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Response\\\\VaultDetailsHandler</item>\n            ...\n        </argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`The persistence layer for Payment Token is implemented in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault\"\n      }}>{`Vault Module`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}