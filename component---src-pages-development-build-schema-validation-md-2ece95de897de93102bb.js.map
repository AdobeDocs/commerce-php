{"version":3,"file":"component---src-pages-development-build-schema-validation-md-2ece95de897de93102bb.js","mappings":"sMAUsBA,E,wEAFTC,EAAe,GAOtBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,yBADR,0BAGA,2BAAY,cAAGC,WAAW,IACtB,KAAQ,uCADA,UAAZ,+BAEkD,cAAGA,WAAW,IAC5D,KAAQ,oCADsC,OAFlD,iBAKA,2CAA4B,cAAGA,WAAW,IACtC,KAAQ,uDADgB,0BAA5B,kDAGA,gEAAiD,uBAAYA,WAAW,KAAvB,eAAjD,wDACA,oBACE,eAAIA,WAAW,MAAf,eACA,eAAIA,WAAW,MAAf,mBAEF,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,yIACA,eACE,GAAM,cADR,eAGA,0GACA,mBAAG,uBAAYC,WAAW,KAAvB,uDACH,4BACA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,eAApB,2BACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,sCACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,gBAApB,mHAAgM,cAAGA,WAAW,KAC1M,KAAQ,6BADoL,oBAAhM,WAGA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,qBAApB,4DAEF,eACE,GAAM,iBADR,kBAGA,6GACA,mBAAG,uBAAYA,WAAW,KAAvB,4DACH,4BACA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,eAApB,2BACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,aAApB,mHAA6L,uBAAYA,WAAW,MAAvB,0BAC7L,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,oCAApB,+DAEF,eACE,GAAM,sCADR,uCAGA,uFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,oFAML,2HAA4G,uBAAYA,WAAW,KAAvB,qCAA5G,MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,oHAIL,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,2GAA4F,cAAGC,WAAW,IACtG,KAAQ,uCADgF,UAA5F,gDAOJH,EAAWM,gBAAiB","sources":["webpack://commerce-php/./src/pages/development/build/schema-validation.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"urn-schema-validation\"\n    }}>{`URN schema validation`}</h1>\n    <p>{`Each `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/module\"\n      }}>{`module`}</a>{` can contain XSD files for `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/xml\"\n      }}>{`XML`}</a>{` validation.`}</p>\n    <p>{`The application uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Uniform_Resource_Name\"\n      }}>{`Uniform Resource Names`}</a>{` (URNs) to reference XML schema declarations.`}</p>\n    <p>{`The application supported URNs begin with `}<inlineCode parentName=\"p\">{`urn:magento`}</inlineCode>{`. The application supports two XSD reference types:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Module XSD`}</li>\n      <li parentName=\"ul\">{`Framework XSD`}</li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You cannot change the XSD for any XML files provided with the Adobe Commerce and Magento Open Source applications.`}</p>\n    <h3 {...{\n      \"id\": \"module-xsd\"\n    }}>{`Module XSD`}</h3>\n    <p>{`The syntax for the module XSD is a colon separated declaration. An example follows:`}</p>\n    <p><inlineCode parentName=\"p\">{`urn:magento:module:Magento_Flow:flows/content.xsd`}</inlineCode></p>\n    <p>{`where`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`urn:magento`}</inlineCode>{` is the URN identifier`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`module`}</inlineCode>{` is the reference type identifier`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Magento_Flow`}</inlineCode>{` is the name of the module. This must be exactly the same as the module specified by ComponentRegistrar in the `}<a parentName=\"li\" {...{\n          \"href\": \"component-registration.md\"\n        }}>{`registration.php`}</a>{` file.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`flows/content.xsd`}</inlineCode>{` is the relative path to the module`}{`’`}{`s directory.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"framework-xsd\"\n    }}>{`Framework XSD`}</h3>\n    <p>{`The syntax for the framework XSD is a colon separated declaration. An example follows:`}</p>\n    <p><inlineCode parentName=\"p\">{`urn:magento:framework:Api/etc/extension_attributes.xsd`}</inlineCode></p>\n    <p>{`where`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`urn:magento`}</inlineCode>{` is the URN identifier`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`framework`}</inlineCode>{` is the reference type identifier. You can also add additional framework libraries as separate components with `}<inlineCode parentName=\"li\">{`framework-<sub-name>`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Api/etc/extension_attributes.xsd`}</inlineCode>{` is the relative path to the framework`}{`’`}{`s directory.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"referencing-a-xsd-from-another-xsd\"\n    }}>{`Referencing a XSD from another XSD`}</h3>\n    <p>{`Use URN notation to reference schema from inside a XSD document:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`\n<xs:redefine schemaLocation=\"urn:magento:framework:Config/etc/view.xsd\">\n\n`}</code></pre>\n    <p>{`The URN resolution is invoked automatically by the libxml engine. Register the URN resolver by using `}<inlineCode parentName=\"p\">{`libxml_set_external_entity_loader`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`libxml_set_external_entity_loader(['Magento\\\\Framework\\\\Config\\\\Dom\\\\UrnResolver', 'registerEntityLoader']);\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The relative path to other XSDs cannot be used from inside the XSD file, because the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/entity\"\n      }}>{`entity`}</a>{` loader fails to resolve the relative path.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}