"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[37525],{96114:function(e,n,o){o.r(n),o.d(n,{_frontmatter:function(){return r},default:function(){return u}});var t,a=o(87462),m=o(63366),d=(o(15007),o(64983)),i=o(91515),l=["components"],r={},p=(t="InlineAlert",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,d.mdx)("div",e)}),s={_frontmatter:r},c=i.Z;function u(e){var n=e.components,o=(0,m.Z)(e,l);return(0,d.mdx)(c,(0,a.Z)({},s,o,{components:n,mdxType:"MDXLayout"}),(0,d.mdx)("h1",{id:"component-load-order"},"Component load order"),(0,d.mdx)("p",null,"You may need to specify your component's dependency on other components or files from other components using your component's ",(0,d.mdx)("a",{parentName:"p",href:"component-name.md#add-a-composerjson-file"},"composer.json"),". Further, you can specify a load order in your component's ",(0,d.mdx)("inlineCode",{parentName:"p"},"module.xml")," file using the ",(0,d.mdx)("inlineCode",{parentName:"p"},"<sequence>")," tag to ensure that needed files from other components are already loaded when your component loads."),(0,d.mdx)("p",null,(0,d.mdx)("inlineCode",{parentName:"p"},"<sequence>")," declares the list of components that must be loaded before the current component is loaded. It's used for loading different kind of files: configuration files, view files (including CSS, Less, and template files), or setup classes. Note that ",(0,d.mdx)("inlineCode",{parentName:"p"},"<sequence>")," does not affect the loading of regular classes (non-setup classes).\n",(0,d.mdx)("em",{parentName:"p"},"Setup")," classes are classes in the component that create or update ",(0,d.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/database-schema"},"database schema")," or data."),(0,d.mdx)("p",null,"If you know that your component's logic depends on something in another component, then you should add this component to ",(0,d.mdx)("inlineCode",{parentName:"p"},"require")," in ",(0,d.mdx)("inlineCode",{parentName:"p"},"composer.json")," and ",(0,d.mdx)("inlineCode",{parentName:"p"},"<sequence>")," in ",(0,d.mdx)("inlineCode",{parentName:"p"},"module.xml"),"."),(0,d.mdx)("p",null,"You can check your module's load order from the ",(0,d.mdx)("inlineCode",{parentName:"p"},"<magento_root>/app/etc/config.php")," file after you've successfully set up Magento. This file is created dynamically at run time during set up."),(0,d.mdx)(p,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,d.mdx)("p",null,"If you change the component load order using ",(0,d.mdx)("inlineCode",{parentName:"p"},"<sequence>"),", you must regenerate the component list in ",(0,d.mdx)("inlineCode",{parentName:"p"},"config.php"),"; otherwise, the load order does not take effect. Currently, the only way to do this is to enable the component using ",(0,d.mdx)("a",{parentName:"p",href:"https://devdocs.magento.com/guides/v2.4/install-gde/install/cli/install-cli-subcommands-enable.html#instgde-cli-subcommands-enable-disable"},(0,d.mdx)("inlineCode",{parentName:"a"},"magento module:enable <module-list>")),", where ",(0,d.mdx)("inlineCode",{parentName:"p"},"<module-list>")," is the component or components to which you added ",(0,d.mdx)("inlineCode",{parentName:"p"},"<sequence>"),"."),(0,d.mdx)("h2",{id:"examples"},"Examples"),(0,d.mdx)("p",null,"Assume you have a component that needs a configuration file from another component:"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Component B")," introduces ",(0,d.mdx)("inlineCode",{parentName:"p"},"gadgetlayout.xml"),", which updates block ",(0,d.mdx)("inlineCode",{parentName:"p"},"gadgetBlock")," from ",(0,d.mdx)("strong",{parentName:"p"},"component A"),". In this case, layout files from ",(0,d.mdx)("strong",{parentName:"p"},"component A")," should be loaded before ",(0,d.mdx)("strong",{parentName:"p"},"component B"),", so you should specify that in ",(0,d.mdx)("strong",{parentName:"p"},"component B's")," ",(0,d.mdx)("inlineCode",{parentName:"p"},"<sequence>")," entry in ",(0,d.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/module"},"module"),".xml. In other words, ",(0,d.mdx)("strong",{parentName:"p"},"component B")," is dependent on ",(0,d.mdx)("strong",{parentName:"p"},"component A"),". That is to say:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0"?>\n<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">\n    <module name="Vendor_ComponentB" setup_version="0.0.1">\n        <sequence>\n        \x3c!-- Vendor_ComponentB is dependent on Vendor_ComponentA: --\x3e\n            <module name="Vendor_ComponentA" />\n        </sequence>\n    </module>\n</config>\n')),(0,d.mdx)("p",null,"For each particular scenario, files of the same type are loaded from different components taking into account the sequence information provided in each component's ",(0,d.mdx)("inlineCode",{parentName:"p"},"module.xml")," file."),(0,d.mdx)("p",null,"In another scenario, let's say you want to load all of the ",(0,d.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/layout"},"layout")," files with the name ",(0,d.mdx)("inlineCode",{parentName:"p"},"default.xml"),". ",(0,d.mdx)("strong",{parentName:"p"},"Component A")," specifies ",(0,d.mdx)("strong",{parentName:"p"},"component B")," in ",(0,d.mdx)("inlineCode",{parentName:"p"},"<sequence>"),". The files load in the following order:"),(0,d.mdx)("ol",null,(0,d.mdx)("li",{parentName:"ol"},(0,d.mdx)("inlineCode",{parentName:"li"},"component X/view/frontend/layout/default.xml"),"---Either we don't care about when component X loads or perhaps component B requires it to be loaded before it."),(0,d.mdx)("li",{parentName:"ol"},(0,d.mdx)("inlineCode",{parentName:"li"},"component B/view/frontend/layout/default.xml")),(0,d.mdx)("li",{parentName:"ol"},(0,d.mdx)("inlineCode",{parentName:"li"},"component A/view/frontend/layout/default.xml"),"---Loads after ",(0,d.mdx)("strong",{parentName:"li"},"component B")," because ",(0,d.mdx)("strong",{parentName:"li"},"component B")," is listed in ",(0,d.mdx)("strong",{parentName:"li"},"component A's")," ",(0,d.mdx)("inlineCode",{parentName:"li"},"<sequence>")," tag."),(0,d.mdx)("li",{parentName:"ol"},(0,d.mdx)("inlineCode",{parentName:"li"},"component Z/view/frontend/layout/default.xml"),"---Either we don't care about the sequence for component Z or perhaps component Z requires component A files to be loaded before it.")),(0,d.mdx)("p",null,"There are no limitations---you can specify any valid component in ",(0,d.mdx)("inlineCode",{parentName:"p"},"<sequence>"),"."),(0,d.mdx)("p",null,"If you do specify a component in ",(0,d.mdx)("inlineCode",{parentName:"p"},"<sequence>"),", make sure that you have also added it to the ",(0,d.mdx)("inlineCode",{parentName:"p"},"require")," section in that component's ",(0,d.mdx)("inlineCode",{parentName:"p"},"composer.json")," file."),(0,d.mdx)(p,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,d.mdx)("p",null,"Take care when using ",(0,d.mdx)("inlineCode",{parentName:"p"},"<sequence>")," in multiple components because it's possible to define circular dependencies. If you do, the application aborts the installation when it detects the circular dependency."))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-development-build-component-load-order-md-c20fac9127bbb4102c5e.js.map