{"version":3,"file":"component---src-pages-development-components-message-queues-bulk-operations-example-md-6b3c2c0d4f43bd189027.js","mappings":"uMAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,0CADR,2CAGA,wIACA,oBACE,eAAIC,WAAW,MAAf,aAAiC,cAAGA,WAAW,KAC3C,KAAQ,6DADqB,aAAjC,8CAGA,eAAIA,WAAW,MAAf,2DACA,eAAIA,WAAW,MAAf,kCAEF,eACE,GAAM,sBADR,uBAGA,mGAAoF,uBAAYA,WAAW,KAAvB,YAApF,gHACA,yFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,kvIAiIL,eACE,GAAM,qBADR,sBAGA,kNACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,27IA2HL,eACE,GAAM,4BADR,6BAGA,qJAAsI,uBAAYA,WAAW,KAAvB,uCAAtI,gBACA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,uBACpB,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,YACpB,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,wBACpB,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,yBACpB,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,yBAEtB,qDAAsC,uBAAYA,WAAW,KAAvB,UAAtC,eAAuG,cAAGA,WAAW,IACjH,KAAQ,8BAD2F,wBAAvG,2CAE4E,cAAGA,WAAW,IACtF,KAAQ,oBADgE,4BAF5E,MAKA,eACE,GAAM,2BADR,WAEc,uBAAYA,WAAW,MAAvB,uBACd,0BAAW,uBAAYA,WAAW,KAAvB,qBAAX,uFAA+J,cAAGA,WAAW,IACzK,KAAQ,uCADmJ,UAA/J,oDAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,2YAQL,eACE,GAAM,gBADR,WAEc,uBAAYA,WAAW,MAAvB,YACd,6DAA8C,uBAAYA,WAAW,KAAvB,UAA9C,WACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,iRAUL,eACE,GAAM,4BADR,WAEc,uBAAYA,WAAW,MAAvB,wBACd,0BAAW,uBAAYA,WAAW,KAAvB,sBAAX,mHACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,iWAML,eACE,GAAM,6BADR,WAEc,uBAAYA,WAAW,MAAvB,yBACd,0BAAW,uBAAYA,WAAW,KAAvB,uBAAX,yGACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,yRAQL,eACE,GAAM,4BADR,WAEc,uBAAYA,WAAW,MAAvB,wBACd,0BAAW,uBAAYA,WAAW,KAAvB,sBAAX,6HACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,yVAQL,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,sHAAuG,uBAAYC,WAAW,KAAvB,WAAvG,kRAC2H,uBAAYA,WAAW,KAAvB,sBAD3H,MAC+L,uBAAYA,WAAW,KAAvB,uBAD/L,UACwQ,uBAAYA,WAAW,KAAvB,sBADxQ,KAC2U,cAAGA,WAAW,IACrV,KAAQ,sBAD+T,qCAD3U,KAMH,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/components/message-queues/bulk-operations-example.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"example-bulk-operations-implementation\"\n    }}>{`Example bulk operations implementation`}</h1>\n    <p>{`This document describes how bulk operations can be implemented. There are three primary tasks to accomplish this:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create a `}<a parentName=\"li\" {...{\n          \"href\": \"https://glossary.magento.com/publisher-subscriber-pattern\"\n        }}>{`publisher`}</a>{` that sends messages to the message queue`}</li>\n      <li parentName=\"ul\">{`Create a consumer that receives and processes messages`}</li>\n      <li parentName=\"ul\">{`Configure the message queues`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"create-a-publisher\"\n    }}>{`Create a publisher`}</h2>\n    <p>{`A publisher's duties include scheduling a bulk operation. It must generate a `}<inlineCode parentName=\"p\">{`bulkUuid`}</inlineCode>{` for each operation, send each operation to the message queue, and report on the status of each operations.`}</p>\n    <p>{`The following code sample shows how these duties can be completed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nuse Magento\\\\AsynchronousOperations\\\\Api\\\\Data\\\\OperationInterface;\nuse Magento\\\\AsynchronousOperations\\\\Api\\\\Data\\\\OperationInterfaceFactory;\nuse Magento\\\\Authorization\\\\Model\\\\UserContextInterface;\nuse Magento\\\\Framework\\\\Bulk\\\\BulkManagementInterface;\nuse Magento\\\\Framework\\\\DataObject\\\\IdentityGeneratorInterface;\nuse Magento\\\\Framework\\\\Exception\\\\LocalizedException;\nuse Magento\\\\Framework\\\\Json\\\\Helper\\\\Data as JsonHelper;\nuse Magento\\\\Framework\\\\UrlInterface;\n\n/**\n * Class ScheduleBulk\n */\nclass ScheduleBulk\n{\n    /**\n     * @var BulkManagementInterface\n     */\n    private $bulkManagement;\n\n    /**\n     * @var OperationInterfaceFactory\n     */\n    private $operationFactory;\n\n    /**\n     * @var IdentityGeneratorInterface\n     */\n    private $identityService;\n\n    /**\n     * @var UrlInterface\n     */\n    private $urlBuilder;\n\n    /**\n     * @var UserContextInterface\n     */\n    private $userContext;\n\n    /**\n     * @var JsonHelper\n     */\n    private $jsonHelper;\n\n    /**\n     * ScheduleBulk constructor.\n     *\n     * @param BulkManagementInterface $bulkManagement\n     * @param OperationInterfaceFactory $operationFactory\n     * @param IdentityGeneratorInterface $identityService\n     * @param UserContextInterface $userContextInterface\n     * @param UrlInterface $urlBuilder\n     */\n    public function __construct(\n        BulkManagementInterface $bulkManagement,\n        OperationInterfaceFactory $operationFactory,\n        IdentityGeneratorInterface $identityService,\n        UserContextInterface $userContextInterface,\n        UrlInterface $urlBuilder,\n        JsonHelper $jsonHelper\n    ) {\n        $this->userContext = $userContextInterface;\n        $this->bulkManagement = $bulkManagement;\n        $this->operationFactory = $operationFactory;\n        $this->identityService = $identityService;\n        $this->urlBuilder = $urlBuilder;\n        $this->jsonHelper = $jsonHelper;\n\n    }\n\n    /**\n     * Schedule new bulk operation\n     *\n     * @param array $operationData\n     * @throws LocalizedException\n     * @return void\n     */\n    public function execute($operationData)\n    {\n        $operationCount = count($operationData);\n        if ($operationCount > 0) {\n            $bulkUuid = $this->identityService->generateId();\n            $bulkDescription = 'Specify here your bulk description';\n\n            $operations = [];\n            foreach ($operationData as $operation) {\n\n                $serializedData = [\n                    //this data will be displayed in Failed item grid in ID column\n                    'entity_id' => $operation['entity_id'],\n                    //add here logic to add url for your entity(this link will be displayed in the Failed item grid)\n                    'entity_link' => $this->urlBuilder->getUrl('your_url'),\n                    //this data will be displayed in Failed item grid in the column \"Meta Info\"\n                    'meta_information' => 'Specify here meta information for your entity',//this data will be displayed in Failed item grid in the column \"Meta Info\"\n                ];\n                $data = [\n                    'data' => [\n                        'bulk_uuid' => $bulkUuid,\n                        //topic name must be equal to data specified in the queue configuration files\n                        'topic_name' => '%your_topic name%',\n                        'serialized_data' => $this->jsonHelper->jsonEncode($serializedData),\n                        'status' => OperationInterface::STATUS_TYPE_OPEN,\n                    ]\n                ];\n\n                /** @var OperationInterface $operation */\n                $operation = $this->operationFactory->create($data);\n                $operations[] = $operation;\n\n            }\n            $userId = $this->userContext->getUserId();\n            $result = $this->bulkManagement->scheduleBulk($bulkUuid, $operations, $bulkDescription, $userId);\n            if (!$result) {\n                throw new LocalizedException(\n                    __('Something went wrong while processing the request.')\n                );\n            }\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-a-consumer\"\n    }}>{`Create a consumer`}</h2>\n    <p>{`A consumer class receives messages from the message queue and changes the status after it is processed. The following example defines a consumer that handles price update bulk operations.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\\\SharedCatalog\\\\Model\\\\ResourceModel\\\\ProductItem\\\\Price;\n\nuse Magento\\\\AsynchronousOperations\\\\Api\\\\Data\\\\OperationInterface;\nuse Magento\\\\AsynchronousOperations\\\\Api\\\\Data\\\\OperationInterfaceFactory;\nuse Magento\\\\Framework\\\\Bulk\\\\BulkManagementInterface;\nuse Magento\\\\Framework\\\\Bulk\\\\OperationManagementInterface;\nuse Magento\\\\Framework\\\\DB\\\\Adapter\\\\ConnectionException;\nuse Magento\\\\Framework\\\\DB\\\\Adapter\\\\DeadlockException;\nuse Magento\\\\Framework\\\\DB\\\\Adapter\\\\LockWaitException;\nuse Magento\\\\Framework\\\\Exception\\\\LocalizedException;\nuse Magento\\\\Framework\\\\Exception\\\\NoSuchEntityException;\nuse Magento\\\\Framework\\\\Exception\\\\TemporaryStateExceptionInterface;\nuse Magento\\\\Framework\\\\Json\\\\Helper\\\\Data as JsonHelper;\nuse Psr\\\\Log\\\\LoggerInterface;\n\n/**\n * Class Consumer\n */\nclass Consumer\n{\n    /**\n     * @var LoggerInterface\n     */\n    private $logger;\n\n    /**\n     * @var JsonHelper\n     */\n    private $jsonHelper;\n\n    /**\n     * @var OperationManagementInterface\n     */\n    private $operationManagement;\n\n    /**\n     * Consumer constructor.\n     *\n     * @param LoggerInterface $logger\n     * @param JsonHelper $jsonHelper\n     */\n    public function __construct(\n        LoggerInterface $logger,\n        JsonHelper $jsonHelper,\n        OperationManagementInterface $operationManagement\n    ) {\n        $this->logger = $logger;\n        $this->jsonHelper = $jsonHelper;\n        $this->operationManagement = $operationManagement;\n    }\n\n    /**\n     * Processing operation for update price\n     *\n     * @param OperationInterface $operation\n     * @return void\n     */\n    public function processOperation(OperationInterface $operation)\n    {\n        $status = OperationInterface::STATUS_TYPE_COMPLETE;\n        $errorCode = null;\n        $message = null;\n        $serializedData = $operation->getSerializedData();\n        $unserializedData = $this->jsonHelper->jsonDecode($serializedData);\n        try {\n            //add here your own logic for async operations\n        } catch (\\\\Zend_Db_Adapter_Exception  $e) {\n            //here sample how to process exceptions if they occurred\n            $this->logger->critical($e->getMessage());\n            //you can add here your own type of exception when operation can be retried\n            if (\n                $e instanceof LockWaitException\n                || $e instanceof DeadlockException\n                || $e instanceof ConnectionException\n            ) {\n                $status = OperationInterface::STATUS_TYPE_RETRIABLY_FAILED;\n                $errorCode = $e->getCode();\n                $message = __($e->getMessage());\n            } else {\n                $status = OperationInterface::STATUS_TYPE_NOT_RETRIABLY_FAILED;\n                $errorCode = $e->getCode();\n                $message = __('Sorry, something went wrong during product prices update. Please see log for details.');\n            }\n\n        } catch (NoSuchEntityException $e) {\n            $this->logger->critical($e->getMessage());\n            $status = ($e instanceof TemporaryStateExceptionInterface) ? OperationInterface::STATUS_TYPE_NOT_RETRIABLY_FAILED : OperationInterface::STATUS_TYPE_NOT_RETRIABLY_FAILED;\n            $errorCode = $e->getCode();\n\n            $message = $e->getMessage();\n            unset($unserializedData['entity_link']);\n            $serializedData = $this->jsonHelper->jsonEncode($unserializedData);\n        } catch (LocalizedException $e) {\n            $this->logger->critical($e->getMessage());\n            $status = OperationInterface::STATUS_TYPE_NOT_RETRIABLY_FAILED;\n            $errorCode = $e->getCode();\n            $message = $e->getMessage();\n        } catch (\\\\Exception $e) {\n            $this->logger->critical($e->getMessage());\n            $status = OperationInterface::STATUS_TYPE_NOT_RETRIABLY_FAILED;\n            $errorCode = $e->getCode();\n            $message = __('Sorry, something went wrong during product prices update. Please see log for details.');\n        }\n\n        //update operation status based on result performing operation(it was successfully executed or exception occurs\n        $this->operationManagement->changeOperationStatus(\n            $operation->getId(),\n            $status,\n            $errorCode,\n            $message,\n            $serializedData\n        );\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"configure-message-queues\"\n    }}>{`Configure message queues`}</h2>\n    <p>{`The message queue topology must be configured to implement bulk operations. Create or edit the following files in the module's `}<inlineCode parentName=\"p\">{`app/code/<vendor>/<module_name>/etc`}</inlineCode>{` directory.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`communication.xml`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`di.xml`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`queue_consumer.xml`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`queue_publisher.xml`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`queue_topology.xml`}</inlineCode></li>\n    </ul>\n    <p>{`For more information about the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file, see `}<a parentName=\"p\" {...{\n        \"href\": \"../dependency-injection.md\"\n      }}>{`Dependency Injection`}</a>{`. For information the other files, see `}<a parentName=\"p\" {...{\n        \"href\": \"configuration.md\"\n      }}>{`Configure message queues`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"create-communicationxml\"\n    }}>{`Create `}<inlineCode parentName=\"h3\">{`communication.xml`}</inlineCode></h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`communication.xml`}</inlineCode>{` file defines aspects of the message queue system that apply to all topics for the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/module\"\n      }}>{`module`}</a>{`. Create this file with the following contents:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Communication/etc/communication.xsd\">\n    <topic name=\"<your_topic_name>\" request=\"Magento\\\\AsynchronousOperations\\\\Api\\\\Data\\\\OperationInterface\">\n        <handler name=\"<your_handler_name>\" type=\"<Consumer_Class>\" method=\"<consumer_method>\" />\n    </topic>\n</config>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-dixml\"\n    }}>{`Create `}<inlineCode parentName=\"h3\">{`di.xml`}</inlineCode></h3>\n    <p>{`Add the following type to the module's `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<type name=\"Magento\\\\Framework\\\\MessageQueue\\\\MergerFactory\">\n    <arguments>\n        <argument name=\"mergers\" xsi:type=\"array\">\n            <item name=\"<your_consumer_name>\" xsi:type=\"string\"><Merger_Class></item>\n        </argument>\n    </arguments>\n</type>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-queue_consumerxml\"\n    }}>{`Create `}<inlineCode parentName=\"h3\">{`queue_consumer.xml`}</inlineCode></h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`queue_consumer.xml`}</inlineCode>{` file defines the relationship between a queue and its consumer. Create this file with the following contents:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework-message-queue:etc/consumer.xsd\">\n    <consumer name=\"<consumer_name>\" queue=\"<queue_name>\" connection=\"amqp\" consumerInstance=\"Magento\\\\Framework\\\\MessageQueue\\\\Consumer\" handler=\"<Consumer_Class>::<Consumer_method>\"/>\n</config>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-queue_publisherxml\"\n    }}>{`Create `}<inlineCode parentName=\"h3\">{`queue_publisher.xml`}</inlineCode></h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`queue_publisher.xml`}</inlineCode>{` file defines the exchange where a topic is published. Create this file with the following contents:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework-message-queue:etc/publisher.xsd\">\n    <publisher topic=\"<topic_name>\">\n        <connection name=\"amqp\" exchange=\"<exchange>\" />\n    </publisher>\n</config>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-queue_topologyxml\"\n    }}>{`Create `}<inlineCode parentName=\"h3\">{`queue_topology.xml`}</inlineCode></h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`queue_topology.xml`}</inlineCode>{` file defines the message routing rules and declares queues and exchanges. Create this file with the following contents:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework-message-queue:etc/topology.xsd\">\n    <exchange name=\"magento\" type=\"topic\" connection=\"amqp\">\n        <binding id=\"defaultBinding\" topic=\"\" destinationType=\"queue\" destination=\"<queue_name>\"/>\n    </exchange>\n</config>\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Message queue connections are defined dynamically, based on the deployment configuration in the `}<inlineCode parentName=\"p\">{`env.php`}</inlineCode>{` file. If AMQP is configured in the deployment configuration of the queue, AMQP connections are used. Otherwise, database connections are used.\nAs a result, if AMQP is configured in the deployment configuration of the queue, you can omit connection declarations in the `}<inlineCode parentName=\"p\">{`queue_customer.xml`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`queue_publisher.xml`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`queue_topology.xml`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"./configuration.md\"\n      }}>{`message queue configuration files`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}