{"version":3,"file":"component---src-pages-tutorials-admin-custom-product-creation-form-modifier-class-md-651344a0454e7de87b11.js","mappings":"+QAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,oCADR,qCAGA,mBAAG,cAAGC,WAAW,IACb,KAAQ,uFADT,oBAAH,wPAGA,mIAAoH,uBAAYA,WAAW,KAAvB,oBAApH,oBACA,0BAAW,uBAAYA,WAAW,KAAvB,0EAAX,sHAAmP,uBAAYA,WAAW,KAAvB,qEAAnP,gEAAga,uBAAYA,WAAW,KAAvB,iBAAha,iDAA0gB,uBAAYA,WAAW,KAAvB,UAA1gB,MACA,iFACA,oBACE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,sBADQ,2BAGpB,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,6BADQ,qCAEsB,uBAAYA,WAAW,KAAvB,cAE5C,eACE,GAAM,qBADR,sBAGA,kGAAmF,uBAAYA,WAAW,KAAvB,0DAAnF,8BAAmN,uBAAYA,WAAW,KAAvB,iFAAnN,iCAA6W,uBAAYA,WAAW,KAAvB,gBAA7W,aAAkb,uBAAYA,WAAW,KAAvB,gBAAlb,kCACA,wGAAyF,cAAGA,WAAW,IACnG,KAAQ,oCAD6E,OAAzF,oBAGA,mCACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,u2DA8DL,yFAA0E,uBAAYA,WAAW,KAAvB,YAA1E,yBACA,eACE,GAAM,4BADR,6BAGA,yBAAU,uBAAYA,WAAW,KAAvB,0CAAV,8CAA0I,uBAAYA,WAAW,KAAvB,qEAA1I,MACA,wEACA,mBAAG,uBAAYA,WAAW,KAAvB,0DAAH,MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,wgBAaL,0BAAW,uBAAYA,WAAW,KAAvB,aAAX,wDAAwH,uBAAYA,WAAW,KAAvB,gBAAxH,SAAyL,uBAAYA,WAAW,KAAvB,gBAAzL,6GAA8V,uBAAYA,WAAW,KAAvB,gBAA9V,SAA+Z,uBAAYA,WAAW,KAAvB,gBAA/Z,uCACA,2GAA4F,uBAAYA,WAAW,KAAvB,sDAA5F,MACA,4FACA,oBACE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,oIACP,uBAAYA,WAAW,KAAvB,4EACL,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,iIACP,uBAAYA,WAAW,KAAvB,yEACL,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,wHACP,uBAAYA,WAAW,KAAvB,gEACL,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,wJACP,uBAAYA,WAAW,KAAvB,iGAEP,6HAA8G,uBAAYA,WAAW,KAAvB,mFAA9G,KAGH,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/tutorials/admin/custom-product-creation-form/modifier-class.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"customize-using-a-modifier-class\"\n    }}>{`Customize using a modifier class`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/frontend-core/ui-components/concepts/modifier/\"\n      }}>{`Modifier classes`}</a>{` should be used when static declaration is not applicable. For example, in cases when additional data should be loaded from database. Also, modifier is a place where you add validations to display only certain fields for certain product types.`}</p>\n    <p>{`In the run time, the form structure set in the modifier is merged with the configuration that comes from the `}<inlineCode parentName=\"p\">{`product_form.xml`}</inlineCode>{` configuration.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Magento\\\\Catalog\\\\Ui\\\\DataProvider\\\\Product\\\\Form\\\\ProductDataProvider`}</inlineCode>{` data provider class is responsible for data and metadata preparation for the product form. The pool of modifiers `}<inlineCode parentName=\"p\">{`Magento\\\\Catalog\\\\Ui\\\\DataProvider\\\\Product\\\\Form\\\\Modifier\\\\Pool`}</inlineCode>{` (virtual type) is injected to this data provider using the `}<inlineCode parentName=\"p\">{`__construct()`}</inlineCode>{` method. The pool's preference is defined in `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`.`}</p>\n    <p>{`To add your custom modifier, you need to do the following:`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#add-your-modifier\"\n        }}>{`Add the modifier code`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#add-modifier-to-the-pool\"\n        }}>{`Add it to the modifiers' pool in `}<inlineCode parentName=\"a\">{`di.xml`}</inlineCode></a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"add-your-modifier\"\n    }}>{`Add your modifier`}</h2>\n    <p>{`In your custom module directory, add the modifier class that implements the `}<inlineCode parentName=\"p\">{`Magento\\\\UI\\\\DataProvider\\\\Modifier\\\\ModifierInterface`}</inlineCode>{` interface or extends the `}<inlineCode parentName=\"p\">{`Magento\\\\Catalog\\\\Ui\\\\DataProvider\\\\Product\\\\Form\\\\Modifier\\\\AbstractModifier`}</inlineCode>{`class. In your modifier, the `}<inlineCode parentName=\"p\">{`modifyData()`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`modifyMeta()`}</inlineCode>{` methods must be implemented.`}</p>\n    <p>{`In the modifier class, you can add UI elements using the same structure as in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/xml\"\n      }}>{`XML`}</a>{` configuration.`}</p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\nuse Magento\\\\Catalog\\\\Ui\\\\DataProvider\\\\Product\\\\Form\\\\Modifier\\\\AbstractModifier;\nuse Magento\\\\Ui\\\\Component\\\\Form\\\\Field;\nuse Magento\\\\Ui\\\\Component\\\\Form\\\\Fieldset;\n\nclass Example extends AbstractModifier\n{\n    /**\n    * @param array $meta\n    *\n    * @return array\n    */\n    public function modifyMeta(array $meta): array\n    {\n        $meta['test_fieldset_name'] = [\n            'arguments' => [\n                'data' => [\n                    'config' => [\n                        'label' => __('Label For Fieldset'),\n                        'sortOrder' => 50,\n                        'collapsible' => true,\n                        'componentType' => Fieldset::NAME\n                    ]\n                ]\n            ],\n            'children' => [\n                'test_field_name' => [\n                    'arguments' => [\n                        'data' => [\n                            'config' => [\n                                'formElement' => 'select',\n                                'componentType' => Field::NAME,\n                                'options' => [\n                                    ['value' => 'test_value_1', 'label' => 'Test Value 1'],\n                                    ['value' => 'test_value_2', 'label' => 'Test Value 2'],\n                                    ['value' => 'test_value_3', 'label' => 'Test Value 3'],\n                                ],\n                                'visible' => 1,\n                                'required' => 1,\n                                'label' => __('Label For Element')\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n        ];\n\n        return $meta;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function modifyData(array $data)\n    {\n        return $data;\n    }\n}\n`}</code></pre>\n    <p>{`You can create nested structures of elements by adding them to the `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` key of any element.`}</p>\n    <h2 {...{\n      \"id\": \"add-modifier-to-the-pool\"\n    }}>{`Add modifier to the pool`}</h2>\n    <p>{`In `}<inlineCode parentName=\"p\">{`<your_module_dir>/etc/adminhtml/di.xml`}</inlineCode>{` define your modifier as a dependency for `}<inlineCode parentName=\"p\">{`Magento\\\\Catalog\\\\Ui\\\\DataProvider\\\\Product\\\\Form\\\\Modifier\\\\Pool`}</inlineCode>{`.`}</p>\n    <p>{`The following is an example of such a definition:`}</p>\n    <p><inlineCode parentName=\"p\">{`app/code/Magento/CatalogInventory/etc/adminhtml/di.xml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"Magento\\\\Catalog\\\\Ui\\\\DataProvider\\\\Product\\\\Form\\\\Modifier\\\\Pool\">\n    <arguments>\n        <argument name=\"modifiers\" xsi:type=\"array\">\n            <item name=\"advancedInventory\" xsi:type=\"array\">\n                <item name=\"class\" xsi:type=\"string\">Magento\\\\CatalogInventory\\\\Ui\\\\DataProvider\\\\Product\\\\Form\\\\Modifier\\\\AdvancedInventory</item>\n                <item name=\"sortOrder\" xsi:type=\"number\">20</item>\n            </item>\n        </argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`sortOrder`}</inlineCode>{` parameter defines the order of invocation for your `}<inlineCode parentName=\"p\">{`modifyData()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`modifyMeta()`}</inlineCode>{` methods among other these methods of other modifiers in the pool. If a modifier is first in a pool, its `}<inlineCode parentName=\"p\">{`modifyData()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`modifyMeta()`}</inlineCode>{` are invoked with empty arguments.`}</p>\n    <p>{`To access product model within your modifier, it's recommended to use an instance of `}<inlineCode parentName=\"p\">{`Magento\\\\Catalog\\\\Model\\\\Locator\\\\LocatorInterface`}</inlineCode>{`.`}</p>\n    <p>{`For reference, view the modifier classes in the modules, for example:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/Ui/DataProvider/Product/Form/Modifier/AdvancedPricing.php\"\n        }}><inlineCode parentName=\"a\">{`Magento/Catalog/Ui/DataProvider/Product/Form/Modifier/AdvancedPricing`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/Ui/DataProvider/Product/Form/Modifier/AttributeSet.php\"\n        }}><inlineCode parentName=\"a\">{`Magento/Catalog/Ui/DataProvider/Product/Form/Modifier/AttributeSet`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/Ui/DataProvider/Product/Form/Modifier/Eav.php\"\n        }}><inlineCode parentName=\"a\">{`Magento/Catalog/Ui/DataProvider/Product/Form/Modifier/Eav`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/ConfigurableProduct/Ui/DataProvider/Product/Form/Modifier/Data/AssociatedProducts.php\"\n        }}><inlineCode parentName=\"a\">{`Magento/ConfigurableProduct/Ui/DataProvider/Product/Form/Modifier/Data/AssociatedProducts`}</inlineCode></a></li>\n    </ul>\n    <p>{`For reference about setting conditions for displaying certain elements for certain product types, view `}<inlineCode parentName=\"p\">{`<Magento_Catalog_module_dir>/Ui/DataProvider/Product/Form/Modifier/Eav.php#L476`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}