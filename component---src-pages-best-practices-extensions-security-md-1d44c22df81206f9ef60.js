"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[75478],{79592:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return l},default:function(){return c}});var n=a(58168),o=a(80045),i=(a(88763),a(15680)),r=a(83407);const s=["components"],l={},d=(m="InlineAlert",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",e)});var m;const u={_frontmatter:l},p=r.A;function c(e){let{components:t}=e,a=(0,o.A)(e,s);return(0,i.mdx)(p,(0,n.A)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"security-performance-and-data-handling"},"Security, performance, and data handling"),(0,i.mdx)("p",null,"You should make sure that your extension handles data with care in order to prevent sensitive information from being exposed. Incorrect handling of data requests or class usage can negatively impact your extension and create security vulnerabilities. Consider applying the following best practices to your extension to improve performance and security."),(0,i.mdx)("h2",{id:"avoid-using-low-level-functionality"},"Avoid using low-level functionality"),(0,i.mdx)("p",null,"  The Adobe Commerce and Magento Open Source applications are made up of a variety of components that work together to perform different business functions. We discourage the use of low-level functionality such as the PHP ",(0,i.mdx)("inlineCode",{parentName:"p"},"curl_*")," functions and encourage the use of high-level components such as ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/HTTP/Adapter/Curl.php"},(0,i.mdx)("inlineCode",{parentName:"a"},"\\Magento\\Framework\\HTTP\\Adapter\\Curl")),". The use of low-level functionality can make the applications behave in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the application to attack."),(0,i.mdx)("p",null,"For a list of discouraged low-level functions, review the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento-coding-standard/blob/develop/Magento2/Sniffs/Functions/DiscouragedFunctionSniff.php"},(0,i.mdx)("inlineCode",{parentName:"a"},"Magento2/Sniffs/Functions/DiscouragedFunctionSniff.php"))," file and the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento-coding-standard"},"Coding Standard"),"."),(0,i.mdx)("h2",{id:"use-wrappers-instead-of-superglobal-variables"},"Use wrappers instead of superglobal variables"),(0,i.mdx)("p",null,"Make sure that your application does not directly use any PHP superglobals such as:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-php"},"$GLOBALS, $_SERVER, $_GET, $_POST, $_FILES, $_COOKIE, $_SESSION, $_REQUEST, $_ENV\n")),(0,i.mdx)("p",null,"Instead use the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/HTTP/PhpEnvironment/Request.php"},(0,i.mdx)("inlineCode",{parentName:"a"},"Magento\\Framework\\HTTP\\PhpEnvironment\\Request"))," wrapper class to safely access these values."),(0,i.mdx)("h2",{id:"use-the-correct-mysql-data-types"},"Use the correct MySQL data types"),(0,i.mdx)("p",null,"MySQL offers a range of numeric, string, and time data types. If you are storing a date, use a DATE or DATETIME field. Using an INTEGER or STRING can make SQL queries more complicated, if not impossible. It is often tempting to invent your own data formats; for example, storing serialized PHP objects in string. Database management may be easier, but MySQL will become a dumb data store and it may lead to problems later."),(0,i.mdx)("h2",{id:"use-innodb-storage-engine"},"Use InnoDB storage engine"),(0,i.mdx)("p",null,"We recommend using the InnoDB storage engine because other storage engines are not supported by some Cloud Database Services. Using the InnoDB storage engine ensures that extensions are more compatible with different environments."),(0,i.mdx)("h2",{id:"avoid-raw-sql-queries"},"Avoid raw SQL queries"),(0,i.mdx)("p",null,"Raw SQL queries can lead to potential security vulnerabilities and database portability issues. Use data adapter capabilities (",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/DB/Adapter/Pdo/Mysql.php"},(0,i.mdx)("inlineCode",{parentName:"a"},"Magento\\Framework\\DB\\Adapter\\Pdo\\Mysql"))," by default) to build and execute queries and move all data access code to a resource model. Use prepared statements to make sure that queries are safe to execute."),(0,i.mdx)(d,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"Building and executing custom queries with the data adapter does not automatically make them secure. Always use sanitization methods on dynamic data in your queries."),(0,i.mdx)("h2",{id:"use-primary-key"},"Use Primary Key"),(0,i.mdx)("p",null,"A Primary Key is required for any DB cluster to run effectively. Without a Primary Key, you ",(0,i.mdx)("em",{parentName:"p"},"will")," see performance issues during table replication."),(0,i.mdx)("h2",{id:"use-api-for-filesystem-operations"},"Use API for filesystem operations"),(0,i.mdx)("p",null,"With the introduction of Remote Storage compatibility, there is no guarantee that files are present in the local filesystem. Because PHP filesystem operations do not support remote storage solutions such as AWS S3, you should always use the Filesystem API to work with the filesystem."),(0,i.mdx)("p",null,"For example, the PHP native function ",(0,i.mdx)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.file-get-contents.php"},"file_get_contents()")," does not allow passing any credentials to authenticate to a remote storage. This functionality might be broken if the source file is located in remote storage."),(0,i.mdx)("p",null,"Use ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Framework\\Filesystem\\File\\Read::readAll()")," method instead. You can also check the list of unsupported PHP methods in the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento-coding-standard/blob/develop/Magento2/Sniffs/Functions/DiscouragedFunctionSniff.php"},"Magento Coding Standard")," repository."),(0,i.mdx)("h2",{id:"use-well-defined-indexes"},"Use well-defined indexes"),(0,i.mdx)("p",null,"Foreign keys should have indexes. If you are using a field in a WHERE clause of an SQL query you should have an index on it. Such indexes should cover multiple columns based on the queries needed. As a general rule of thumb, indexes should be applied to any column named in the WHERE clause of a SELECT query."),(0,i.mdx)("p",null,"For example, assume we have a user table with a numeric ID (the primary key) and an email address. During log on, MySQL must locate the correct ID by searching for an email. With an index, MySQL can use a fast search algorithm to locate the email almost instantly. Without an index, MySQL must check every record in sequence until the address is found."),(0,i.mdx)("p",null,"It is tempting to add indexes to every column, however, they are regenerated during every table INSERT or UPDATE. That can hit  performance; only add indexes when necessary."),(0,i.mdx)("h2",{id:"avoid-using-global-events"},"Avoid using global events"),(0,i.mdx)("p",null,"Only on rare occasions would it be necessary to use a global event. You should use frontend or adminhtml to narrow the scope instead."),(0,i.mdx)("h2",{id:"use-data-collections"},"Use data collections"),(0,i.mdx)("p",null,"Execution of a SQL query is one of the most resource-taxing operations. Running SQL queries in a loop often results in a performance bottleneck. To load the EAV model, several heavy queries are required to execute. As the number of executed queries is multiplied with the number of categories, the result is extremely inefficient and slow code. Instead of loading models in a loop, data collections can help to load a set of models in a very efficient manner."),(0,i.mdx)("h2",{id:"validate-input-and-properly-encode-or-escape-output"},"Validate input and properly encode or escape output"),(0,i.mdx)("p",null,"Remember to always validate data from non-trusted data sources. Sanitizing data coming into your extension and produced by it will improve overall security."),(0,i.mdx)("p",null,"For example, to prevent XSS vulnerability, avoid creating methods that output non-validated user-supplied data without proper HTML encoding."),(0,i.mdx)("h2",{id:"always-encrypt-sensitive-data-or-configurations"},"Always encrypt sensitive data or configurations"),(0,i.mdx)("p",null,"Never store sensitive information in clear text within a resource that might be accessible to another control sphere. This type of information should be encrypted or otherwise protected."),(0,i.mdx)("h2",{id:"avoid-unnecessary-logic-execution"},"Avoid unnecessary logic execution"),(0,i.mdx)("p",null,"Make sure that you never run code that will not be used in the next step."),(0,i.mdx)("p",null,"Check the below example where we always get the ",(0,i.mdx)("inlineCode",{parentName:"p"},"customerId")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"storeId"),", but we are not going to use them."),(0,i.mdx)("h3",{id:"example"},"Example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-php"},"public function getCustomerCart()\n{\n    $customerId = (int) $this->getSession()->getCustomerId();\n    $storeId = (int) $this->getSession()->getStoreId();\n\n    if ($this->_cart !== null) {\n        return $this->_cart;\n    }\n\n    ...\n    $this->_cart = $this->quoteRepository->getForCustomer($customerId, [$storeId]);\n    ...\n\n    return $this->_cart;\n}\n")),(0,i.mdx)("h2",{id:"use-the-proper-area"},"Use the proper area"),(0,i.mdx)("p",null,"Make sure that your observer or plugin is declared in the proper area:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Backend/etc/di.xml"},(0,i.mdx)("inlineCode",{parentName:"a"},"adminhtml"))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Cron/etc/di.xml"},(0,i.mdx)("inlineCode",{parentName:"a"},"crontab"))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Store/etc/di.xml"},(0,i.mdx)("inlineCode",{parentName:"a"},"frontend"))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/GraphQl/etc/di.xml"},(0,i.mdx)("inlineCode",{parentName:"a"},"graphql"))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Webapi/etc/di.xml"},(0,i.mdx)("inlineCode",{parentName:"a"},"webapi_rest"))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Webapi/etc/di.xml"},(0,i.mdx)("inlineCode",{parentName:"a"},"webapi_soap")))),(0,i.mdx)("p",null,"The plugins and observers should be declared in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"<module-dir>/etc/<area>/")," directory."),(0,i.mdx)(d,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"Use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"global")," area only if the plugin/observer should be executed in multiple areas."),(0,i.mdx)("p",null,"It is ",(0,i.mdx)("inlineCode",{parentName:"p"},"NOT RECOMMENDED")," to register everything in ",(0,i.mdx)("inlineCode",{parentName:"p"},"global")," area, as the bootstrapping process will become much heavier. For example, the application must run and process additional checks for your plugin/observer."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-best-practices-extensions-security-md-1d44c22df81206f9ef60.js.map