{"version":3,"file":"component---src-pages-development-payments-integrations-payment-gateway-gateway-command-md-01e6ee212caa0efbd91b.js","mappings":"gSASaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,SAAC,IAAD,CAAMA,QAAQ,UACd,eACE,GAAM,mBACH,oBACL,kBAAK,wFAAsF,cAAGC,WAAW,IACrG,KAAQ,uBACL,WAAe,4GACtB,kBAAK,+HACL,eACE,GAAM,aACH,cACL,kBAAK,6CAA2C,cAAGA,WAAW,IAC1D,KAAQ,uGACP,uBAAYA,WAAW,KAAM,kDAAkE,wBAAsB,cAAGA,WAAW,IACpI,KAAQ,qFACL,0BAA8B,MACrC,eACE,GAAM,wBACH,yBACL,kBAAK,QAAM,uBAAYA,WAAW,KAAM,wDAAqE,0BAAwB,uBAAYA,WAAW,KAAM,oBAAiC,oFAAkF,cAAGA,WAAW,IAC/R,KAAQ,uBACL,6BAAiC,MACxC,eACE,GAAM,2BACH,4BACL,kBAAK,+GAA6G,cAAGA,WAAW,IAC5H,KAAQ,4CACL,6BAAiC,oBACxC,kBAAK,iCAA+B,uBAAYA,WAAW,KAAM,6BAA0C,oHAAkH,cAAGA,WAAW,IACvO,KAAQ,uFACP,uBAAYA,WAAW,KAAM,0CAA0D,OAC5F,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,41BAWP,kBAAK,6LACL,kBAAK,uEACL,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAM,kBAA+B,MAAI,cAAGA,WAAW,IAC7F,KAAQ,sBACL,mBAAuB,mFAEhC,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAM,mBAAgC,MAAI,cAAGA,WAAW,IAC9F,KAAQ,sCACL,oBAAwB,4GAEjC,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAM,UAAuB,MAAI,cAAGA,WAAW,IACrF,KAAQ,qBACL,kBAAsB,6FAGjC,kBAAK,yBACL,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAM,WAAwB,MAAI,cAAGA,WAAW,IACtF,KAAQ,uBACL,oBAAwB,wFAEjC,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAM,aAA0B,MAAI,cAAGA,WAAW,IACxF,KAAQ,yBACL,sBAA0B,wCAKxC,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/payment-gateway/gateway-command.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"gateway-command\"\n    }}>{`Gateway Command`}</h1>\n    <p>{`Gateway Command is a component of the Adobe Commerce payment gateway that takes the `}<a parentName=\"p\" {...{\n        \"href\": \"index.md#terms-used\"\n      }}>{`payload`}</a>{` required for a particular payment provider and sends, receives, and processes the provider's response.`}</p>\n    <p>{`For each operation (authorization, capture and so on) of a certain payment provider - a separate gateway command is added.`}</p>\n    <h2 {...{\n      \"id\": \"interface\"\n    }}>{`Interface`}</h2>\n    <p>{`Basic interface for a gateway command is `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/CommandInterface.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Payment\\\\Gateway\\\\CommandInterface`}</inlineCode></a>{`. It implements the `}<a parentName=\"p\" {...{\n        \"href\": \"https://designpatternsphp.readthedocs.io/en/latest/Behavioral/Command/README.html\"\n      }}>{`Command design pattern`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"basic-implementation\"\n    }}>{`Basic implementation`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Payment\\\\Gateway\\\\Command\\\\GatewayCommand`}</inlineCode>{` class is the default `}<inlineCode parentName=\"p\">{`CommandInterface`}</inlineCode>{` implementation. It allows performing most of the operations implemented in the `}<a parentName=\"p\" {...{\n        \"href\": \"index.md#terms-used\"\n      }}>{`Commerce sales management`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"adding-gateway-commands\"\n    }}>{`Adding gateway commands`}</h2>\n    <p>{`For each particular integration with a payment provider, gateway commands are added using virtual types in `}<a parentName=\"p\" {...{\n        \"href\": \"../../components/dependency-injection.md\"\n      }}>{`dependency injection (DI)`}</a>{` configuration.`}</p>\n    <p>{`In the following example the `}<inlineCode parentName=\"p\">{`BraintreeAuthorizeCommand`}</inlineCode>{` gateway command is added. The command implements the \"authorize\" operation for the Braintree payment provider (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/etc/di.xml\"\n      }}><inlineCode parentName=\"a\">{`app/code/Magento/Braintree/etc/di.xml`}</inlineCode></a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeAuthorizeCommand\" type=\"Magento\\\\Payment\\\\Gateway\\\\Command\\\\GatewayCommand\">\n    <arguments>\n        <argument name=\"requestBuilder\" xsi:type=\"object\">BraintreeAuthorizeRequest</argument>\n        <argument name=\"transferFactory\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\Http\\\\TransferFactory</argument>\n        <argument name=\"client\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\Http\\\\Client\\\\TransactionSale</argument>\n        <argument name=\"handler\" xsi:type=\"object\">BraintreeAuthorizationHandler</argument>\n        <argument name=\"validator\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\Validator\\\\ResponseValidator</argument>\n        <argument name=\"errorMessageMapper\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\ErrorMapper\\\\VirtualErrorMessageMapper</argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`(The code sample is from Magento Open Source v2.2. Although the payment provider gateway was added in v2.0, the particular default implementation using the gateway were added in v2.1.)`}</p>\n    <p>{`A gateway command must be configured with the following arguments:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`requestBuilder`}</inlineCode>{`: `}<a parentName=\"p\" {...{\n            \"href\": \"request-builder.md\"\n          }}>{`request builder`}</a>{`, builds an array of provider-specific arguments using the order information.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`transferFactory`}</inlineCode>{`: `}<a parentName=\"p\" {...{\n            \"href\": \"gateway-client.md#transfer-factory\"\n          }}>{`transfer factory`}</a>{`, creates transfer object from request data, which will be used by Gateway Client to process requests.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`client`}</inlineCode>{`: `}<a parentName=\"p\" {...{\n            \"href\": \"gateway-client.md\"\n          }}>{`gateway client`}</a>{`, takes the provider-specific arguments and performs a low-level call to the provider.`}</p>\n      </li>\n    </ul>\n    <p>{`Optional arguments :`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`handler`}</inlineCode>{`: `}<a parentName=\"p\" {...{\n            \"href\": \"response-handler.md\"\n          }}>{`response handler`}</a>{`, changes the order and payment status depending on the payment provider response.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`validator`}</inlineCode>{`: `}<a parentName=\"p\" {...{\n            \"href\": \"response-validator.md\"\n          }}>{`response validator`}</a>{`, validates the provider response.`}</p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}