{"version":3,"file":"component---src-pages-development-payments-integrations-vault-admin-integration-md-26d8931e8a4115aa2091.js","mappings":"gSASaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,SAAC,IAAD,CAAMA,QAAQ,UACd,eACE,GAAM,kCACH,mCACL,kBAAK,oGACL,oBACE,eAAIC,WAAW,OACb,cAAGA,WAAW,MAAO,4DAA0D,uBAAYA,WAAW,KAAM,gCAA6C,OAE3J,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,kFAEvB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,aAAW,uBAAYA,WAAW,KAAM,UAAuB,yFAGxF,kBAAK,wEACL,eACE,GAAM,sBACH,uBACL,mBAAG,cAAGA,WAAW,IACb,KAAQ,2DACL,kDAAsD,8DAA4D,uBAAYA,WAAW,KAAM,UAAuB,gDAA8C,cAAGA,WAAW,IACrO,KAAQ,uHACP,uBAAYA,WAAW,KAAM,sCAAsD,gBACxF,kBAAK,+DACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,o5BAyBP,eACE,GAAM,sBACH,uBACL,kBAAK,6IACL,kBAAK,8IACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBACV,g4BAsCP,kBAAK,qGACL,eACE,GAAM,YACH,aACL,kBAAK,aAAW,uBAAYA,WAAW,KAAM,UAAuB,iEAA+D,cAAGA,WAAW,IAC7I,KAAQ,uBACL,sBAA0B,MACjC,kBAAK,6EAA2E,cAAGA,WAAW,IAC1F,KAAQ,iHACL,oEAAwE,MAC/E,kBAAK,gDAA8C,uBAAYA,WAAW,KAAM,mEAAgF,iEAEhK,kBAAK,4CACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,siBAWP,kBAAK,yIACL,eACE,GAAM,0CACH,2CACL,kBAAK,2PAAyP,uBAAYA,WAAW,KAAM,aAA0B,KAAG,cAAGA,WAAW,IAClU,KAAQ,0CACL,QAAY,QAAM,uBAAYA,WAAW,KAAM,qCAAkD,MACxG,kBAAK,qBAAmB,uBAAYA,WAAW,KAAM,mDAAgE,MACrH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,szCAgBP,kBAAK,4HACwD,cAAGA,WAAW,IACvE,KAAQ,4CACL,oCAAwC,WAGlD,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/vault/admin-integration.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"vault-implementation-for-admin\"\n    }}>{`Vault implementation for Admin`}</h1>\n    <p>{`To be able to use vault in Admin order creation, you need to take at least the following steps:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a token component provider and specify it in the `}<inlineCode parentName=\"p\">{`<your_module_dir>/etc/di.xml`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a custom vault JS component and specify it in the component provider.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a `}<inlineCode parentName=\"p\">{`.phtml`}</inlineCode>{` template, specify it in the component provider and the corresponding layout file.`}</p>\n      </li>\n    </ol>\n    <p>{`There are more details about these steps in the following sections.`}</p>\n    <h2 {...{\n      \"id\": \"component-provider\"\n    }}>{`Component provider`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"token-ui-component-provider.md#token-component-provider\"\n      }}>{`Similar to the storefront vault implementation`}</a>{`, create a token component provider and specify it in the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`. The component provider must implement the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Model/Ui/TokenUiComponentProviderInterface.php\"\n      }}><inlineCode parentName=\"a\">{`TokenUiComponentProviderInterface`}</inlineCode></a>{` interface.`}</p>\n    <p>{`Following is an example of a component provider for Admin:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class TokenUiComponentProvider implements TokenUiComponentProviderInterface\n{\n    /**\n     * @inheritdoc\n     */\n    public function getComponentForToken(PaymentTokenInterface $paymentToken)\n    {\n        $data = json_decode($paymentToken->getTokenDetails() ?: '{}', true);\n        $component = $this->componentFactory->create(\n            [\n                'config' => [\n                    'code' => ConfigProvider::CC_VAULT_CODE,\n                    'nonceUrl' => $this->getNonceRetrieveUrl(),\n                    TokenUiComponentProviderInterface::COMPONENT_DETAILS => $data,\n                    TokenUiComponentProviderInterface::COMPONENT_PUBLIC_HASH => $paymentToken->getPublicHash(),\n                    'template' => 'Magento_Braintree::form/vault.phtml'\n                ],\n                'name' => Template::class\n            ]\n        );\n\n        return $component;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"vault-js-component\"\n    }}>{`Vault JS component`}</h2>\n    <p>{`There is no default component implementation for the Admin, so your component must implement all logic for validation and order placing.`}</p>\n    <p>{`In the most cases, it is enough to implement getting payment code and setting public hash. This implementation might look like following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`define([\n    'jquery',\n    'uiComponent'\n], function ($, Class) {\n    'use strict';\n\n    return Class.extend({\n        defaults: {\n            $selector: null,\n            selector: 'edit_form'\n        },\n\n        initObservable: function () {\n            var self = this;\n\n            self.$selector = $('#' + self.selector);\n            this._super();\n\n            this.initEventHandlers();\n\n            return this;\n        },\n\n        getCode: function () {\n            return this.code;\n        },\n\n        initEventHandlers: function () {\n            $('#' + this.container).find('[name=\"payment[token_switcher]\"]')\n                .on('click', this.setPaymentDetails.bind(this));\n        },\n\n        setPaymentDetails: function () {\n            this.$selector.find('[name=\"payment[public_hash]\"]').val(this.publicHash);\n        }\n    });\n});\n`}</code></pre>\n    <p>{`This component will set public hash to a hidden input, when a user sets payment token as active.`}</p>\n    <h2 {...{\n      \"id\": \"template\"\n    }}>{`Template`}</h2>\n    <p>{`Create a `}<inlineCode parentName=\"p\">{`.phtml`}</inlineCode>{` template for displaying token details and specify it in the `}<a parentName=\"p\" {...{\n        \"href\": \"#component-provider\"\n      }}>{`component provider`}</a>{`.`}</p>\n    <p>{`For reference, view the Adobe Commerce default Vault template for Admin: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/view/adminhtml/templates/form/vault.phtml\"\n      }}>{`app/code/Magento/Vault/view/adminhtml/templates/form/vault.phtml`}</a>{`.`}</p>\n    <p>{`In the billing form block for Admin layout (`}<inlineCode parentName=\"p\">{`%module_dir%/view/adminhtml/layout/sales_order_create_index.xml`}</inlineCode>{`)\nspecify the payment method code and path to the template.`}</p>\n    <p>{`Following is an example of such layout:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <body>\n        <referenceBlock name=\"order_create_billing_form\">\n            <action method=\"setMethodFormTemplate\">\n                <argument name=\"method\" xsi:type=\"string\">braintree_cc_vault</argument>\n                <argument name=\"template\" xsi:type=\"string\">Magento_Vault::form/vault.phtml</argument>\n            </action>\n        </referenceBlock>\n    </body>\n</page>\n`}</code></pre>\n    <p>{`According to this configuration the Magento_Vault module will render vault payments and all depending JS components will be created.`}</p>\n    <h2 {...{\n      \"id\": \"specific-vault-configuration-for-admin\"\n    }}>{`Specific vault configuration for Admin`}</h2>\n    <p>{`You might have specific request builders, response handlers or other entities for the Admin panel. For example, in your implementation 3D Secure might not be available in Admin. In this case, you need to create corresponding virtual types for the `}<inlineCode parentName=\"p\">{`adminhtml`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"../../../architecture/modules/areas.md\"\n      }}>{`area`}</a>{` in `}<inlineCode parentName=\"p\">{`%module_dir%/etc/adminhtml/di.xml`}</inlineCode>{`.`}</p>\n    <p>{`Example from the `}<inlineCode parentName=\"p\">{`app/code/Magento/Braintree/etc/adminhtml/di.xml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeVaultAuthorizeRequest\" type=\"Magento\\\\Payment\\\\Gateway\\\\Request\\\\BuilderComposite\">\n    <arguments>\n        <argument name=\"builders\" xsi:type=\"array\">\n            <item name=\"customer\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\CustomerDataBuilder</item>\n            <item name=\"payment\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\PaymentDataBuilder</item>\n            <item name=\"channel\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\ChannelDataBuilder</item>\n            <item name=\"address\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\AddressDataBuilder</item>\n            <item name=\"3dsecure\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\ThreeDSecureDataBuilder</item>\n            <item name=\"device_data\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\KountPaymentDataBuilder</item>\n            <item name=\"dynamic_descriptor\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\DescriptorDataBuilder</item>\n            <item name=\"store\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\StoreConfigBuilder</item>\n            <item name=\"merchant_account\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\MerchantAccountDataBuilder</item>\n        </argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`This configuration will be applied only in Admin panel.\nFor more information about area-specific configuration see the `}<a parentName=\"p\" {...{\n        \"href\": \"../base-integration/admin-integration.md\"\n      }}>{`Configure payment method by area`}</a>{` topic.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}