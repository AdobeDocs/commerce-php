"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[52045],{88438:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return s},default:function(){return l}});var i=n(87462),m=n(63366),a=(n(15007),n(64983)),o=n(91515),r=["components"],s={},p={_frontmatter:s},d=o.Z;function l(e){var t=e.components,n=(0,m.Z)(e,r);return(0,a.mdx)(d,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"add-a-new-input-form-to-checkout"},"Add a new input form to checkout"),(0,a.mdx)("p",null,"This topic describes how to add a custom input form (implemented as a UI component) to the ",(0,a.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/checkout"},"Checkout")," page."),(0,a.mdx)("p",null,(0,a.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"646px"}},"\n      ",(0,a.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"68.75%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,a.mdx)("picture",{parentName:"span"},"\n          ",(0,a.mdx)("source",{parentName:"picture",srcSet:["/commerce-php/static/653238c55b999f125a39e6b7975fc077/cb523/how_checkout_form.webp 320w","/commerce-php/static/653238c55b999f125a39e6b7975fc077/797b9/how_checkout_form.webp 640w","/commerce-php/static/653238c55b999f125a39e6b7975fc077/c85e8/how_checkout_form.webp 646w"],sizes:"(max-width: 646px) 100vw, 646px",type:"image/webp"}),"\n          ",(0,a.mdx)("source",{parentName:"picture",srcSet:["/commerce-php/static/653238c55b999f125a39e6b7975fc077/72799/how_checkout_form.png 320w","/commerce-php/static/653238c55b999f125a39e6b7975fc077/6af66/how_checkout_form.png 640w","/commerce-php/static/653238c55b999f125a39e6b7975fc077/27524/how_checkout_form.png 646w"],sizes:"(max-width: 646px) 100vw, 646px",type:"image/png"}),"\n          ",(0,a.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/commerce-php/static/653238c55b999f125a39e6b7975fc077/27524/how_checkout_form.png",alt:"The input form with four fields",title:"The input form with four fields",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,a.mdx)("p",null,"Most of the elements, including the default forms on the Checkout page are implemented as UI components. And we recommend your custom form to be a UI component, extending the default ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/web/js/form/form.js"},"Magento_Ui/js/form/form")," component."),(0,a.mdx)("p",null,"The application provides the ability to add a custom form to any of the checkout steps: Shipping Information, Review and Payment Information, or custom. In order to add a custom form that is a UI component, take the following steps:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("a",{parentName:"li",href:"#step-1-create-the-js-implementation-of-the-form-ui-component"},"Create the JS implementation of the form UI component"),"."),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("a",{parentName:"li",href:"#step-2-create-the-html-template"},"Create the knockout.js HTML template for rendering the form"),"."),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("a",{parentName:"li",href:"#step-3-declare-the-form-in-the-checkout-page-layout"},"Declare the form in the checkout page layout"),".")),(0,a.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://devdocs.magento.com/guides/v2.4/config-guide/cli/config-cli-subcommands-mode.html"},"Change to developer mode")," while you perform all customizations and debugging."),(0,a.mdx)("p",null,"For the sake of compatibility, upgradability, and easy maintenance, do not edit the default application code. Instead, add your customizations in a separate module. For your checkout customization to be applied correctly, your custom module should ",(0,a.mdx)("a",{parentName:"p",href:"../../development/build/composer-integration.md"},"depend")," on the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Magento_Checkout")," module."),(0,a.mdx)("p",null,"Do not use ",(0,a.mdx)("inlineCode",{parentName:"p"},"Ui")," for your custom module name, because ",(0,a.mdx)("inlineCode",{parentName:"p"},"%Vendor%_Ui")," notation, required when specifying paths, might cause issues."),(0,a.mdx)("h2",{id:"step-1-create-the-js-implementation-of-the-form-ui-component"},"Step 1: Create the JS implementation of the form UI component"),(0,a.mdx)("p",null,"In your ",(0,a.mdx)("inlineCode",{parentName:"p"},"<your_module_dir>/view/frontend/web/js/view/")," directory, create a ",(0,a.mdx)("inlineCode",{parentName:"p"},"custom-checkout-form.js")," file implementing the form."),(0,a.mdx)("p",null,"Example of extending the default form component:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},"/*global define*/\ndefine([\n    'Magento_Ui/js/form/form'\n], function(Component) {\n    'use strict';\n    return Component.extend({\n        initialize: function () {\n            this._super();\n            // component initialization logic\n            return this;\n        },\n\n        /**\n         * Form submit handler\n         *\n         * This method can have any name.\n         */\n        onSubmit: function() {\n            // trigger form validation\n            this.source.set('params.invalid', false);\n            this.source.trigger('customCheckoutForm.data.validate');\n\n            // verify that form data is valid\n            if (!this.source.get('params.invalid')) {\n                // data is retrieved from data provider by value of the customScope property\n                var formData = this.source.get('customCheckoutForm');\n                // do something with form data\n                console.dir(formData);\n            }\n        }\n    });\n});\n")),(0,a.mdx)("h2",{id:"step-2-create-the-html-template"},"Step 2: Create the HTML template"),(0,a.mdx)("p",null,"Add the ",(0,a.mdx)("inlineCode",{parentName:"p"},"knockout.js")," HTML template for the form component under the ",(0,a.mdx)("inlineCode",{parentName:"p"},"<your_module_dir>/view/frontend/web/template")," directory called ",(0,a.mdx)("inlineCode",{parentName:"p"},"custom-checkout-form.html"),"."),(0,a.mdx)("p",null,"Example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-html"},'<div>\n    <form id="custom-checkout-form" class="form" data-bind="attr: {\'data-hasrequired\': $t(\'* Required Fields\')}">\n        <fieldset class="fieldset">\n            <legend data-bind="i18n: \'Custom Checkout Form\'"></legend>\n            \x3c!-- ko foreach: getRegion(\'custom-checkout-form-fields\') --\x3e\n            \x3c!-- ko template: getTemplate() --\x3e\x3c!-- /ko --\x3e\n            \x3c!--/ko--\x3e\n        </fieldset>\n        <button type="reset">\n            <span data-bind="i18n: \'Reset\'"></span>\n        </button>\n        <button type="button" data-bind="click: onSubmit" class="action">\n            <span data-bind="i18n: \'Submit\'"></span>\n        </button>\n    </form>\n</div>\n')),(0,a.mdx)("h2",{id:"step-3-declare-the-form-in-the-checkout-page-layout"},"Step 3: Declare the form in the checkout page layout"),(0,a.mdx)("p",null,"Certain default checkout templates declare regions where additional content can be inserted. You can add your custom form in any of these regions. These regions are provided with corresponding comments in the default Checkout page layout file ",(0,a.mdx)("inlineCode",{parentName:"p"},"<Checkout_module_dir>/view/frontend/layout/checkout_index_index.xml"),"."),(0,a.mdx)("p",null,"Also you locate the regions in the ",(0,a.mdx)("inlineCode",{parentName:"p"},".html")," templates of the blocks used in this ",(0,a.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/layout"},"layout")," file.\nFor example, the shipping JS component (see ",(0,a.mdx)("inlineCode",{parentName:"p"},"<Magento_Checkout_module_dir>/view/frontend/web/template/shipping.html"),") provides the ",(0,a.mdx)("inlineCode",{parentName:"p"},"before-form")," region and corresponding UI container."),(0,a.mdx)("p",null,"Any content added here is rendered before the Shipping Address form on the Shipping Information step. To add content to this region, create a ",(0,a.mdx)("inlineCode",{parentName:"p"},"checkout_index_index.xml")," layout update in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"<your_module_dir>/view/frontend/layout/"),"."),(0,a.mdx)("p",null,"It should be similar to the following:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0"?>\n<page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">\n    <body>\n        <referenceBlock name="checkout.root">\n            <arguments>\n                <argument name="jsLayout" xsi:type="array">\n                    <item name="components" xsi:type="array">\n                        <item name="checkout" xsi:type="array">\n                            <item name="children" xsi:type="array">\n                                <item name="steps" xsi:type="array">\n                                    <item name="children" xsi:type="array">\n                                        <item name="shipping-step" xsi:type="array">\n                                            <item name="children" xsi:type="array">\n                                                <item name="shippingAddress" xsi:type="array">\n                                                    <item name="children" xsi:type="array">\n                                                        <item name="before-form" xsi:type="array">\n                                                            <item name="children" xsi:type="array">\n                                                                <item name="custom-checkout-form-container" xsi:type="array">\n                                                                    \x3c!-- Add this item to configure your js file  --\x3e\n                                                                    <item name="component" xsi:type="string">VendorName_ModuleName/js/view/custom-checkout-form</item>\n                                                                    <item name="provider" xsi:type="string">checkoutProvider</item>\n                                                                    <item name="config" xsi:type="array">\n                                                                        \x3c!-- And this to add your html template  --\x3e\n                                                                        <item name="template" xsi:type="string">VendorName_ModuleName/custom-checkout-form</item>\n                                                                    </item>\n                                                                    <item name="children" xsi:type="array">\n                                                                        \x3c!-- Here we will add the form fields  --\x3e\n                                                                    </item>\n                                                                </item>\n                                                            </item>\n                                                        </item>\n                                                    </item>\n                                                </item>\n                                            </item>\n                                        </item>\n                                    </item>\n                                </item>\n                            </item>\n                        </item>\n                    </item>\n                </argument>\n            </arguments>\n        </referenceBlock>\n    </body>\n</page>\n')),(0,a.mdx)("h3",{id:"clear-files-after-modification"},"Clear files after modification"),(0,a.mdx)("p",null,"If you modify your custom ",(0,a.mdx)("inlineCode",{parentName:"p"},".html")," template after it was applied on the store pages, the changes will not apply until you do the following:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Delete all files in the ",(0,a.mdx)("inlineCode",{parentName:"li"},"pub/static/frontend")," and ",(0,a.mdx)("inlineCode",{parentName:"li"},"var/view_preprocessed")," directories."),(0,a.mdx)("li",{parentName:"ol"},"Reload the pages.")),(0,a.mdx)("h3",{id:"static-forms"},"Static forms"),(0,a.mdx)("p",null,"The term static refers to the forms where all the fields are already known/predefined and do not depend on any settings in the ",(0,a.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/admin"},"Admin"),". Compare to ",(0,a.mdx)("a",{parentName:"p",href:"#dynamically-defined-forms"},"dynamic forms"),"."),(0,a.mdx)("p",null,"The fields of static forms are not generated dynamically, so they can be defined in a layout."),(0,a.mdx)("p",null,"The following code sample shows the configuration of the ",(0,a.mdx)("inlineCode",{parentName:"p"},"custom-checkout-form-container")," form, defined in the previous step. It contains four fields: a text input, a select, a checkbox, and a date field. This form uses the checkout data provider (",(0,a.mdx)("inlineCode",{parentName:"p"},"checkoutProvider"),") that was introduced in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Magento_Checkout")," module:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-xml"},'...\n    <item name="custom-checkout-form-container" xsi:type="array">\n        ...\n        <item name="children" xsi:type="array">\n            <item name="custom-checkout-form-fieldset" xsi:type="array">\n                \x3c!-- uiComponent is used as a wrapper for form fields (its template will render all children as a list) --\x3e\n                <item name="component" xsi:type="string">uiComponent</item>\n                \x3c!-- the following display area is used in template (see below) --\x3e\n                <item name="displayArea" xsi:type="string">custom-checkout-form-fields</item>\n                <item name="children" xsi:type="array">\n                    <item name="text_field" xsi:type="array">\n                        <item name="component" xsi:type="string">Magento_Ui/js/form/element/abstract</item>\n                        <item name="config" xsi:type="array">\n                            \x3c!-- customScope is used to group elements within a single form (e.g. they can be validated separately) --\x3e\n                            <item name="customScope" xsi:type="string">customCheckoutForm</item>\n                            <item name="template" xsi:type="string">ui/form/field</item>\n                            <item name="elementTmpl" xsi:type="string">ui/form/element/input</item>\n                        </item>\n                        <item name="provider" xsi:type="string">checkoutProvider</item>\n                        <item name="dataScope" xsi:type="string">customCheckoutForm.text_field</item>\n                        <item name="label" xsi:type="string" translate="true">Text Field</item>\n                        <item name="sortOrder" xsi:type="string">1</item>\n                        <item name="validation" xsi:type="array">\n                            <item name="required-entry" xsi:type="string">true</item>\n                        </item>\n                    </item>\n                    <item name="checkbox_field" xsi:type="array">\n                        <item name="component" xsi:type="string">Magento_Ui/js/form/element/boolean</item>\n                        <item name="config" xsi:type="array">\n                            \x3c!--customScope is used to group elements within a single form (e.g. they can be validated separately)--\x3e\n                            <item name="customScope" xsi:type="string">customCheckoutForm</item>\n                            <item name="template" xsi:type="string">ui/form/field</item>\n                            <item name="elementTmpl" xsi:type="string">ui/form/element/checkbox</item>\n                        </item>\n                        <item name="provider" xsi:type="string">checkoutProvider</item>\n                        <item name="dataScope" xsi:type="string">customCheckoutForm.checkbox_field</item>\n                        <item name="label" xsi:type="string" translate="true">Checkbox Field</item>\n                        <item name="sortOrder" xsi:type="string">3</item>\n                    </item>\n                    <item name="select_field" xsi:type="array">\n                        <item name="component" xsi:type="string">Magento_Ui/js/form/element/select</item>\n                        <item name="config" xsi:type="array">\n                            \x3c!--customScope is used to group elements within a single form (e.g. they can be validated separately)--\x3e\n                            <item name="customScope" xsi:type="string">customCheckoutForm</item>\n                            <item name="template" xsi:type="string">ui/form/field</item>\n                            <item name="elementTmpl" xsi:type="string">ui/form/element/select</item>\n                        </item>\n                        <item name="options" xsi:type="array">\n                            <item name="0" xsi:type="array">\n                                <item name="label" xsi:type="string" translate="true">Please select value</item>\n                                <item name="value" xsi:type="string"></item>\n                            </item>\n                            <item name="1" xsi:type="array">\n                                <item name="label" xsi:type="string" translate="true">Value 1</item>\n                                <item name="value" xsi:type="string">value_1</item>\n                            </item>\n                            <item name="2" xsi:type="array">\n                                <item name="label" xsi:type="string" translate="true">Value 2</item>\n                                <item name="value" xsi:type="string">value_2</item>\n                            </item>\n                        </item>\n                        \x3c!-- value element allows to specify default value of the form field --\x3e\n                        <item name="value" xsi:type="string">value_2</item>\n                        <item name="provider" xsi:type="string">checkoutProvider</item>\n                        <item name="dataScope" xsi:type="string">customCheckoutForm.select_field</item>\n                        <item name="label" xsi:type="string" translate="true">Select Field</item>\n                        <item name="sortOrder" xsi:type="string">2</item>\n                    </item>\n                    <item name="date_field" xsi:type="array">\n                        <item name="component" xsi:type="string">Magento_Ui/js/form/element/date</item>\n                        <item name="config" xsi:type="array">\n                            \x3c!--customScope is used to group elements within a single form (e.g. they can be validated separately)--\x3e\n                            <item name="customScope" xsi:type="string">customCheckoutForm</item>\n                            <item name="template" xsi:type="string">ui/form/field</item>\n                            <item name="elementTmpl" xsi:type="string">ui/form/element/date</item>\n                        </item>\n                        <item name="provider" xsi:type="string">checkoutProvider</item>\n                        <item name="dataScope" xsi:type="string">customCheckoutForm.date_field</item>\n                        <item name="label" xsi:type="string" translate="true">Date Field</item>\n                        <item name="validation" xsi:type="array">\n                            <item name="required-entry" xsi:type="string">true</item>\n                        </item>\n                    </item>\n                </item>\n            </item>\n        </item>\n    </item>\n...\n')),(0,a.mdx)("h3",{id:"dynamically-defined-forms"},"Dynamically defined forms"),(0,a.mdx)("p",null,"Dynamically defined, or dynamic, forms are the forms where the set or type of fields can change. For example, the fields displayed on the checkout form depend on the Admin settings: depending on the ",(0,a.mdx)("strong",{parentName:"p"},"Admin > Stores > Settings > Configuration > Customers > Customer Configuration > Name and Address Options"),"."),(0,a.mdx)("p",null,"For such forms, you must implement a ",(0,a.mdx)("a",{parentName:"p",href:"../../development/components/plugins.md"},"plugin")," for the ",(0,a.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Checkout\\Block\\Checkout\\LayoutProcessor::process")," method.\nA plugin can add custom fields definitions to layout at runtime. The format of the field definition is the same as for fields defined in layout."),(0,a.mdx)("p",null,"For example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-php?start_inline=1"},"$textField = [\n    'component' => 'Magento_Ui/js/form/element/abstract',\n    'config' => [\n        'customScope' => 'customCheckoutForm',\n        'template' => 'ui/form/field',\n        'elementTmpl' => 'ui/form/element/input',\n    ],\n    'provider' => 'checkoutProvider',\n    'dataScope' => 'customCheckoutForm.text_field',\n    'label' => 'Text Field',\n    'sortOrder' => 1,\n    'validation' => [\n        'required-entry' => true,\n    ],\n];\n")))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-tutorials-custom-checkout-add-form-md-af372f4ef36d54749dc5.js.map