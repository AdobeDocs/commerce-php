{"version":3,"file":"component---src-pages-developer-components-plugins-md-2ce4c7e77908526745d8.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/developer/components/plugins.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"plugins\"\n    }}>{`Plugins`}</h1>\n    <p>{`A plugin, or interceptor, is a class that modifies the behavior of public class functions by intercepting a function call and running code before, after, or around that function call. This allows you to `}<em parentName=\"p\">{`substitute`}</em>{` or `}<em parentName=\"p\">{`extend`}</em>{` the behavior of original, public methods for any `}<em parentName=\"p\">{`class`}</em>{` or `}<em parentName=\"p\">{`interface`}</em>{`.`}</p>\n    <p>{`Extensions that wish to intercept and change the behavior of a `}<em parentName=\"p\">{`public method`}</em>{` can create a `}<inlineCode parentName=\"p\">{`Plugin`}</inlineCode>{` class.`}</p>\n    <p>{`This `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/interception\"\n      }}>{`interception`}</a>{` approach reduces conflicts among extensions that change the behavior of the same class or method. Your `}<inlineCode parentName=\"p\">{`Plugin`}</inlineCode>{` class implementation changes the behavior of a class function, but it does not change the class itself. Adobe Commerce and Magento Open Source call these interceptors sequentially according to a configured sort order, so they do not conflict with one another.`}</p>\n    <h2 {...{\n      \"id\": \"limitations\"\n    }}>{`Limitations`}</h2>\n    <p>{`Plugins can not be used on following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Final methods`}</li>\n      <li parentName=\"ul\">{`Final classes`}</li>\n      <li parentName=\"ul\">{`Non-public methods`}</li>\n      <li parentName=\"ul\">{`Class methods (such as static methods)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`__construct`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`__destruct`}</inlineCode></li>\n      <li parentName=\"ul\">{`Virtual types`}</li>\n      <li parentName=\"ul\">{`Objects that are instantiated before `}<inlineCode parentName=\"li\">{`Magento\\\\Framework\\\\Interception`}</inlineCode>{` is bootstrapped`}</li>\n      <li parentName=\"ul\">{`Objects that implement `}<inlineCode parentName=\"li\">{`Magento\\\\Framework\\\\ObjectManager\\\\NoninterceptableInterface`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"declaring-a-plugin\"\n    }}>{`Declaring a plugin`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file in your `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/module\"\n      }}>{`module`}</a>{` declares a plugin for a class object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config>\n    <type name=\"{ObservedType}\">\n      <plugin name=\"{pluginName}\" type=\"{PluginClassName}\" sortOrder=\"1\" disabled=\"false\" />\n    </type>\n</config>\n`}</code></pre>\n    <p>{`You must specify these elements:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type name`}</inlineCode>{`. A class or interface which the plugin observes.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`plugin name`}</inlineCode>{`. An arbitrary plugin name that identifies a plugin. Also used to merge the configurations for the plugin.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`plugin type`}</inlineCode>{`. The name of a plugin's class or its virtual type. Use the following naming convention when you specify this element: `}<inlineCode parentName=\"li\">{`\\\\Vendor\\\\Module\\\\Plugin\\\\<ClassName>`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`The following elements are optional:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`plugin sortOrder`}</inlineCode>{`. Plugins that call the same method run them using this order.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`plugin disabled`}</inlineCode>{`. To disable a plugin, set this element to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`. The default value is `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{`.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"defining-a-plugin\"\n    }}>{`Defining a plugin`}</h3>\n    <p>{`By applying code before, after, or around a public method, a plugin extends or modifies that method's behavior.`}</p>\n    <p>{`The first argument for the before, after, and around methods is an object that provides access to all public methods of the observed method's class.`}</p>\n    <h3 {...{\n      \"id\": \"plugin-method-naming-convention\"\n    }}>{`Plugin method naming convention`}</h3>\n    <p>{`It is a best practice to capitalize the first letter of the class method name for which you want to create a plugin before adding `}<inlineCode parentName=\"p\">{`before`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`around`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`after`}</inlineCode>{` prefixes to it.`}</p>\n    <p>{`For example, to create a plugin for the `}<inlineCode parentName=\"p\">{`setName`}</inlineCode>{` method of some class:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`...\n    public function setName($name)\n    {\n        ...\n    }\n...\n`}</code></pre>\n    <p>{`In the plugin class, the `}<inlineCode parentName=\"p\">{`setName`}</inlineCode>{` method may have one of the following names:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`beforeSetName`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`aroundSetName`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`afterSetName`}</inlineCode></li>\n    </ul>\n    <p>{`If the first letter in the name of the class method name for which you want to create a plugin is the `}<inlineCode parentName=\"p\">{`underscore`}</inlineCode>{` character, then you do not need to capitalize it in the plugin class.`}</p>\n    <p>{`For example, to create a plugin for the `}<inlineCode parentName=\"p\">{`_construct`}</inlineCode>{` method of some class:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`...\n    public function _construct()\n    {\n        ...\n    }\n...\n`}</code></pre>\n    <p>{`Use the following method names for the `}<inlineCode parentName=\"p\">{`_construct`}</inlineCode>{` method in the plugin class:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`before_construct`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`around_construct`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`after_construct`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"before-methods\"\n    }}>{`Before methods`}</h2>\n    <p>{`The application runs all before methods ahead of the call to an observed method. These methods must have the same name as the observed method with 'before' as the prefix.`}</p>\n    <p>{`You can use before methods to change the arguments of an observed method by returning a modified argument. If there are any arguments, the method should return an array of those arguments. If the method does not change the argument for the observed method, it should return a `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` value.`}</p>\n    <p>{`Below is an example of a before method modifying the `}<inlineCode parentName=\"p\">{`$name`}</inlineCode>{` argument before passing it on to the observed `}<inlineCode parentName=\"p\">{`setName`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace My\\\\Module\\\\Plugin;\n\nuse Magento\\\\Catalog\\\\Model\\\\Product;\n\nclass ProductAttributesUpdater\n{\n    public function beforeSetName(Product $subject, $name)\n    {\n        return ['(' . $name . ')'];\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"after-methods\"\n    }}>{`After methods`}</h2>\n    <p>{`The application runs all after methods following the completion of the observed method. The application requires these methods have a return value and they must have the same name as the observed method with 'after' as the prefix.`}</p>\n    <p>{`You can use these methods to change the result of an observed method by modifying the original result and returning it at the end of the method.`}</p>\n    <p>{`Below is an example of an after method modifying the return value `}<inlineCode parentName=\"p\">{`$result`}</inlineCode>{` of an observed methods call.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace My\\\\Module\\\\Plugin;\n\nuse Magento\\\\Catalog\\\\Model\\\\Product;\n\nclass ProductAttributesUpdater\n{\n    public function afterGetName(Product $subject, $result)\n    {\n        return '|' . $result . '|';\n    }\n}\n`}</code></pre>\n    <p>{`The after methods have access to all the arguments of their observed methods. When the observed method completes, the application passes the result and arguments to the next after method that follows. If the observed method does not return a result (`}<inlineCode parentName=\"p\">{`@return void`}</inlineCode>{`), then it passes a `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` value to the next after method.`}</p>\n    <p>{`Below is an example of an after method that accepts the `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` result and arguments from the observed `}<inlineCode parentName=\"p\">{`login`}</inlineCode>{` method for `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Backend/Model/Auth.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Backend\\\\Model\\\\Auth`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace My\\\\Module\\\\Plugin;\n\nuse Magento\\\\Backend\\\\Model\\\\Auth;\nuse Psr\\\\Log\\\\LoggerInterface;\n\nclass AuthLogger\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @param Auth $authModel\n     * @param null $result\n     * @param string $username\n     * @return void\n     * @SuppressWarnings(PHPMD.UnusedFormalParameter)\n     */\n    public function afterLogin(Auth $authModel, $result, $username)\n    {\n        $this->logger->debug('User ' . $username . ' signed in.');\n    }\n}\n`}</code></pre>\n    <p>{`After methods do not need to declare all the arguments of their observed methods except those that the method uses and any arguments from the observed method that come before those used arguments.`}</p>\n    <p>{`The following example is a class with an after method for `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/Model/Product/Action.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Catalog\\\\Model\\\\Product\\\\Action::updateWebsites($productIds, $websiteIds, $type)`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nuse Psr\\\\Log\\\\LoggerInterface;\nuse Magento\\\\Catalog\\\\Model\\\\Product\\\\Action;\n\nclass WebsitesLogger\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function afterUpdateWebsites(Action $subject, $result, $productIds, $websiteIds)\n    {\n        $this->logger->log('Updated websites: ' . implode(', ',  $websiteIds));\n    }\n}\n\n`}</code></pre>\n    <p>{`In the example, the `}<inlineCode parentName=\"p\">{`afterUpdateWebsites`}</inlineCode>{` function uses the variable `}<inlineCode parentName=\"p\">{`$websiteIds`}</inlineCode>{`, so it declares that variable as an argument. It also declares `}<inlineCode parentName=\"p\">{`$productIds`}</inlineCode>{` because it comes before `}<inlineCode parentName=\"p\">{`$websiteIds`}</inlineCode>{` in the parameter signature of the observed method. The after method did not list `}<inlineCode parentName=\"p\">{`$type`}</inlineCode>{` because it did not use it inside the method nor does it come before `}<inlineCode parentName=\"p\">{`$websiteIds`}</inlineCode>{`.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If an argument is optional in the observed method, then the after method should also declare it as optional.`}</p>\n    <h2 {...{\n      \"id\": \"around-methods\"\n    }}>{`Around methods`}</h2>\n    <p>{`The application runs the code in around methods before and after their observed methods. Using these methods allow you to override an observed method. around methods must have the same name as the observed method with 'around' as the prefix.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Avoid using around method plugins when they are not required because they increase stack traces and affect performance.\nThe only use case for around method plugins is when the execution of all further plugins and original methods need termination.\nUse after method plugins if you require arguments for replacing or altering function results.`}</p>\n    <p>{`Before the list of the original method's arguments, around methods receive a `}<inlineCode parentName=\"p\">{`callable`}</inlineCode>{` that will allow a call to the next method in the chain. When your code executes the `}<inlineCode parentName=\"p\">{`callable`}</inlineCode>{`, the application calls the next plugin or the observed function.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If the around method does not call the `}<inlineCode parentName=\"p\">{`callable`}</inlineCode>{`, it will prevent the execution of all the plugins next in the chain and the original method call.`}</p>\n    <p>{`Below is an example of an around method adding behavior before and after an observed method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace My\\\\Module\\\\Plugin;\n\nuse Magento\\\\Catalog\\\\Model\\\\Product;\n\nclass ProductAttributesUpdater\n{\n    public function aroundSave(Product $subject, callable $proceed)\n    {\n        $someValue = $this->doSmthBeforeProductIsSaved();\n        $returnValue = null;\n\n        if ($this->canCallProceedCallable($someValue)) {\n            $returnValue = $proceed();\n        }\n\n        if ($returnValue) {\n            $this->postProductToFacebook();\n        }\n\n        return $returnValue;\n    }\n}\n`}</code></pre>\n    <p>{`When you wrap a method which accepts arguments, your plugin must accept those arguments and you must forward them when you invoke the `}<inlineCode parentName=\"p\">{`proceed`}</inlineCode>{` callable. You must be careful to match the default parameters and type hints of the original signature of the method.`}</p>\n    <p>{`For example, the following code defines a parameter of type `}<inlineCode parentName=\"p\">{`SomeType`}</inlineCode>{`, which is nullable:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace My\\\\Module\\\\Model;\n\nclass MyUtility\n{\n    public function save(SomeType $obj = null)\n    {\n        //do something\n    }\n}\n`}</code></pre>\n    <p>{`You should wrap this method with a plugin:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace My\\\\Module\\\\Plugin;\n\nuse My\\\\Module\\\\Model\\\\MyUtility;\n\nclass MyUtilityUpdater\n{\n    public function aroundSave(MyUtility $subject, callable $proceed, SomeType $obj = null)\n    {\n        //do something\n    }\n}\n`}</code></pre>\n    <p>{`Note if you miss `}<inlineCode parentName=\"p\">{`= null`}</inlineCode>{` and the applicationcalls the original method with `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/php\"\n      }}>{`PHP`}</a>{` would throw a fatal error as your plugin does not accept `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`.`}</p>\n    <p>{`You are responsible for forwarding the arguments from the plugin to the `}<inlineCode parentName=\"p\">{`proceed`}</inlineCode>{` callable. If you are not using/modifying the arguments, you could use variadics and argument unpacking to achieve this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace My\\\\Module\\\\Plugin;\n\nuse My\\\\Module\\\\Model\\\\MyUtility;\n\nclass MyUtilityUpdater\n{\n    public function aroundSave(MyUtility $subject, callable $proceed, ...$args)\n    {\n        //do something\n        $proceed(...$args);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"prioritizing-plugins\"\n    }}>{`Prioritizing plugins`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`sortOrder`}</inlineCode>{` property from the `}<inlineCode parentName=\"p\">{`plugin`}</inlineCode>{` node declared in `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` determines the plugin's prioritization when more than one plugin is observing the same method.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Interception/PluginListInterface.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Framework\\\\Interception\\\\PluginListInterface`}</inlineCode></a>{` which is implemented by `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Interception/PluginList/PluginList.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Framework\\\\Interception\\\\PluginList\\\\PluginList`}</inlineCode></a>{` is responsible to define when to call the before, around, or after methods respecting this prioritization.`}</p>\n    <p>{`If two or more plugins have the same `}<inlineCode parentName=\"p\">{`sortOrder`}</inlineCode>{` value or do not specify it, the `}<a parentName=\"p\" {...{\n        \"href\": \"../build/component-load-order.md\"\n      }}>{`component load order`}</a>{` declared in the `}<inlineCode parentName=\"p\">{`sequence`}</inlineCode>{` node from `}<inlineCode parentName=\"p\">{`module.xml`}</inlineCode>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"../build/schema-validation.md\"\n      }}>{`area`}</a>{` will define the merge sequence. Check the component load order in `}<inlineCode parentName=\"p\">{`app/etc/config.php`}</inlineCode>{` file.`}</p>\n    <p>{`The applicationexecutes plugins using these rules during each plugin execution in two main flows:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Before the execution of the observed method, starting from lowest to highest `}<inlineCode parentName=\"p\">{`sortOrder`}</inlineCode>{`.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The applicationexecutes the current plugin’s `}<inlineCode parentName=\"li\">{`before`}</inlineCode>{` method.`}</li>\n          <li parentName=\"ul\">{`Then the current plugin's `}<inlineCode parentName=\"li\">{`around`}</inlineCode>{` method is called.`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`The first part of the plugin's `}<inlineCode parentName=\"li\">{`around`}</inlineCode>{` method is executed.`}</li>\n              <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`around`}</inlineCode>{` method executes the `}<inlineCode parentName=\"li\">{`callable`}</inlineCode>{`.`}\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\">{`If there is another plugin in the chain, all subsequent plugins are wrapped in an independent sequence loop and the execution starts another flow.`}</li>\n                  <li parentName=\"ul\">{`If the current plugin is the last in the chain, the observed method is executed.`}</li>\n                </ul>\n              </li>\n              <li parentName=\"ul\">{`The second part of the `}<inlineCode parentName=\"li\">{`around`}</inlineCode>{` method is executed.`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">{`The applicationmoves on to the next plugin.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Following the execution flow, starting from lowest to highest `}<inlineCode parentName=\"p\">{`sortOrder`}</inlineCode>{` in the current sequence plugins loop.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The current plugin's `}<inlineCode parentName=\"li\">{`after`}</inlineCode>{` method is executed.`}</li>\n          <li parentName=\"ul\">{`The applicationmoves on to the next plugin.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`As a result of these rules, the execution flow of an observed method is affected not only by the prioritization of the plugins, but also by their implemented methods.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`around`}</inlineCode>{` plugin's method affects the flow of all plugins that are executed after it.`}</p>\n    <InlineAlert variant=\"success\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`When the `}<inlineCode parentName=\"p\">{`before`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`around`}</inlineCode>{` plugin sequence is finished, the applicationcalls the first plugin `}<inlineCode parentName=\"p\">{`after`}</inlineCode>{` method in the sequence loop, and not the `}<inlineCode parentName=\"p\">{`after`}</inlineCode>{` method of the current plugin that was being executed by the `}<inlineCode parentName=\"p\">{`around`}</inlineCode>{` method.`}</p>\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <p>{`For example, the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file of your module attaches three plugins for the class `}<inlineCode parentName=\"p\">{`Action`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config>\n    <type name=\"Magento\\\\Framework\\\\App\\\\Action\\\\Action\">\n        <plugin name=\"vendor_module_plugina\" type=\"Vendor\\\\Module\\\\Plugin\\\\PluginA\" sortOrder=\"10\" />\n        <plugin name=\"vendor_module_pluginb\" type=\"Vendor\\\\Module\\\\Plugin\\\\PluginB\" sortOrder=\"20\" />\n        <plugin name=\"vendor_module_pluginc\" type=\"Vendor\\\\Module\\\\Plugin\\\\PluginC\" sortOrder=\"30\" />\n    </type>\n</config>\n`}</code></pre>\n    <p>{`The execution will have a different flow, depending on the methods implemented by these classes, as explained in the following scenarios.`}</p>\n    <h4 {...{\n      \"id\": \"scenario-a\"\n    }}>{`Scenario A`}</h4>\n    <p>{`With these methods:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PluginA`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PluginB`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PluginC`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`sortOrder`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`10`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`20`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`30`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`before`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`beforeDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`beforeDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`beforeDispatch()`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`around`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`after`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterDispatch()`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`The execution will be in this order:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginA::beforeDispatch()`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginB::beforeDispatch()`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginC::beforeDispatch()`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Action::dispatch()`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginA::afterDispatch()`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginB::afterDispatch()`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginC::afterDispatch()`}</inlineCode></p>\n      </li>\n    </ul>\n    <h4 {...{\n      \"id\": \"scenario-b-with-a-callable-around\"\n    }}>{`Scenario B (with a `}<inlineCode parentName=\"h4\">{`callable`}</inlineCode>{` around)`}</h4>\n    <p>{`With these methods:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PluginA`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PluginB`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PluginC`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`sortOrder`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`10`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`20`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`30`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`before`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`beforeDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`beforeDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`beforeDispatch()`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`around`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`aroundDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`after`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterDispatch()`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><inlineCode parentName=\"p\">{`PluginB`}</inlineCode>{`::`}<inlineCode parentName=\"p\">{`aroundDispatch()`}</inlineCode>{` defines the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Interception/Interceptor.php\"\n      }}>{`$next`}</a>{` argument with a `}<inlineCode parentName=\"p\">{`callable`}</inlineCode>{` type. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nuse Magento\\\\Framework\\\\App\\\\Action\\\\Action;\n\nclass PluginB\n{\n    public function aroundDispatch(Action $subject, callable $next, ...$args)\n    {\n        // The first half of code goes here\n        // ...\n\n        $result = $next(...$args);\n\n        // The second half of code goes here\n        // ...\n\n        return $result;\n    }\n}\n`}</code></pre>\n    <p>{`The execution will be in this order:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginA::beforeDispatch()`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginB::beforeDispatch()`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginB::aroundDispatch()`}</inlineCode>{` (the applicationcalls the first half before `}<inlineCode parentName=\"p\">{`callable`}</inlineCode>{`)`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginC::beforeDispatch()`}</inlineCode></p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Action::dispatch()`}</inlineCode></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginC::afterDispatch()`}</inlineCode></p>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginB::aroundDispatch()`}</inlineCode>{` (the applicationcalls the second half after `}<inlineCode parentName=\"p\">{`callable`}</inlineCode>{`)`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginA::afterDispatch()`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginB::afterDispatch()`}</inlineCode></p>\n      </li>\n    </ul>\n    <h4 {...{\n      \"id\": \"scenario-b-without-a-callable-around\"\n    }}>{`Scenario B (without a `}<inlineCode parentName=\"h4\">{`callable`}</inlineCode>{` around)`}</h4>\n    <p>{`Using these methods:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PluginA`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PluginB`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PluginC`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`sortOrder`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`10`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`20`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`30`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`before`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`beforeDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`beforeDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`beforeDispatch()`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`around`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`aroundDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`after`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterDispatch()`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><inlineCode parentName=\"p\">{`PluginB`}</inlineCode>{`::`}<inlineCode parentName=\"p\">{`aroundDispatch()`}</inlineCode>{` does not define the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Interception/Interceptor.php\"\n      }}>{`$next`}</a>{` argument with a `}<inlineCode parentName=\"p\">{`callable`}</inlineCode>{` type. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nuse Magento\\\\Framework\\\\App\\\\Action\\\\Action;\n\nclass PluginB\n{\n    public function aroundDispatch(Action $subject, $next, $result)\n    {\n        // My custom code\n        return $result;\n    }\n}\n`}</code></pre>\n    <p>{`The execution will be in this order:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginA::beforeDispatch()`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginB::beforeDispatch()`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`PluginB::aroundDispatch()`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginA::afterDispatch()`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginB::afterDispatch()`}</inlineCode></p>\n      </li>\n    </ul>\n    <p>{`Because the`}<inlineCode parentName=\"p\">{`callable`}</inlineCode>{` type for the `}<inlineCode parentName=\"p\">{`$next`}</inlineCode>{` agrument is absent, `}<inlineCode parentName=\"p\">{`Action::dispatch()`}</inlineCode>{` will be not called and `}<inlineCode parentName=\"p\">{`Plugin C`}</inlineCode>{` will be not triggered.`}</p>\n    <h4 {...{\n      \"id\": \"scenario-c\"\n    }}>{`Scenario C`}</h4>\n    <p>{`Assuming these methods:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PluginA`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PluginB`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PluginC`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`sortOrder`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`10`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`20`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`30`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`before`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`beforeDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`beforeDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`beforeDispatch()`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`around`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`aroundDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`aroundDispatch()`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`after`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterDispatch()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterDispatch()`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`The execution will be in this order:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginA::beforeDispatch()`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginA::aroundDispatch()`}</inlineCode>{` (the applicationcalls the first half until `}<inlineCode parentName=\"p\">{`callable`}</inlineCode>{`)`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginB::beforeDispatch()`}</inlineCode></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginC::beforeDispatch()`}</inlineCode></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginC::aroundDispatch()`}</inlineCode>{` (the applicationcalls the first half until `}<inlineCode parentName=\"p\">{`callable`}</inlineCode>{`)`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Action::dispatch()`}</inlineCode></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginC::aroundDispatch()`}</inlineCode>{` (the applicationcalls the second half after `}<inlineCode parentName=\"p\">{`callable`}</inlineCode>{`)`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginB::afterDispatch()`}</inlineCode></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginC::afterDispatch()`}</inlineCode></p>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginA::aroundDispatch()`}</inlineCode>{` (the applicationcalls the second half after `}<inlineCode parentName=\"p\">{`callable`}</inlineCode>{`)`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`PluginA::afterDispatch()`}</inlineCode></p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"configuration-inheritance\"\n    }}>{`Configuration inheritance`}</h2>\n    <p>{`Classes and interfaces that are implementations of, or inherit from, classes that have plugins will also inherit plugins from the parent class.`}</p>\n    <p>{`The applicationuses plugins defined in the global scope when the system is in a specific area (such as frontend or backend). You can extend or override these global plugin configurations with an area's `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file.`}</p>\n    <p>{`For example, the developer can disable a global plugin in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/backend\"\n      }}>{`backend`}</a>{` area by disabling it in the specific `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file for the backend area.`}</p>\n    <h3 {...{\n      \"id\": \"disabling-plugins\"\n    }}>{`Disabling plugins`}</h3>\n    <p>{`Plugins can be disabled in a `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file. To disable a plugin, set the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` parameter of the plugin declaration  to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<type name=\"Magento\\\\Checkout\\\\Block\\\\Checkout\\\\LayoutProcessor\">\n    <plugin name=\"ProcessPaymentConfiguration\" disabled=\"true\"/>\n</type>\n`}</code></pre>\n    <p>{`where `}<inlineCode parentName=\"p\">{`ProcessPaymentConfiguration`}</inlineCode>{` is the name of the plugin declared in the `}<inlineCode parentName=\"p\">{`vendor/magento/module-payment/etc/frontend/di.xml`}</inlineCode>{`.`}</p>\n    <p>{`Note that the same class can be called two ways: with the leading slash or without.`}</p>\n    <p><inlineCode parentName=\"p\">{`\\\\Magento\\\\Checkout\\\\Block\\\\Checkout\\\\LayoutProcessor`}</inlineCode></p>\n    <p>{`and`}</p>\n    <p><inlineCode parentName=\"p\">{`Magento\\\\Checkout\\\\Block\\\\Checkout\\\\LayoutProcessor`}</inlineCode></p>\n    <p>{`are both valid.`}</p>\n    <p>{`When disabling the plugin, make sure to use the same path format to call and disable the plugin.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}