{"version":3,"file":"component---src-pages-development-prepare-extension-repository-structure-md-bf750be052543b99dbc2.js","mappings":"mRAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,kCACH,mCACL,kBAAK,mGACL,oBACE,eAAIC,WAAW,MAAO,sBACtB,eAAIA,WAAW,MAAO,QAAM,eAAIA,WAAW,MAAO,kBAAuB,sDACzE,eAAIA,WAAW,MAAO,uCACtB,eAAIA,WAAW,MAAO,iCACtB,eAAIA,WAAW,MAAO,oDAExB,eACE,GAAM,qBACH,sBACL,kBAAK,uDAAqD,uBAAYA,WAAW,KAAM,sBAAmC,kBAC1H,mBAAG,eAAIA,WAAW,KAAM,aACxB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,0EAIP,mBAAG,eAAIA,WAAW,KAAM,YACxB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,6CAGP,eACE,GAAM,qCACH,sCACL,kBAAK,0KAAwK,eAAIA,WAAW,KAAM,sBAA2B,MAC7N,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,qGAMP,eACE,GAAM,sCACH,uCACL,kBAAK,2KACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,6GAMP,kBAAK,gEACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,0DAIP,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,gEAIP,eACE,GAAM,gCACH,iCACL,kBAAK,wDAAsD,uBAAYA,WAAW,KAAM,oBAAiC,wBAAsB,uBAAYA,WAAW,KAAM,eAA4B,4FACxM,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,oMAgBP,eACE,GAAM,eACH,gBACL,kBAAK,qCAAmC,uBAAYA,WAAW,KAAM,QAAqB,qDAC1F,kBAAK,uEAAqE,uBAAYA,WAAW,KAAM,YAAyB,gBAChI,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,2QAgBV,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/prepare/extension-repository-structure.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"extension-repository-structure\"\n    }}>{`Extension repository structure`}</h1>\n    <p>{`For module, theme, and language pack component repositories, we recommend five best practices:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Flatter hierarchy`}</li>\n      <li parentName=\"ul\">{`One `}<em parentName=\"li\">{`extension type`}</em>{` (module, theme, or language pack) per repository`}</li>\n      <li parentName=\"ul\">{`Multiple components per repository`}</li>\n      <li parentName=\"ul\">{`One component per repository`}</li>\n      <li parentName=\"ul\">{`One functional test suite per module component`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"flatter-hierarchy\"\n    }}>{`Flatter hierarchy`}</h2>\n    <p>{`Your repository structure should no longer include `}<inlineCode parentName=\"p\">{`app/code/<Vendor>/`}</inlineCode>{` directories.`}</p>\n    <p><em parentName=\"p\">{`Before:`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root\\\\>\n└── app/code/<Vendor>/\n    └── <Module1>\n`}</code></pre>\n    <p><em parentName=\"p\">{`After:`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root>/\n└── <Module1>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"one-extension-type-per-repository\"\n    }}>{`One extension type per repository`}</h2>\n    <p>{`You cannot mix extension types (modules, themes, and language packs) in the same extension repository. Each component type must have its own repository. For example, `}<em parentName=\"p\">{`you cannot do this`}</em>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`// This is not supported\n<extension_repo_root>\n├── <Module1>\n├── <theme1>\n└── <language1>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"multiple-components-per-repository\"\n    }}>{`Multiple components per repository`}</h2>\n    <p>{`If your extension is complex and requires several components, you can keep those components in the same repository to make the extension easy to package and maintain:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root>\n├── <Module1>\n├── <Module2>\n├── <Module1SampleData>\n└── <Module2SampleData>\n`}</code></pre>\n    <p>{`You can do the same for theme and language pack extensions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root>/\n├── <theme1>\n└── <theme2>\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root>/\n├── <language1>\n└── <language2>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"one-component-per-repository\"\n    }}>{`One component per repository`}</h2>\n    <p>{`If your extension requires only one component, your `}<inlineCode parentName=\"p\">{`<component_root>`}</inlineCode>{` directory and your `}<inlineCode parentName=\"p\">{`<repo_root>`}</inlineCode>{` directory will be the same to reduce unnecessary hierarchy in the directory structure:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<MyModule_repo_root>\n├── Api\n├── Block\n├── Controller\n├── Console\n├── etc\n├── Helper\n├── i18n\n├── Model\n├── Plugin\n├── Test\n├── view\n├── composer.json\n├── LICENSE.txt\n└── ...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"test-suites\"\n    }}>{`Test Suites`}</h2>\n    <p>{`Function tests can be added to a `}<inlineCode parentName=\"p\">{`Test`}</inlineCode>{` directory within each module of your extension.`}</p>\n    <p>{`Note: Currently, only Unit and MFTF tests can be run from within a `}<inlineCode parentName=\"p\">{`<Module>`}</inlineCode>{` directory.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root>\n├── <Module1>\n│   ├── ...\n│   ├── Test\n│   │   ├── Unit\n│   │   ├── Integration\n│   │   └── Mftf\n│   │       ├── TestSuite\n│   │       └── composer.json\n│   └── ...\n├── <Module2>\n├── <Module1SampleData>\n└── <Module2SampleData>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}