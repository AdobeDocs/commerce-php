{"version":3,"file":"component---src-pages-developer-components-message-queues-index-md-d4454f170302019999ab.js","mappings":"8QAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,kBADR,mBAGA,yUACA,8IAA+H,cAAGC,WAAW,IACzI,KAAQ,uCADmH,UAA/H,qHAEwI,cAAGA,WAAW,IAClJ,KAAQ,2BAD4H,YAFxI,2PAKA,sHAAuG,cAAGA,WAAW,IACjH,KAAQ,wCAD2F,WAAvG,6DAEiF,uBAAYA,WAAW,KAAvB,SAFjF,MAEwI,uBAAYA,WAAW,KAAvB,iBAFxI,UAE2M,uBAAYA,WAAW,KAAvB,wBAF3M,qLAGA,sHACA,eACE,GAAM,gDADR,iDAGA,2EAA4D,uBAAYA,WAAW,KAAvB,WAA5D,0BAAyI,uBAAYA,WAAW,KAAvB,wBACzI,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,6CAIL,gIAAiH,uBAAYA,WAAW,KAAvB,iBAAjH,6BAAuM,uBAAYA,WAAW,KAAvB,wBAAvM,yCAAgT,uBAAYA,WAAW,KAAvB,SAAhT,MAAuW,uBAAYA,WAAW,KAAvB,iBAAvW,UAA0a,uBAAYA,WAAW,KAAvB,wBAA1a,0BACA,eACE,GAAM,0BADR,2BAGA,iIACA,eACE,GAAM,YADR,aAGA,wEAAyD,cAAGA,WAAW,IACnE,KAAQ,uCACP,uBAAYA,WAAW,KAAvB,uBAFL,yBAEgG,uBAAYA,WAAW,KAAvB,6BAFhG,wFAE6P,uBAAYA,WAAW,KAAvB,oDAC7P,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,kFAKL,eACE,GAAM,iBADR,kBAGA,gCAAiB,uBAAYA,WAAW,KAAvB,wFAAjB,gCACA,qDACA,oBACE,eAAIA,WAAW,MAAf,iEAAqF,uBAAYA,WAAW,MAAvB,oFAArF,MACA,eAAIA,WAAW,MAAf,WAA+B,uBAAYA,WAAW,MAAvB,wBAA/B,uCAAuI,uBAAYA,WAAW,MAAvB,cAAvI,wKACA,eAAIA,WAAW,MAAf,uDAA2E,uBAAYA,WAAW,MAAvB,sEAA3E,MACA,eAAIA,WAAW,MAAf,oBAAwC,uBAAYA,WAAW,MAAvB,iFAAxC,gDAEF,eACE,GAAM,2CADR,4CAGA,mIACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,iyBAoCTJ,EAAWK,gBAAiB","sources":["webpack://commerce-php/./src/pages/developer/components/message-queues/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"message-queues\"\n    }}>{`Message queues`}</h1>\n    <p>{`Message queues provide an asynchronous communications mechanism in which the sender and the receiver of a message do not contact each other, nor do they need to communicate with the message queue at the same time. When a sender places a message onto a queue, it is stored until the recipient receives them.`}</p>\n    <p>{`In Adobe Commerce and Magento Open Source, the Message Queue Framework (MQF) is a fully-functional system that allows a `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/module\"\n      }}>{`module`}</a>{` to publish messages to queues. It also creates consumers to receive them asynchronously. The MQF primarily uses `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.rabbitmq.com\"\n      }}>{`RabbitMQ`}</a>{` as the messaging broker, which provides a scalable platform for sending and receiving messages. It also includes a mechanism for storing undelivered messages. RabbitMQ is based on the Advanced Message Queuing Protocol (AMQP) 0.9.1 specification.`}</p>\n    <p>{`A basic message queue system can also be set up without using RabbitMQ. In this system, a MySQL `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/adapter\"\n      }}>{`adapter`}</a>{` stores messages in the database. Three database tables (`}<inlineCode parentName=\"p\">{`queue`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`queue_message`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`queue_message_status`}</inlineCode>{`) manage the message queue workload. Cron jobs ensure the consumers are able to receive messages. This solution is not very scalable. RabbitMQ should be used whenever possible.`}</p>\n    <p>{`See `}{`[Configure message queues]`}{` for information about setting up the message queue system.`}</p>\n    <h2 {...{\n      \"id\": \"send-a-message-from-the-publisher-to-a-queue\"\n    }}>{`Send a message from the publisher to a queue`}</h2>\n    <p>{`The following code sends a message to the queue. The `}<inlineCode parentName=\"p\">{`publish`}</inlineCode>{` method is defined in `}<inlineCode parentName=\"p\">{`PublisherInterface`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$publisher->publish($topic, $message)\n`}</code></pre>\n    <p>{`In a MySQL adapter environment, a message that is published to multiple queues creates a single record in `}<inlineCode parentName=\"p\">{`queue_message`}</inlineCode>{` and multiple records in `}<inlineCode parentName=\"p\">{`queue_message_status`}</inlineCode>{`: one for each queue. (A join on the `}<inlineCode parentName=\"p\">{`queue`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`queue_message`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`queue_message_status`}</inlineCode>{` tables is required).`}</p>\n    <h2 {...{\n      \"id\": \"instantiate-a-consumer\"\n    }}>{`Instantiate a consumer`}</h2>\n    <p>{`The procedure for instantiating a consumer differs, depending on which message queue system is being used.`}</p>\n    <h3 {...{\n      \"id\": \"rabbitmq\"\n    }}>{`RabbitMQ`}</h3>\n    <p>{`This instantiates a consumer that is defined in a `}<a parentName=\"p\" {...{\n        \"href\": \"configuration.md#queue_consumerxml\"\n      }}><inlineCode parentName=\"a\">{`queue_consumer.xml`}</inlineCode></a>{` file. The consumer (`}<inlineCode parentName=\"p\">{`customer_created_listener`}</inlineCode>{`) listens to the queue and receives all new messages. For every message, it invokes `}<inlineCode parentName=\"p\">{`Magento\\\\Some\\\\Class::processMessage($message)`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$this->consumerFactory->get('customer_created_listener')\n    ->process();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mysql-adapter\"\n    }}>{`MySQL adapter`}</h3>\n    <p>{`Implement `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Framework\\\\MessageQueue\\\\ConsumerInterface::process($maxNumberOfMessages)`}</inlineCode>{` to instantiate a consumer.`}</p>\n    <p>{`Perform the following actions:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Define the queue name associated with current consumer using `}<inlineCode parentName=\"li\">{`\\\\Magento\\\\Framework\\\\MessageQueue\\\\ConsumerConfigurationInterface::getQueueName`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Select `}<inlineCode parentName=\"li\">{`$maxNumberOfMessages`}</inlineCode>{` message records, filtering on the `}<inlineCode parentName=\"li\">{`queue_name`}</inlineCode>{` field. You must join on all 3 tables. To accomplish this, you may want to extract fewer records at a time to improve load distribution between multiple consumers.`}</li>\n      <li parentName=\"ol\">{`Decode the message using topic name taken from the `}<inlineCode parentName=\"li\">{`\\\\Magento\\\\Framework\\\\MessageQueue\\\\ConsumerConfigurationInterface`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Invoke callback `}<inlineCode parentName=\"li\">{`Magento\\\\Framework\\\\MessageQueue\\\\ConsumerConfigurationInterface::getCallback`}</inlineCode>{` and pass the decoded data as an argument.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"change-message-queue-from-mysql-to-amqp\"\n    }}>{`Change message queue from MySQL to AMQP`}</h2>\n    <p>{`The following sample introduces a runtime configuration that allows you to redefine the adapter for a topic.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`'queue' => [\n    'topics' => [\n        'product_action_attribute.update' => [\n            'publisher' => 'amqp-magento'\n        ]\n    ],\n    'config' => [\n        'publishers' => [\n            'product_action_attribute.update' => [\n                'connections' => [\n                    'amqp' => [\n                        'name' => 'amqp',\n                        'exchange' => 'magento',\n                        'disabled' => false\n                    ],\n                    'db' => [\n                        'name' => 'db',\n                        'disabled' => true\n                    ]\n                ]\n            ]\n        ]\n    ],\n    'consumers' => [\n        'product_action_attribute.update' => [\n            'connection' => 'amqp',\n        ],\n    ],\n],\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}