"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[44036],{86110:function(e,a,t){t.r(a),t.d(a,{_frontmatter:function(){return m},default:function(){return u}});var n,o=t(87462),i=t(63366),r=(t(15007),t(64983)),d=t(91515),l=["components"],m={},s=(n="InlineAlert",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)}),p={_frontmatter:m},c=d.Z;function u(e){var a=e.components,t=(0,i.Z)(e,l);return(0,r.mdx)(c,(0,o.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"add-custom-validations-before-order-placement"},"Add custom validations before order placement"),(0,r.mdx)("p",null,"This topic describes how to add custom validations to be performed before the order is placed during checkout. Namely, the validations which are performed after a shopper clicks the ",(0,r.mdx)("strong",{parentName:"p"},"Place Order")," button. Writing the validation logic itself is not covered in this topic."),(0,r.mdx)("p",null,"To add custom validations before the order placement action, you must do the following:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("a",{parentName:"li",href:"#step-1-create-the-validator"},"Create the validator"),"."),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("a",{parentName:"li",href:"#step-2-add-validator-to-the-validators-pool"},"Add validator to the validators pool"),"."),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("a",{parentName:"li",href:"#step-3-declare-the-validation-in-the-checkout-layout"},"Declare the validation in the checkout layout"),".")),(0,r.mdx)("h2",{id:"step-1-create-the-validator"},"Step 1: Create the validator"),(0,r.mdx)("p",null,"For the sake of compatibility, upgradability and easy maintenance, do not edit the default application code, add your customizations in a separate module. For your checkout customization to be applied correctly, your custom module should ",(0,r.mdx)("a",{parentName:"p",href:"../../../development/build/composer-integration.md"},"depend")," on the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Magento_Checkout")," module. Do not use ",(0,r.mdx)("inlineCode",{parentName:"p"},"Ui")," for your custom module name, because ",(0,r.mdx)("inlineCode",{parentName:"p"},"%Vendor%_Ui")," notation, required when specifying paths, might cause issues."),(0,r.mdx)("p",null,"In your custom module directory, create a ",(0,r.mdx)("inlineCode",{parentName:"p"},".js")," file implementing the validator. It should be located under ",(0,r.mdx)("inlineCode",{parentName:"p"},"<your_module_dir>/view/frontend/web/js/model")," directory."),(0,r.mdx)("p",null,"Following is a sample of the validator ",(0,r.mdx)("inlineCode",{parentName:"p"},".js")," file. It must necessarily implement the ",(0,r.mdx)("inlineCode",{parentName:"p"},"validate()")," method:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"define(\n    ['mage/translate', 'Magento_Ui/js/model/messageList'],\n    function ($t, messageList) {\n        'use strict';\n        return {\n            validate: function () {\n                const isValid = false; //Put your validation logic here\n\n                if (!isValid) {\n                    messageList.addErrorMessage({ message: $t('a possible failure message ...  ') });\n                }\n\n                return isValid;\n            }\n        }\n    }\n);\n")),(0,r.mdx)("h2",{id:"step-2-add-validator-to-the-validators-pool"},"Step 2: Add validator to the validators pool"),(0,r.mdx)("p",null,'Your custom validator must be added to the pool of "additional validators". To do this, in the ',(0,r.mdx)("inlineCode",{parentName:"p"},"<your_module_dir>/view/frontend/web/js/view")," directory create a new ",(0,r.mdx)("inlineCode",{parentName:"p"},"<your-validation>.js")," file with the following content:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"define(\n    [\n        'uiComponent',\n        'Magento_Checkout/js/model/payment/additional-validators',\n        '<your_module>/js/model/your-validator'\n    ],\n    function (Component, additionalValidators, yourValidator) {\n        'use strict';\n        additionalValidators.registerValidator(yourValidator);\n        return Component.extend({});\n    }\n);\n")),(0,r.mdx)("h2",{id:"step-3-declare-the-validation-in-the-checkout-layout"},"Step 3: Declare the validation in the checkout layout"),(0,r.mdx)("p",null,"In your custom module directory, create a new ",(0,r.mdx)("inlineCode",{parentName:"p"},"<your_module_dir>/view/frontend/layout/checkout_index_index.xml")," file."),(0,r.mdx)("p",null,"In this file, add the following:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" layout="1column" xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">\n    <body>\n<referenceBlock name="checkout.root">\n    <arguments>\n        <argument name="jsLayout" xsi:type="array">\n            <item name="components" xsi:type="array">\n                <item name="checkout" xsi:type="array">\n                    <item name="children" xsi:type="array">\n                        <item name="steps" xsi:type="array">\n                            <item name="children" xsi:type="array">\n                                <item name="billing-step" xsi:type="array">\n                                    <item name="children" xsi:type="array">\n                                        <item name="payment" xsi:type="array">\n                                            <item name="children" xsi:type="array">\n                                                <item name="additional-payment-validators" xsi:type="array">\n                                                    <item name="children" xsi:type="array">\n                                                        \x3c!-- Declare your validation. START --\x3e\n                                                        <item name="your-validator" xsi:type="array">\n                                                            <item name="component" xsi:type="string">%your_module_dir%/js/view/%your-validation%</item>\n                                                        </item>\n                                                        \x3c!-- Declare your validation. END --\x3e\n                                                    </item>\n                                                </item>\n                                            </item>\n                                        </item>\n                                    </item>\n                                </item>\n                            </item>\n                        </item>\n                    </item>\n                </item>\n            </item>\n        </argument>\n    </arguments>\n</referenceBlock>\n    </body>\n</page>\n')),(0,r.mdx)("h2",{id:"step-4-deploy-static-content-and-clean-cache"},"Step 4: Deploy static content and clean cache"),(0,r.mdx)(s,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"These commands are for production mode. They are not necessary when in developer mode."),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Deploy static content:"),(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento setup:static-content:deploy\n"))),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Clean cache:"),(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento cache:clean\n")))))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-tutorials-frontend-custom-checkout-add-order-validation-md-42f5da81cb4a2734464f.js.map