{"version":3,"file":"component---src-pages-development-payments-integrations-base-integration-formblocktype-md-fcbb70ee09d8bf1e57b0.js","mappings":"yRASaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,SAAC,UAAD,CAAMA,QAAQ,UACd,eACE,GAAM,4CADR,6CAGA,6IACA,mBAAG,uBAAYC,WAAW,KAAvB,iBAAH,sCAAkG,cAAGA,WAAW,IAC5G,KAAQ,2BADsF,2CAAlG,MAGA,wIACiC,uBAAYA,WAAW,KAAvB,uCADjC,wEACwL,uBAAYA,WAAW,KAAvB,mBADxL,qCAEA,eACE,GAAM,2EADR,6EAGA,yFAA0E,uBAAYA,WAAW,KAAvB,qCAA1E,cAAqK,uBAAYA,WAAW,KAAvB,iBAArK,+EACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,0yCA4CL,eACE,GAAM,YADR,aAGA,mHAAoG,cAAGA,WAAW,IAC9G,KAAQ,gHADwF,YAApG,iBAGA,uEAAwD,uBAAYA,WAAW,KAAvB,gCAAxD,MACA,iFAAkE,cAAGA,WAAW,IAC5E,KAAQ,iHACP,uBAAYA,WAAW,KAAvB,oEAFL,YAEgI,cAAGA,WAAW,IAC1I,KAAQ,8HADoH,+CAFhI,MAKA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,2lBAgBR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/base-integration/formblocktype.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/pages/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"payment-info-rendering-in-admin-checkout\"\n    }}>{`Payment info rendering in Admin checkout`}</h1>\n    <p>{`The payment information form rendering in Admin order creation is defined by the block class, its template and layout.`}</p>\n    <p><inlineCode parentName=\"p\">{`formBlockType`}</inlineCode>{` is one of the arguments you must `}<a parentName=\"p\" {...{\n        \"href\": \"facade-configuration.md\"\n      }}>{`configure for the payment method facade`}</a>{`.`}</p>\n    <p>{`This block is used to display payment form on billing form in Admin panel. In\nmost cases it is enough to use the `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Payment\\\\Block\\\\Form\\\\Cc`}</inlineCode>{`. All payments details are displayed according to specified keys in `}<inlineCode parentName=\"p\">{`paymentInfoKeys`}</inlineCode>{` option in module configuration.`}</p>\n    <h2 {...{\n      \"id\": \"example-of-custom-formblocktype-braintree-payment-method-implementation\"\n    }}>{`Example of custom formBlockType: Braintree payment method implementation`}</h2>\n    <p>{`In the integration with the Braintree payment provider, we use the `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Braintree\\\\Block\\\\Form`}</inlineCode>{` class as `}<inlineCode parentName=\"p\">{`formBlockType`}</inlineCode>{`. It allows displaying only card types available for configured countries:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class Form extends Cc\n{\n    /**\n     * Get list of available card types of order billing address country\n     * @return array\n     */\n    public function getCcAvailableTypes()\n    {\n        $configuredCardTypes = $this->getConfiguredCardTypes();\n        $countryId = $this->sessionQuote->getQuote()->getBillingAddress()->getCountryId();\n        return $this->filterCardTypesForCountry($configuredCardTypes, $countryId);\n    }\n\n    /**\n     * Get card types available for Braintree\n     * @return array\n     */\n    private function getConfiguredCardTypes()\n    {\n        $types = $this->ccType->getCcTypeLabelMap();\n        $configCardTypes = array_fill_keys($this->gatewayConfig->getAvailableCardTypes(), '');\n\n        return array_intersect_key($types, $configCardTypes);\n    }\n\n    /**\n     * Filter card types for specific country\n     * @param array $configCardTypes\n     * @param string $countryId\n     * @return array\n     */\n    private function filterCardTypesForCountry(array $configCardTypes, $countryId)\n    {\n        $filtered = $configCardTypes;\n        $countryCardTypes = $this->gatewayConfig->getCountryAvailableCardTypes($countryId);\n        // filter card types only if specific card types are set for country\n        ...\n\n        return $filtered;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"template\"\n    }}>{`Template`}</h2>\n    <p>{`For creating a template for the payment information rendering class, you can use the default `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/view/adminhtml/templates/form/cc.phtml\"\n      }}>{`cc.phtml`}</a>{` as example.`}</p>\n    <p>{`Then add the template to the billing form layout `}<inlineCode parentName=\"p\">{`sales_order_create_index.xml`}</inlineCode>{`.`}</p>\n    <p>{`The following example adds the Braintree-specific template `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/view/adminhtml/templates/form/cc.phtml\"\n      }}><inlineCode parentName=\"a\">{`app/code/Magento/Payment/view/adminhtml/templates/form/cc.phtml`}</inlineCode></a>{` to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/view/adminhtml/layout/sales_order_create_index.xml\"\n      }}>{`billing form layout in the Braintree module`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <body>\n        <referenceBlock name=\"order_create_billing_form\">\n            <action method=\"setMethodFormTemplate\">\n                <!-- your method code and template -->\n                <argument name=\"method\" xsi:type=\"string\">braintree</argument>\n                <argument name=\"template\" xsi:type=\"string\">Magento_Braintree::form/cc.phtml</argument>\n            </action>\n        </referenceBlock>\n    </body>\n</page>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}