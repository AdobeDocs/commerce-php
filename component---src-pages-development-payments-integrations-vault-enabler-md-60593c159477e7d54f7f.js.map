{"version":3,"file":"component---src-pages-development-payments-integrations-vault-enabler-md-60593c159477e7d54f7f.js","mappings":"yRASaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,SAAC,UAAD,CAAMA,QAAQ,UACd,eACE,GAAM,gBADR,iBAGA,gHACA,gLACA,6DACA,oBACE,eAAIC,WAAW,OACb,cAAGA,WAAW,MAAd,qCAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,qDAAwE,uBAAYA,WAAW,KAAvB,mBAAxE,+BAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,uCAGJ,iFACA,eACE,GAAM,+BADR,gCAGA,qJACA,+BAAgB,cAAGA,WAAW,IAC1B,KAAQ,wHADI,kEAAhB,OAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,2gCAwBL,eACE,GAAM,mCADR,oCAGA,oHAAqG,uBAAYA,WAAW,KAAvB,mBAArG,uCACA,yEAA0D,uBAAYA,WAAW,KAAvB,+CAA1D,2DAA4M,uBAAYA,WAAW,KAAvB,uBAA5M,mBAA8R,uBAAYA,WAAW,KAAvB,mBAA9R,uCAAgY,cAAGA,WAAW,IAC1Y,KAAQ,yGACP,uBAAYA,WAAW,KAAvB,oDAFL,eAGA,+BAAgB,cAAGA,WAAW,IAC1B,KAAQ,wIADI,wCAGhB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,g8CA4DL,eACE,GAAM,4BADR,6BAGA,6JAA8I,cAAGA,WAAW,IACxJ,KAAQ,yCADkI,mBAA9I,MAGA,0HACA,iFAAkE,uBAAYA,WAAW,KAAvB,yBAAlE,6BACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,mnBA4BL,sIACyB,uBAAYA,WAAW,KAAvB,UADzB,MAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,+WAaR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/vault/enabler.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/pages/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"enable-vault\"\n    }}>{`Enable vault`}</h1>\n    <p>{`Store customers must have the ability to enable and disable credit cards details storing.`}</p>\n    <p>{`Adobe Commerce out-of-the-box provides mechanisms for adding this ability, but you still need to add modifications in your payment method implementation.`}</p>\n    <p>{`These modifications are the following:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Adding vault enabling controls.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Modifying the payment component (updating of the `}<inlineCode parentName=\"p\">{`additional_data`}</inlineCode>{` property must be added).`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Creating a request data builder.`}</p>\n      </li>\n    </ol>\n    <p>{`The following paragraphs describe these points in details.`}</p>\n    <h2 {...{\n      \"id\": \"add-vault-enabling-controls\"\n    }}>{`Add vault enabling controls`}</h2>\n    <p>{`Add the vault enabling controls to the payment form. In the following example, a checkbox bound to the Vault enabler is added.`}</p>\n    <p>{`Example (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/view/frontend/web/template/payment/form.html\"\n      }}>{`Magento/Braintree/view/frontend/web/template/payment/form.html`}</a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<form id=\"co-transparent-form-braintree\" class=\"form\" data-bind=\"\" method=\"post\" action=\"#\" novalidate=\"novalidate\">\n    <fieldset data-bind=\"attr: {class: 'fieldset payment items ccard' + getCode(), id: 'payment_form_' + getCode()}\">\n        <legend class=\"legend\">\n            <span><!-- ko i18n: 'Credit Card Information'--><!-- /ko --></span>\n        </legend>\n        ...\n        <!-- ko if: (isVaultEnabled())-->\n        <div class=\"field choice\">\n            <input type=\"checkbox\"\n                name=\"vault[is_enabled]\"\n                class=\"checkbox\"\n                data-bind=\"attr: {'id': getCode() + '_enable_vault'}, checked: vaultEnabler.isActivePaymentTokenEnabler\"/>\n            <label class=\"label\" data-bind=\"attr: {'for': getCode() + '_enable_vault'}\">\n                <span><!-- ko i18n: 'Save for later use.'--><!-- /ko --></span>\n            </label>\n        </div>\n        <!-- /ko -->\n        ...\n    </fieldset>\n    ...\n</form>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"modifying-the-payment-component\"\n    }}>{`Modifying the payment component`}</h2>\n    <p>{`The payment component must process the state of the vault-enabling control and update payment `}<inlineCode parentName=\"p\">{`additional_data`}</inlineCode>{` before it is sent to the backend.`}</p>\n    <p>{`Commerce has a default vault enabler UI component (`}<inlineCode parentName=\"p\">{`Magento_Vault/js/view/payment/vault-enabler`}</inlineCode>{`). In the payment component, you just need to call its `}<inlineCode parentName=\"p\">{`visitAdditionalData`}</inlineCode>{` to update the `}<inlineCode parentName=\"p\">{`additional_data`}</inlineCode>{` property. The rest is done by the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Observer/VaultEnableAssigner.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Vault\\\\Observer\\\\VaultEnableAssigner`}</inlineCode></a>{` observer.`}</p>\n    <p>{`Example: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/view/frontend/web/js/view/payment/method-renderer/cc-form.js\"\n      }}>{`the Braintree payment UI component`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`define([\n    ...\n    'Magento_Payment/js/view/payment/cc-form',\n    'Magento_Vault/js/view/payment/vault-enabler'\n], function (... Component, VaultEnabler) {\n    'use strict';\n\n    return Component.extend({\n\n        /**\n         * @returns {exports.initialize}\n         */\n        initialize: function () {\n            var self = this;\n\n            self._super();\n            this.vaultEnabler = new VaultEnabler();\n            this.vaultEnabler.setPaymentCode(this.getVaultCode());\n            ...\n            return self;\n        },\n\n        /**\n         * @returns {Object}\n         */\n        getData: function () {\n            var data = {\n                'method': this.getCode(),\n                'additional_data': {\n                    'payment_method_nonce': this.paymentPayload.nonce\n                }\n            };\n\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\n            this.vaultEnabler.visitAdditionalData(data);\n\n            return data;\n        },\n\n        /**\n         * @returns {Boolean}\n         */\n        isVaultEnabled: function () {\n            return this.vaultEnabler.isVaultEnabled();\n        },\n\n\n        /**\n         * Returns vault code.\n         *\n         * @returns {String}\n         */\n        getVaultCode: function () {\n            return window.checkoutConfig.payment[this.getCode()].ccVaultCode;\n        },\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"add-request-data-builder\"\n    }}>{`Add request data builder`}</h2>\n    <p>{`Now when we have information about enabling or disabling vault, the payment must send it to the payment processor. This is done in the `}<a parentName=\"p\" {...{\n        \"href\": \"../payment-gateway/request-builder.md\"\n      }}>{`request builder`}</a>{`.`}</p>\n    <p>{`You can create a new request builder, or update the existing request builder of the payment method.`}</p>\n    <p>{`In the Braintree request builder, to pass the data, we set `}<inlineCode parentName=\"p\">{`storeInVaultOnSuccess`}</inlineCode>{` in transaction request:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class VaultDataBuilder implements BuilderInterface\n{\n    /**\n     * Additional options in request to gateway\n     */\n    const OPTIONS = 'options';\n\n    /**\n     * The option that determines whether the payment method associated with\n     * the successful transaction should be stored in the Vault.\n     */\n    const STORE_IN_VAULT_ON_SUCCESS = 'storeInVaultOnSuccess';\n\n    /**\n     * @inheritdoc\n     */\n    public function build(array $buildSubject)\n    {\n        return [\n            self::OPTIONS => [\n                self::STORE_IN_VAULT_ON_SUCCESS => true\n            ]\n        ];\n    }\n}\n`}</code></pre>\n    <p>{`The builder must be added to the payment authorize request in the DI configuration.\nExample from the Braintree `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeAuthorizeRequest\" type=\"Magento\\\\Payment\\\\Gateway\\\\Request\\\\BuilderComposite\">\n    <arguments>\n        <argument name=\"builders\" xsi:type=\"array\">\n            ...\n            <item name=\"vault\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\VaultDataBuilder</item>\n        </argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}