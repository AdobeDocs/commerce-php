{"version":3,"file":"component---src-pages-development-security-file-uploads-md-d0ae9747e99e08c92454.js","mappings":"qRAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,gBACH,iBACL,kBAAK,iWACL,eACE,GAAM,6BACH,+BACL,kBAAK,mJACgB,uBAAYC,WAAW,KAAM,QAAqB,wjBAKvE,SAACX,EAAD,CAAaY,QAAQ,UAAUC,MAAM,OAAOH,QAAQ,iBACpD,kBAAK,8HAEL,eACE,GAAM,+BACH,gCACL,kBAAK,8QAGL,oBACE,eAAIC,WAAW,MAAO,4HACtB,eAAIA,WAAW,MAAO,yEACtB,eAAIA,WAAW,MAAO,gEAA8D,uBAAYA,WAAW,MAAO,QAAqB,MACvI,eAAIA,WAAW,MAAO,mFACtB,eAAIA,WAAW,MAAO,iHAExB,kBAAK,QAAM,uBAAYA,WAAW,KAAM,kCAA+C,8HACvC,uBAAYA,WAAW,KAAM,QAAqB,4CAClG,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,67CAoCP,eACE,GAAM,oCACH,qCACL,kBAAK,0NAEL,eACE,GAAM,mCACH,oCACL,kBAAK,oLAEL,oBACE,eAAIA,WAAW,MAAO,iEACtB,eAAIA,WAAW,MAAO,6EACtB,eAAIA,WAAW,MAAO,0CACtB,eAAIA,WAAW,MAAO,4EACtB,eAAIA,WAAW,MAAO,oDACtB,eAAIA,WAAW,MAAO,oHAExB,kBAAK,WACL,oBACE,eAAIA,WAAW,MAAO,6BAA2B,uBAAYA,WAAW,MAAO,6DAA0E,iCACzJ,eAAIA,WAAW,MAAO,oDAAkD,uBAAYA,WAAW,MAAO,iBAA8B,SAAO,uBAAYA,WAAW,MAAO,kBAA+B,kDACxM,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,8CAA2D,uDAE/G,kBAAK,4DACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,i7EA2DV,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/security/file-uploads.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"file-uploads\"\n    }}>{`File uploads`}</h1>\n    <p>{`When working with files, especially user-uploaded files, it is easy to make a mistake and open your store to dangerous attacks like path traversal and remote code execution (RCE). The Adobe Commerce and Magento Open Source framework provides abstraction to help you safely work with user files, but it's your responsibility to use it the right way.`}</p>\n    <h2 {...{\n      \"id\": \"when-you-dont-need-a-file\"\n    }}>{`When you don't need a file`}</h2>\n    <p>{`There are cases when users can upload files for their own convenience. For example, consider functionality that allows\na customer to upload a `}<inlineCode parentName=\"p\">{`.csv`}</inlineCode>{` file with a list of SKUs and quantities to add products to their cart. You don't need to\nstore the file, you only need the contents of the file to add those SKUs to a cart. One option is to read the uploaded file, add\nSKUs, and delete it without ever moving it from the  temporary folder on the file system. Another, even better option for security and\nperformance, is to never upload the file in the first place. The file can be handled on the frontend side using JavaScript\nto extract SKUs and quantities and send those to a web API endpoint on the server.`}</p>\n    <InlineAlert variant=\"success\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The best way to avoid security issues with files is to not upload or store them in the first place\nif you don't have to.`}</p>\n    <h2 {...{\n      \"id\": \"files-inaccessible-by-users\"\n    }}>{`Files inaccessible by users`}</h2>\n    <p>{`Some files, generated or uploaded, need to be stored on the server for further processing or querying, but should not be directly\naccessible through a URL. Below are measures to avoid potential unauthorized access, path traversal, or RCE problems\nfrom such files:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Use random file names and extensions (it's better to use no file extensions); do not trust file names provided by users`}</li>\n      <li parentName=\"ul\">{`Store files in a directory specifically for generated/uploaded files`}</li>\n      <li parentName=\"ul\">{`Do not store these files in an HTTP accessible folder (like `}<inlineCode parentName=\"li\">{`/pub`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`Store file records in a database if the files need to be assigned to an entity`}</li>\n      <li parentName=\"ul\">{`Do not trust user provided file names/IDs when deleting files; validate file ownership through the database`}</li>\n    </ul>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\Filesystem`}</inlineCode>{` class can help you find the right folder to store the files. Usually,\ngenerated or inaccessible files are stored in the `}<inlineCode parentName=\"p\">{`/var`}</inlineCode>{` directory. See the following examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class MyClass {\n    private \\\\Magento\\\\Framework\\\\Filesystem $filesystem;\n\n    private \\\\Magento\\\\Framework\\\\Filesystem\\\\Directory\\\\WriteFactory $writeFactory;\n\n    private \\\\Magento\\\\Framework\\\\Math\\\\Random $rand;\n\n    public function __construct(\n        \\\\Magento\\\\Framework\\\\Filesystem $filesystem,\n        \\\\Magento\\\\Framework\\\\Filesystem\\\\Directory\\\\WriteFactory $writeFactory,\n        \\\\Magento\\\\Framework\\\\Math\\\\Random $rand\n    ) {\n        $this->filesystem = $filesystem;\n        $this->writeFactory = $writeFactory;\n        $this->rand = $rand;\n    }\n\n    ...\n\n    public function workWithFiles(): void {\n        ...\n\n        //To read \"MAGENTO_ROOT/var\" sub-directories or files.\n        $varDir = $this->filesystem->getDirectoryRead(\\\\Magento\\\\Framework\\\\App\\\\Filesystem\\\\DirectoryList::VAR_DIR);\n        //Going to write files into a designated folder specific to these type of files and functionality\n        //Getting WriteInterface instance of \\`MAGENTO_ROOT/var/my-modules-dir\\`\n        $thisModulesFilesDir = $this->writeFactory->create($varDir->getAbsolutePath('my-modules-dir'));\n\n        //Random file name\n        $randomFileName = $this->rand->getRandomString(32);\n        //Copying a file from the system temporary directory into it's new path\n        $thisModulesFilesDir->getDriver()\n            ->copy($tmpUploadedOrGeneratedFilePath, $thisModulesFilesDir->getAbsolutePath($randomFileName));\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"files-that-require-authorization\"\n    }}>{`Files that require authorization`}</h2>\n    <p>{`You should treat files that require authorization to download the same way as inaccessible files;\nwith a controller that performs authorization and then serves the file by outputting its content in response body.`}</p>\n    <h2 {...{\n      \"id\": \"publicly-accessible-media-files\"\n    }}>{`Publicly accessible media files`}</h2>\n    <p>{`Publicly accessible media files present higher risk and require special care because you must keep the user-provided path\nand file extension. You should verify the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Media files can only be placed in a publicly accessible path`}</li>\n      <li parentName=\"ul\">{`Uploaded file path is inside the designated folder or its subdirectories`}</li>\n      <li parentName=\"ul\">{`Extension is safe (use an allow-list)`}</li>\n      <li parentName=\"ul\">{`File path is out of system folders that contain other application files`}</li>\n      <li parentName=\"ul\">{`Prevent deleting system files in public folders`}</li>\n      <li parentName=\"ul\">{`Ideally, verify user's relation to file (ownership), or containing directory before updating or deleting files`}</li>\n    </ul>\n    <p>{`Notes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The application uses the `}<inlineCode parentName=\"li\">{`\\\\Magento\\\\Framework\\\\App\\\\Filesystem\\\\DirectoryList::PUB`}</inlineCode>{` directory for public files.`}</li>\n      <li parentName=\"ul\">{`Uploaded file paths must be validated using the `}<inlineCode parentName=\"li\">{`ReadInterface`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`WriteInterface`}</inlineCode>{` instances, similar to the preceding example.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\\\\Magento\\\\Framework\\\\Filesystem\\\\Io\\\\File`}</inlineCode>{` can help extract file extensions from filenames.`}</li>\n    </ul>\n    <p>{`Example of an imaginary class dealing with media files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class MyFileUploader {\n    private const UPLOAD_DIR = 'my-module/customer-jpegs';\n\n    private \\\\Magento\\\\Framework\\\\Filesystem\\\\Io\\\\File $fileUtil;\n\n    private array $allowedExt = ['jpg', 'jpeg'];\n\n    private \\\\Magento\\\\Framework\\\\Filesystem\\\\Directory\\\\WriteFactory $writeFactory;\n\n    private \\\\Magento\\\\Framework\\\\Filesystem $filesystem;\n\n    /**\n      * @param string $customerId UserContextInterface::getUserId() - current customer\n      * @param array $uploadedFileData uploaded file data from $_FILES\n      * @return MediaFile\n      * @throws \\\\Magento\\\\Framework\\\\Exception\\\\ValidatorException\n      */\n    public function upload(string $customerId, array $uploadedFileData): MediaFile\n    {\n        //Get upload file's metadata\n        $info = $this->fileUtil->getPathInfo($uploadedFileData['name']);\n        //Validate extension is allowed\n        if (!in_array($info['extension'], $this->allowedExt, true)) {\n            throw new ValidationException('Only JPEG files allowed');\n        }\n\n        //Initiate WriteInterface instance of the target directory\n        //Target dir is a sub-dir of PUB\n        $uploadDir = $this->writeFactory->create(\n            $this->filesystem->getDirectoryRead(\\\\Magento\\\\Framework\\\\App\\\\Filesystem\\\\DirectoryList::PUB)\n                ->getAbsolutePath(self::UPLOAD_DIR)\n        );\n        //Get target path if uploaded to the dir\n        $realPath  =$uploadDir->getDriver()->getRealPathSafety($uploadDir->getAbsolutePath($uploadedFileData['name']));\n\n        //Validate that the target file name is not a system file\n        $this->validateNotSystemFile($realPath);\n        //Validate that target folder (UPLOAD_DIR + ['name'] - ['basename']) is not a system folder\n        $this->validateNotSystemFolder(preg_replace('/\\\\/[^\\\\/]+$/', '', $realPath));\n        //Validate that given file doesn't exist or is own by current customer\n        $existingMediaFileInfo = $this->findFileByRelativePath($realPath);\n        if ($existingMediaFileInfo && $existingMediaFileInfo->getCustomerId() !== $customerId) {\n            throw new ValidationException('Access denied');\n        }\n\n        //Copy temp file to target path\n        $uploadDir->getDriver()->copy(\n            $uploadedFileData['tmp_name'],\n            $realPath\n        );\n\n        //Persist file info\n        $mediaFile = new MediaFile($customerId, $realPath);\n        return $this->persist($mediaFile);\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}