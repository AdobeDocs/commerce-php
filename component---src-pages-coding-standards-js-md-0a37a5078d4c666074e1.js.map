{"version":3,"file":"component---src-pages-coding-standards-js-md-0a37a5078d4c666074e1.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/coding-standards/js.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"javascript-coding-standard\"\n    }}>{`JavaScript coding standard`}</h1>\n    <p>{`Use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento-coding-standard/blob/develop/eslint/.eslintrc-magento\"\n      }}>{`ESLint rules`}</a>{` to make sure your code adheres to the coding standards.\nDevelopers writing JavaScript and jQuery code for Adobe Commerce and Magento Open Source must adhere to these guidelines and follow the standards listed in this document.`}</p>\n    <p>{`Use `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.ietf.org/rfc/rfc2119.txt\"\n      }}>{`RFC 2119`}</a>{` to interpret the \"must,\" \"must not,\" \"required,\" \"shall,\" \"shall not,\" \"should,\" \"should not,\" \"recommended,\" \"may,\" and \"optional\" keywords.`}</p>\n    <p>{`Adobe Commerce and Magento Open Source uses the `}<a parentName=\"p\" {...{\n        \"href\": \"https://jquery.com/\"\n      }}>{`jQuery library`}</a>{` including standard and custom `}<a parentName=\"p\" {...{\n        \"href\": \"http://api.jqueryui.com/category/widgets\"\n      }}>{`jQuery widgets`}</a>{`.`}</p>\n    <p>{`For the jQuery widget coding standard, see `}<a parentName=\"p\" {...{\n        \"href\": \"jquery-widgets.md\"\n      }}>{`jQuery widget coding standard`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"eslint-code-analysis\"\n    }}>{`Eslint code analysis`}</h2>\n    <p>{`Use `}<a parentName=\"p\" {...{\n        \"href\": \"http://eslint.org/\"\n      }}>{`ESLint`}</a>{` to ensure the quality of your JavaScript code.`}</p>\n    <p>{`ESLint is a community-driven tool that detects errors and potential problems in JavaScript code.\nIt can use custom rules to enforce specific coding standards.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/magento/magento-coding-standard/blob/develop/eslint/.eslintrc-magento\"\n        }}>{`ESLint rules`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"additional-formatting-standards\"\n    }}>{`Additional formatting standards`}</h2>\n    <h3 {...{\n      \"id\": \"anonymous-function-calls\"\n    }}>{`Anonymous function calls`}</h3>\n    <p>{`When you declare an anonymous function as an argument in a function call, indent the body of the function by `}<em parentName=\"p\">{`four`}</em>{` spaces from the left edge of the statement or function keyword to increase readability.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`myObject.myFunction(param1, function (a,b) {\n    //Function logic\n    return a > b;\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"end-of-file\"\n    }}>{`End of file`}</h3>\n    <p>{`The last line in a file must end with a single linefeed(LF) character(i.e. an empty line).`}</p>\n    <p>{`This reduces the quantity of the changed lines in a diff and makes code safer in file concatenation processes.`}</p>\n    <h3 {...{\n      \"id\": \"indentation\"\n    }}>{`Indentation`}</h3>\n    <p>{`Indentation in code uses four spaces.`}</p>\n    <p>{`Tabs are not allowed as indentation.`}</p>\n    <h4 {...{\n      \"id\": \"wrapped-lines\"\n    }}>{`Wrapped lines`}</h4>\n    <p>{`Indent wrapped lines two spaces or left-aligned to the expression above.`}</p>\n    <h3 {...{\n      \"id\": \"max-line-length\"\n    }}>{`Max line length`}</h3>\n    <p>{`The recommended max line length is 80 characters.`}</p>\n    <p>{`Source code lines must not exceed 120 characters.`}</p>\n    <p>{`Comment lines that contain an example command or a literal URL longer than 120 characters may exceed the 120 character limit for ease of cutting and pasting.`}</p>\n    <p>{`Do not be concerned about header guards that exceed 120 characters.`}</p>\n    <h3 {...{\n      \"id\": \"line-termination\"\n    }}>{`Line termination`}</h3>\n    <p>{`Line termination follows the UNIX text file convention.`}</p>\n    <p>{`Lines must end with a single linefeed(LF) character represented as ordinal 10 or hexadecimal (`}<inlineCode parentName=\"p\">{`0x0A`}</inlineCode>{`).`}</p>\n    <p><em parentName=\"p\">{`Do not`}</em>{` use carriage the Mac OS convention of carriage returns(CR or `}<inlineCode parentName=\"p\">{`0x0D`}</inlineCode>{`) or the carriage return-linefeed combination(CRLF or `}<inlineCode parentName=\"p\">{`0x0D`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`0x0A`}</inlineCode>{`) standard for Windows OS.`}</p>\n    <h3 {...{\n      \"id\": \"multi-line-string-literals\"\n    }}>{`Multi-line string literals`}</h3>\n    <p>{`Use string concatenation for multi-line string literals:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var myString = 'JavaScript was originally developed in Netscape, by Brendan Eich. ' +\n    'Battling with Microsoft over the Internet, Netscape considered their client-server solution ' +\n    'as a distributed OS, running a portable version of Sun Microsystem&#8217;s Java. ' +\n    'Because Java was a competitor of C++ and aimed at professional programmers, ' +\n    'Netscape also wanted a lightweight interpreted language that would complement Java ' +\n    'by appealing to nonprofessional programmers, like Microsoft&#8217;s VB.[9] (see JavaScript and Java)';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"parentheses\"\n    }}>{`Parentheses`}</h3>\n    <p>{`Use sparingly and in general where required by the syntax and semantics.`}</p>\n    <p>{`Never use parentheses for:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Unary operators (e.g. `}<inlineCode parentName=\"li\">{`delete`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`typeof`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`void`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`After keywords such as `}<inlineCode parentName=\"li\">{`return`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`throw`}</inlineCode></li>\n      <li parentName=\"ul\">{`For `}<inlineCode parentName=\"li\">{`case`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`in`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`new`}</inlineCode>{`, and others keywords like them`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"blocks\"\n    }}>{`Blocks`}</h3>\n    <p>{`Use braces with all multiline blocks. May only omit braces if entire block can be written in one line and improves readability.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Wrong\nif (true)\n    blah();\n\nfunction () { return false; }\n\n// Correct\nif (true) return;\n\nif (true) {\n    return;\n}\n\nif (true) {\n    blah();\n}\n\nfunction () {\n    return false;\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"semicolons\"\n    }}>{`Semicolons`}</h3>\n    <p>{`Always put semicolons as statement terminators.`}</p>\n    <p>{`The following code examples show the dangers of missing semicolons:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Example 1: JavaScript Error\nMyClass.prototype.myMethod = function() {\n    return 42;\n}  // <-- Missing semicolon\n\n(function() {\n    // Some initialization code wrapped in a function to create a scope for locals.\n})();\n`}</code></pre>\n    <p>{`Since there is semicolon to end the first statement, the first function returns 42 and the script interprets 42 as a function.\nWhen the script tries to call 42 as a function with the second function as a parameter, an error occurs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Example 2: Trying to do one thing on Internet Explorer and another on Firefox.\nvar x = {\n    'i': 1,\n    'j': 2\n }  // <-- Missing semicolon\n\n[normalVersion, ffVersion][isIE]();\n`}</code></pre>\n    <p>{`A 'no such property in undefined' error appears during runtime when the script tries to call `}<inlineCode parentName=\"p\">{`x[ffVersion][isIE]()`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n// Example 3: Conditional execution a la bash\nvar THINGS_TO_EAT = [apples, oysters, sprayOnCheese]  // <-- Missing semicolon\n\n-1 == resultOfOperation() || die();\n\n`}</code></pre>\n    <p>{`The script calls `}<inlineCode parentName=\"p\">{`die`}</inlineCode>{` unless `}<inlineCode parentName=\"p\">{`resultOfOperation)_`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`NaN`}</inlineCode>{` and assigns `}<inlineCode parentName=\"p\">{`THING_TO_EAT`}</inlineCode>{` the result of `}<inlineCode parentName=\"p\">{`die()`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"explanation\"\n    }}>{`Explanation`}</h4>\n    <p>{`JavaScript requires statements to end with a semicolon, except when it thinks it can safely infer their existence.`}</p>\n    <p>{`In each of the examples above, a function declaration, or an object, or an array literal is used inside a statement.`}</p>\n    <p>{`The closing brackets are not enough to indicate the end of the statement.\nJavaScript never ends a statement if the next token is an infix or bracket operator.`}</p>\n    <h3 {...{\n      \"id\": \"strings\"\n    }}>{`Strings`}</h3>\n    <p>{`Use single quotes instead of double quotes for consistency.`}</p>\n    <p>{`This is helpful when creating strings that include HTML:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var msg = '<span class=\"text\">Hello World!</div>';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"additional-naming-convention-standards\"\n    }}>{`Additional naming convention standards`}</h2>\n    <h3 {...{\n      \"id\": \"general-naming-conventions\"\n    }}>{`General naming conventions`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Avoid underscores and numbers in names.`}</li>\n      <li parentName=\"ul\">{`Variables or methods should have names that accurately describe their purpose or behavior.`}</li>\n      <li parentName=\"ul\">{`Object methods or variables that are declared `}<inlineCode parentName=\"li\">{`private`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`protected`}</inlineCode>{` should start with an underscore(`}<inlineCode parentName=\"li\">{`_`}</inlineCode>{`).`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"functions-and-methods\"\n    }}>{`Functions and methods`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Class method names should start with an English verb in its infinitive form that describes the method.`}</li>\n      <li parentName=\"ul\">{`Names for accessors for instance or static variables should always have the `}<inlineCode parentName=\"li\">{`get`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`set`}</inlineCode>{` prefix.`}</li>\n      <li parentName=\"ul\">{`In design pattern classes, implementation method names should contain the pattern name where practical to provide better behavior description.`}</li>\n      <li parentName=\"ul\">{`Methods that return status flags or Boolean values should have the `}<inlineCode parentName=\"li\">{`has`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`is`}</inlineCode>{` prefix.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"variables-and-properties\"\n    }}>{`Variables and properties`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Do not use short variable names such as `}<inlineCode parentName=\"li\">{`i`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` except in small loop contexts`}</li>\n      <li parentName=\"ul\">{`If a loop contains more than 20 lines of code, the index variables should have more descriptive names.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"additional-coding-construct-standards\"\n    }}>{`Additional coding construct standards`}</h2>\n    <h3 {...{\n      \"id\": \"binary-and-ternary-operators\"\n    }}>{`Binary and ternary operators`}</h3>\n    <p>{`Always put the operator on the preceding line to avoid implicit semi-colon insertion issues.`}</p>\n    <h3 {...{\n      \"id\": \"custom-tostring-method\"\n    }}>{`Custom `}<inlineCode parentName=\"h3\">{`toString()`}</inlineCode>{` method`}</h3>\n    <p>{`This method must always succeed without side effects.`}</p>\n    <h3 {...{\n      \"id\": \"function-declarations-within-blocks\"\n    }}>{`Function declarations within blocks`}</h3>\n    <p>{`Use a variable initialized with a function expression to define a function within a block.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Wrong\nif (x) {\n    function foo() {}\n}\n\n// Correct\nif (x) {\n    var foo = function() {}\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"exceptions-and-custom-exceptions\"\n    }}>{`Exceptions and custom exceptions`}</h3>\n    <p>{`You cannot avoid exceptions if you are doing something non-trivial (using an application development framework, and so on).`}</p>\n    <p>{`Without custom exceptions, returning error information from a function that also returns a value can be tricky, not to mention inelegant.\nBad solutions include passing in a reference type to hold error information or always returning Objects with a potential error member.`}</p>\n    <p>{`These basically amount to a primitive exception handling hack.\nFeel free to use custom exceptions when appropriate.`}</p>\n    <h3 {...{\n      \"id\": \"standard-features\"\n    }}>{`Standard features`}</h3>\n    <p>{`For maximum portability and compatibility, use standard features whenever possible.`}</p>\n    <p>{`For example, `}<inlineCode parentName=\"p\">{`string.charAt(3)`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`string[3]`}</inlineCode>{`, and element access with DOM functions instead of using an application-specific shorthand.`}</p>\n    <h3 {...{\n      \"id\": \"method-definitions\"\n    }}>{`Method definitions`}</h3>\n    <p>{`There are several ways to attach methods and properties to a constructor, but the preferred style is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`Foo.prototype.bar = function() {\n    // ...\n};\n`}</code></pre>\n    <p>{`Do not use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`Foo.prototype = {\n    bar: function() {\n        // ...\n    },\n    circle: function() {\n        // ...\n    }\n};\n\n`}</code></pre>\n    <p>{`Assignment operations to constructor prototypes creating temporal coupling and sometimes other unwanted side effects.`}</p>\n    <h3 {...{\n      \"id\": \"closures\"\n    }}>{`Closures`}</h3>\n    <p>{`A closure keeps a pointer to its enclosing scope, so attaching a closure to a DOM element can create a circular reference and thus, a memory leak.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Wrong\nfunction foo(element, a, b) {\n    element.onclick = function() {\n      // uses a and b\n    };\n}\n`}</code></pre>\n    <p>{`The function closure keeps references to elements \"a\" and \"b\" even if it never uses them.`}</p>\n    <p>{`Because elements also keep references to the closure, it is a cycle that will not be cleaned up by garbage collection.\nIn these situations, the code can be structured as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Correct\nfunction foo(element, a, b) {\n    element.onclick = bar(a, b);\n}\n\nfunction bar(a, b) {\n    return function() {\n      // uses a and b\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"additional-general-standards\"\n    }}>{`Additional general standards`}</h2>\n    <h3 {...{\n      \"id\": \"array-and-object-initializers\"\n    }}>{`Array and object initializers`}</h3>\n    <p>{`Single-line array and object initializers are allowed when they fit on a line as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`    var arr = [1, 2, 3];  // No space after [ or before ].\n    var obj = {a: 1, b: 2, c: 3};  // No space after { or before }.\n`}</code></pre>\n    <p>{`Long identifiers or values present problems for aligned initialization lists, so always prefer non-aligned initialization.`}</p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`Object.prototype = {\n    a: 0,\n    b: 1,\n    lengthyName: 2\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"associative-arrays\"\n    }}>{`Associative arrays`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`Object`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`Array`}</inlineCode>{` for associative arrays.`}</p>\n    <h3 {...{\n      \"id\": \"deferred-initialization\"\n    }}>{`Deferred initialization`}</h3>\n    <p>{`Use deferred initialization when it is not possible to initialize variables at the point of declaration.`}</p>\n    <h3 {...{\n      \"id\": \"explicit-scope\"\n    }}>{`Explicit scope`}</h3>\n    <p>{`Use explicit scope to increase code portability and clarity.`}</p>\n    <h3 {...{\n      \"id\": \"built-in-objects\"\n    }}>{`Built-in objects`}</h3>\n    <p>{`Modifying built-in like `}<inlineCode parentName=\"p\">{`Object.prototype`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Array.prototype`}</inlineCode>{` is strictly forbidden.`}</p>\n    <p>{`Modifying other built-ins like `}<inlineCode parentName=\"p\">{`Function.prototype`}</inlineCode>{` is less dangerous but leads to debugging issue in production.`}</p>\n    <h3 {...{\n      \"id\": \"variable-declarations\"\n    }}>{`Variable declarations`}</h3>\n    <p>{`Declare a variable with `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{` wherever possible to avoid overwriting existing global values.`}</p>\n    <p>{`Using only one var per scope promotes readability.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var foo = 'bar',\n    num = 1,\n    arr = [1, 2, 3];\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-rules\"\n    }}>{`Custom rules`}</h2>\n    <p>{`There is a set of custom Eslint rules to ensure code compatibility with the latest versions of third-party libraries.`}</p>\n    <p>{`These custom rules are included using the `}<inlineCode parentName=\"p\">{`rulePaths`}</inlineCode>{` setting in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/dev/tools/grunt/configs/eslint.json\"\n      }}>{`Eslint Grunt configuration`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}