{"version":3,"file":"component---src-pages-development-payments-integrations-payment-gateway-error-code-mapper-md-7f3e548b1a8df4631e0e.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/payment-gateway/error-code-mapper.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"error-code-mapping\"\n    }}>{`Error Code Mapping`}</h1>\n    <p>{`A payment gateway has error codes or messages that need to be transformed to user-friendly messages. When an error occurs, Adobe Commerce delivers the message to the appropriate audience so that the customer or merchant can resolve any problems. You can set up each payment integration to map the native error codes and messages into sets of text strings. As a result, you can ensure that only the proper audience (merchants only, customers only, or all) sees each error message. By default, the standard error message (`}<inlineCode parentName=\"p\">{`An error occurred on the server. Please try to place the order again.`}</inlineCode>{`) displays if a payment operation fails and a specific mapped message cannot be found.`}</p>\n    <p>{`Commerce provides the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/ErrorMapper/ErrorMessageMapperInterface.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Payment\\\\Gateway\\\\ErrorMapper\\\\ErrorMessageMapperInterface`}</inlineCode></a>{` interface and default mapper implementation at `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/ErrorMapper/ErrorMessageMapper.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Payment\\\\Gateway\\\\ErrorMapper\\\\ErrorMessageMapper`}</inlineCode></a>{` to enable customizations.`}</p>\n    <p>{`This topic uses examples based on the Commerce Braintree payment integration to illustrate how to enable error code mapping.`}</p>\n    <h2 {...{\n      \"id\": \"implement-mapping-files\"\n    }}>{`Implement mapping files`}</h2>\n    <p>{`In most cases, you must define one or more mapping files and configure the default implementation of `}<inlineCode parentName=\"p\">{`ErrorMessageMapperInterface`}</inlineCode>{` using the module's `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file. Alternatively, you can implement a programmatic solution described in `}<a parentName=\"p\" {...{\n        \"href\": \"#retrieve-error-codes-from-the-response-validator\"\n      }}>{`Retrieve error codes from the response validator`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"map-the-messages\"\n    }}>{`Map the messages`}</h3>\n    <p>{`The first step is to create one or more XML files that map message codes to messages. We recommend naming these files `}<inlineCode parentName=\"p\">{`<gateway_name>_error_mapping.xml`}</inlineCode>{`, but you can use any name you like. If you create more than one mapping file, each file must have the same file name. Use the following table to determine where to place mapping files:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Audience`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`location`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All users`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`<module>/etc`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Merchants`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`<module>/adminhtml`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Customers`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`<module>/frontend`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`The files placed in the `}<inlineCode parentName=\"p\">{`adminhtml`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`frontend`}</inlineCode>{` directories ensure that customers and store administrators see only audience-specific messages. For example, a customer should see error messages when a credit card fails verification due to mis-entered data and similar reasons. The store's administrator should have more detailed descriptions of why an attempt to create an invoice or refund failed.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/etc/braintree_error_mapping.xml\"\n      }}>{`braintree_error_mapping.xml`}</a>{` file provides an example collection:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<mapping xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Payment:etc/error_mapping.xsd\">\n    <message_list>\n        <message code=\"81703\" translate=\"true\">Credit card type is not accepted by this merchant account.</message>\n        <message code=\"81706\" translate=\"true\">CVV is required.</message>\n        <message code=\"81707\" translate=\"true\">CVV must be 4 digits for American Express and 3 digits for other card types.</message>\n        ...\n    </message_list>\n</mapping>\n`}</code></pre>\n    <p>{`The message definitions are based on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/etc/error_mapping.xsd\"\n      }}>{`error_mapping.xsd`}</a>{` schema. Messages must comply with the following structure:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`message_list`}</inlineCode>{` --- the root node. It can contain a list of specific messages`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`message`}</inlineCode>{` --- the node, which contains the customized message and two attributes`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`code`}</inlineCode>{` --- the error code returned from the payment gateway. The value can be numeric or string`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`translate`}</inlineCode>{` --- a boolean attribute that determines whether to collect all message translations`}</p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"configure-dependency-injection\"\n    }}>{`Configure dependency injection`}</h3>\n    <p>{`After you map the messages, you must specify the location of the error mapping file or files for the config reader. To do this, create a `}<inlineCode parentName=\"p\">{`virtualType`}</inlineCode>{` definition for `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Payment\\\\Gateway\\\\ErrorMapper\\\\VirtualConfigReader`}</inlineCode>{` in the module's `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"Magento\\\\Braintree\\\\Gateway\\\\ErrorMapper\\\\VirtualConfigReader\" type=\"Magento\\\\Payment\\\\Gateway\\\\ErrorMapper\\\\VirtualConfigReader\">\n    <arguments>\n        <argument name=\"fileName\" xsi:type=\"string\">braintree_error_mapping.xml</argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`Also, specify a config instance for the data reader. You can also provide your own `}<inlineCode parentName=\"p\">{`cacheId`}</inlineCode>{`, which allows you to store all parsed messages in a cache.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"Magento\\\\Braintree\\\\Gateway\\\\ErrorMapper\\\\VirtualMappingData\" type=\"Magento\\\\Payment\\\\Gateway\\\\ErrorMapper\\\\MappingData\">\n    <arguments>\n        <argument name=\"reader\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\ErrorMapper\\\\VirtualConfigReader</argument>\n        <argument name=\"cacheId\" xsi:type=\"string\">braintree_error_mapper</argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`Then customize the default `}<inlineCode parentName=\"p\">{`ErrorMessageMapper`}</inlineCode>{` via virtual type and specify the data reader:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"Magento\\\\Braintree\\\\Gateway\\\\ErrorMapper\\\\VirtualErrorMessageMapper\" type=\"Magento\\\\Payment\\\\Gateway\\\\ErrorMapper\\\\ErrorMessageMapper\">\n    <arguments>\n        <argument name=\"messageMapping\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\ErrorMapper\\\\VirtualMappingData</argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`Because Braintree integration uses the default `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Command/GatewayCommand.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Payment\\\\Gateway\\\\Command\\\\GatewayCommand`}</inlineCode></a>{`,\ninject the created mapper pool to the required `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-php/gateway-command.md\"\n      }}>{`gateway command`}</a>{` as an argument:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeAuthorizeCommand\" type=\"Magento\\\\Payment\\\\Gateway\\\\Command\\\\GatewayCommand\">\n    <arguments>\n        ...\n        <argument name=\"errorMessageMapper\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\ErrorMapper\\\\VirtualErrorMessageMapper</argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Magento\\\\Payment\\\\Gateway\\\\Command\\\\GatewayCommand`}</inlineCode>{` allows you to retrieve multiple error messages, but if your integration\ndoes not use this feature, you can inject `}<inlineCode parentName=\"p\">{`ErrorMessageMapperInterface`}</inlineCode>{` to it as an argument. Then implement your own logic to the mapper error codes.`}</p>\n    <p>{`The payment integration should now retrieve error codes from the payment gateway response.`}</p>\n    <h2 {...{\n      \"id\": \"retrieve-error-codes-from-the-response-validator\"\n    }}>{`Retrieve error codes from the response validator`}</h2>\n    <p>{`You can retrieve errors codes using a `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-php/response-validator.md\"\n      }}>{`response validator`}</a>{`.\nA response validator verifies response codes from the payment gateway.\nIt has different responsibilities and should not map messages, because it works on the lower layer of communication between Commerce and the payment gateway.\nIt is the responsibility of a gateway command to call an appropriate service.`}</p>\n    <p>{`For example, Commerce provides a response validator for Braintree: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/Gateway/Validator/GeneralResponseValidator.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Braintree\\\\Gateway\\\\Validator\\\\GeneralResponseValidator`}</inlineCode></a>{`.\nIts implementation allows to retrieve errors codes from a response.`}</p>\n    <p>{`First, create a new code provider. It can be a simple class with a public method that should return a list of error codes by the provided response:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class ErrorCodeProvider\n{\n    /**\n     * Retrieves list of error codes from Braintree response.\n     *\n     * @param Successful|Error $response\n     * @return array\n     */\n    public function getErrorCodes($response): array\n    {\n        $result = [];\n        if (!$response instanceof Error) {\n            return $result;\n        }\n\n        /** @var ErrorCollection $collection */\n        $collection = $response->errors;\n\n        /** @var Validation $error */\n        foreach ($collection->deepAll() as $error) {\n            $result[] = $error->code;\n        }\n\n        return $result;\n    }\n}\n`}</code></pre>\n    <p>{`Then add the created provider as a dependency to the `}<inlineCode parentName=\"p\">{`GeneralResponseValidator`}</inlineCode>{` class:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class GeneralResponseValidator extends AbstractValidator\n{\n    public function __construct(\n        ResultInterfaceFactory $resultFactory,\n        SubjectReader $subjectReader,\n        ErrorCodeProvider $errorCodeProvider\n    ) {\n        parent::__construct($resultFactory);\n        $this->subjectReader = $subjectReader;\n        $this->errorCodeProvider = $errorCodeProvider;\n    }\n\n    public function validate(array $validationSubject)\n    {\n        /** @var Successful|Error $response */\n        $response = $this->subjectReader->readResponseObject($validationSubject);\n\n        $isValid = true;\n        $errorMessages = [];\n\n        foreach ($this->getResponseValidators() as $validator) {\n            $validationResult = $validator($response);\n\n            if (!$validationResult[0]) {\n                $isValid = $validationResult[0];\n                $errorMessages = array_merge($errorMessages, $validationResult[1]);\n            }\n        }\n        $errorCodes = $this->errorCodeProvider->getErrorCodes($response);\n\n        return $this->createResult($isValid, $errorMessages, $errorCodes);\n    }\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`GeneralResponseValidator`}</inlineCode>{` returns an implementation of `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Validator/ResultInterface.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Payment\\\\Gateway\\\\Validator\\\\ResultInterface`}</inlineCode></a>{`\nand the `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Payment\\\\Gateway\\\\Command\\\\GatewayCommand`}</inlineCode>{` uses method `}<inlineCode parentName=\"p\">{`ResultInterface::getErrorCodes()`}</inlineCode>{` method to map error codes to user-friendly messages.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}