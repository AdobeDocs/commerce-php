{"version":3,"file":"component---src-pages-development-payments-integrations-payment-gateway-request-builder-md-fc4e00d34c32e7a22daa.js","mappings":"+RASaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,SAAC,IAAD,CAAMA,QAAQ,UACd,eACE,GAAM,mBACH,oBACL,kBAAK,gRACL,eACE,GAAM,mBACH,oBACL,kBAAK,iDAA+C,cAAGC,WAAW,IAC9D,KAAQ,+GACP,uBAAYA,WAAW,KAAM,2DAA2E,MAC7G,eACE,GAAM,qBACH,sBACL,mBAAG,uBAAYA,WAAW,KAAM,0DAAuE,kCAAgC,uBAAYA,WAAW,KAAM,0DAAuE,iIAA+H,uBAAYA,WAAW,KAAM,+BAA4C,+HACnb,mBAAG,uBAAYA,WAAW,KAAM,oBAAiC,oBAAkB,cAAGA,WAAW,IAC7F,KAAQ,uFACL,4BAAgC,MACvC,kBAAK,iDAA+C,uBAAYA,WAAW,KAAM,6BAA0C,iGAA+F,uBAAYA,WAAW,KAAM,oBAAiC,MACxR,eACE,GAAM,8BACH,+BACL,kBAAK,uCAAqC,cAAGA,WAAW,IACpD,KAAQ,4CACL,wBAA4B,QAAM,uBAAYA,WAAW,KAAM,UAAuB,8FAC7F,kBAAK,6EAA2E,cAAGA,WAAW,IAC1F,KAAQ,uFACP,uBAAYA,WAAW,KAAM,0CAA0D,OAC5F,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,miEA+BV,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/payment-gateway/request-builder.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"request-builder\"\n    }}>{`Request Builder`}</h1>\n    <p>{`Request Builder is a component of the Adobe Commerce payment gateway responsible for building a request from several parts. It allows implementing complex, yet atomic and testable, building strategies. Each builder can have simple logic or contain builder composites.`}</p>\n    <h2 {...{\n      \"id\": \"basic-interface\"\n    }}>{`Basic interface`}</h2>\n    <p>{`The basic interface for a request builder is `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Request/BuilderInterface.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Payment\\\\Gateway\\\\Request\\\\BuilderInterface`}</inlineCode></a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"builder-composite\"\n    }}>{`Builder composite`}</h2>\n    <p><inlineCode parentName=\"p\">{`\\\\Magento\\\\Payment\\\\Gateway\\\\Request\\\\BuilderComposite`}</inlineCode>{` is a container for a list of `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Payment\\\\Gateway\\\\Request\\\\BuilderInterface`}</inlineCode>{` implementations. It gets a list of classes, or types, or virtual type names, and performs a lazy instantiation on an actual `}<inlineCode parentName=\"p\">{`BuilderComposite::build([])`}</inlineCode>{` call. So that you can have as many objects, as required, but only those, which are needed for a request are instantiated.`}</p>\n    <p><inlineCode parentName=\"p\">{`BuilderComposite`}</inlineCode>{` implements the `}<a parentName=\"p\" {...{\n        \"href\": \"https://designpatternsphp.readthedocs.io/en/latest/Structural/Composite/README.html\"\n      }}>{`composite design pattern`}</a>{`.`}</p>\n    <p>{`The concatenation strategy is defined in the `}<inlineCode parentName=\"p\">{`BuilderComposite::merge()`}</inlineCode>{` method. So if you need to alter the strategy, you need to add your custom implementation of `}<inlineCode parentName=\"p\">{`BuilderComposite`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"adding-a-builder-composite\"\n    }}>{`Adding a builder composite`}</h2>\n    <p>{`Builder composites are added using `}<a parentName=\"p\" {...{\n        \"href\": \"../../components/dependency-injection.md\"\n      }}>{`dependency injection`}</a>{` in `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`. A builder composite might comprise simple builders as well as other builder composites.`}</p>\n    <p>{`Example of adding composite builders for the Braintree payment provider (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/etc/di.xml\"\n      }}><inlineCode parentName=\"a\">{`app/code/Magento/Braintree/etc/di.xml`}</inlineCode></a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`...\n<!-- is a builder composite comprising a number of builders -->\n<virtualType name=\"BraintreeAuthorizeRequest\" type=\"Magento\\\\Payment\\\\Gateway\\\\Request\\\\BuilderComposite\">\n    <arguments>\n        <argument name=\"builders\" xsi:type=\"array\">\n            <item name=\"customer\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\CustomerDataBuilder</item>\n            <item name=\"payment\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\PaymentDataBuilder</item>\n            <item name=\"channel\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\ChannelDataBuilder</item>\n            <item name=\"address\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\AddressDataBuilder</item>\n            <item name=\"vault\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\VaultDataBuilder</item>\n            <item name=\"3dsecure\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\ThreeDSecureDataBuilder</item>\n            <item name=\"device_data\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\KountPaymentDataBuilder</item>\n            <item name=\"dynamic_descriptor\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\DescriptorDataBuilder</item>\n            <item name=\"store\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\StoreConfigBuilder</item>\n            <item name=\"merchant_account\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\MerchantAccountDataBuilder</item>\n        </argument>\n    </arguments>\n</virtualType>\n...\n<!-- The same BraintreeAuthorizeRequest builder composite is a part of the BraintreeSaleRequest builder composite -->\n<virtualType name=\"BraintreeSaleRequest\" type=\"Magento\\\\Payment\\\\Gateway\\\\Request\\\\BuilderComposite\">\n    <arguments>\n        <argument name=\"builders\" xsi:type=\"array\">\n            <item name=\"authorize\" xsi:type=\"string\">BraintreeAuthorizeRequest</item>\n            <item name=\"settlement\" xsi:type=\"string\">Magento\\\\Braintree\\\\Gateway\\\\Request\\\\SettlementDataBuilder</item>\n        </argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}