{"version":3,"file":"component---src-pages-architecture-layers-service-md-71920549022704a84e86.js","mappings":"+QAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,iBADR,kBAGA,qKACwB,eAAIC,WAAW,KAAf,qBADxB,8BACmG,cAAGA,WAAW,IAC7G,KAAQ,oCADuF,OADnG,iBAIA,qDACA,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,sEAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,kFAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,iDAAoE,cAAGA,WAAW,IAC9E,KAAQ,oCADwD,OAApE,yKAIF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,4DAGJ,eACE,GAAM,kCADR,oCAGA,wFAAyE,cAAGA,WAAW,IACnF,KAAQ,2CAD6D,cAAzE,2KAIA,oIACe,cAAGA,WAAW,IACzB,KAAQ,oCADG,OADf,yNAKA,mBAAG,cAAGA,WAAW,IACb,KAAQ,iDADT,oBAAH,sBAGA,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,mEAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,4CAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,8CAGJ,eACE,GAAM,4BADR,6BAGA,gDAAiC,cAAGA,WAAW,IAC3C,KAAQ,uCADqB,UAAjC,yDAE4E,uBAAYA,WAAW,KAAvB,QAF5E,gBAGA,+CACA,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,8BAAiD,uBAAYA,WAAW,KAAvB,QAAjD,KAAsG,cAAGA,WAAW,IAChH,KAAQ,0CAD0F,aAAtG,oBAE0C,cAAGA,WAAW,IACpD,KAAQ,6EAD8B,eAF1C,QAMF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,aAAgC,eAAIA,WAAW,KAAf,UAAhC,wBAA0F,uBAAYA,WAAW,KAAvB,YAA1F,gBAA8J,cAAGA,WAAW,IACxK,KAAQ,kFADkJ,oBAA9J,2FAIA,cAAGA,WAAW,MAAd,wCAA2D,uBAAYA,WAAW,KAAvB,SAA3D,SAAqH,uBAAYA,WAAW,KAAvB,SAArH,yEAGJ,+FACA,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,2BAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,2BAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,cAAGA,WAAW,IAC7B,KAAQ,yCADO,YAAnB,kBAKJ,6GACA,eACE,GAAM,mCADR,oCAGA,wEAAyD,cAAGA,WAAW,IACnE,KAAQ,0CAD6C,aAAzD,4FAGA,6CAA8B,eAAIA,WAAW,KAAf,sBAA9B,kCAAgH,cAAGA,WAAW,IAC1H,KAAQ,qDADoG,wBAAhH,yBAE0D,uBAAYA,WAAW,KAAvB,UAF1D,YAGA,0BAAW,uBAAYA,WAAW,KAAvB,UAAX,6DAA0H,uBAAYA,WAAW,KAAvB,uDAA1H,MACA,yMAMJJ,EAAWK,gBAAiB","sources":["webpack://commerce-php/./src/pages/architecture/layers/service.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"service-layer\"\n    }}>{`Service layer`}</h1>\n    <p>{`The service layer provides a bridge between the presentation layer and the domain layer and resource-specific data.\nThis is implemented using `}<em parentName=\"p\">{`service contracts`}</em>{`, which are defined using `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/php\"\n      }}>{`PHP`}</a>{` interfaces.`}</p>\n    <p>{`In general, the service layer:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Resides below the presentation layer and above the domain layer.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Contains service contracts, which define how the implementation will behave.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Provides an easy way to access the REST/SOAP `}<a parentName=\"p\" {...{\n            \"href\": \"https://glossary.magento.com/api\"\n          }}>{`API`}</a>{` framework code (which also resides above the service contracts). You can bind service contracts to web service APIs in configuration files --- no coding required.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Provides a stable API for other modules to call into.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"who-accesses-the-service-layer\"\n    }}>{`Who accesses the service layer?`}</h2>\n    <p>{`All calls from web service interfaces, or users working with your `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/storefront\"\n      }}>{`storefront`}</a>{` (that is, controller-initiated requests), are typically routed through the service layer.\nWe strongly encourage the use of service contracts to call business logic.`}</p>\n    <p>{`External applications can make requests for business logic with simple SOAP and REST calls.\nWith some simple `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/xml\"\n      }}>{`XML`}</a>{` or JSON, you can expose the service layer's PHP API and make it accessible to REST or SOAP web services.\nOnce implemented, a web service can make a single API call and return an information-rich data structure.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/service-contract\"\n      }}>{`Service contract`}</a>{` clients include:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Controllers (initiated by actions of users of the storefront)`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Web services (SOAP and REST API calls)`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Other modules through service contracts`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"service-contract-anatomy\"\n    }}>{`Service contract anatomy`}</h2>\n    <p>{`The service contract of a `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/module\"\n      }}>{`module`}</a>{` is defined by the set of interfaces in the module's `}<inlineCode parentName=\"p\">{`/Api`}</inlineCode>{` directory.`}</p>\n    <p>{`This directory contains:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Service interfaces in the `}<inlineCode parentName=\"p\">{`/Api`}</inlineCode>{` `}<a parentName=\"p\" {...{\n            \"href\": \"https://glossary.magento.com/namespace\"\n          }}>{`namespace`}</a>{` of the module (`}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/Api\"\n          }}>{`Catalog API`}</a>{`).`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Data (or `}<em parentName=\"p\">{`entity`}</em>{`) interfaces in the `}<inlineCode parentName=\"p\">{`Api/Data`}</inlineCode>{` directory (`}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/Api/Data\"\n          }}>{`Catalog API/Data`}</a>{`).\nData entities* are data structures passed to and returned from service interfaces.`}</p>\n        <p parentName=\"li\">{`Files in the data directory contain `}<inlineCode parentName=\"p\">{`get()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`set()`}</inlineCode>{` methods for entries in the entity table and extension attributes.`}</p>\n      </li>\n    </ul>\n    <p>{`Typically, service contracts provide three distinct types of interfaces:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Repository interfaces`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Management interfaces`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://glossary.magento.com/metadata\"\n          }}>{`Metadata`}</a>{` interfaces`}</p>\n      </li>\n    </ul>\n    <p>{`However, there is no requirement that service contracts conform to all three patterns.`}</p>\n    <h2 {...{\n      \"id\": \"advantages-of-service-contracts\"\n    }}>{`Advantages of service contracts`}</h2>\n    <p>{`Service contracts allow you to add a new customer `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/extension\"\n      }}>{`extension`}</a>{` that adds or changes business logic-level resource models without breaking the system.`}</p>\n    <p>{`This is done using the `}<em parentName=\"p\">{`<`}{`preference`}{`>`}</em>{` element in a custom module's `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/dependency-injection\"\n      }}>{`dependency injection`}</a>{` configuration file (`}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`) file.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file specifies which PHP class to use for the interface `}<inlineCode parentName=\"p\">{`Magento\\\\Customer\\\\Api\\\\CustomerRepositoryInterface`}</inlineCode>{`.`}</p>\n    <p>{`Another module can change this interface file by specifying a different class name.\nHowever, if the client code uses the interface definition only, no class change is necessary.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}