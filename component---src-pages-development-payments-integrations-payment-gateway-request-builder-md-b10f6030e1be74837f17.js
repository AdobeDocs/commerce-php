"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[81918],{1242:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return d},default:function(){return l}});var n=a(87462),i=a(63366),r=(a(15007),a(64983)),m=a(91515),o=a(1930),s=["components"],d={},u={_frontmatter:d},p=m.Z;function l(e){var t=e.components,a=(0,i.Z)(e,s);return(0,r.mdx)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)(o.default,{mdxType:"Docs"}),(0,r.mdx)("h1",{id:"request-builder"},"Request Builder"),(0,r.mdx)("p",null,"Request Builder is a component of the Adobe Commerce payment gateway responsible for building a request from several parts. It allows implementing complex, yet atomic and testable, building strategies. Each builder can have simple logic or contain builder composites."),(0,r.mdx)("h2",{id:"basic-interface"},"Basic interface"),(0,r.mdx)("p",null,"The basic interface for a request builder is ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Request/BuilderInterface.php"},(0,r.mdx)("inlineCode",{parentName:"a"},"\\Magento\\Payment\\Gateway\\Request\\BuilderInterface")),"."),(0,r.mdx)("h2",{id:"builder-composite"},"Builder composite"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Payment\\Gateway\\Request\\BuilderComposite")," is a container for a list of ",(0,r.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Payment\\Gateway\\Request\\BuilderInterface")," implementations. It gets a list of classes, or types, or virtual type names, and performs a lazy instantiation on an actual ",(0,r.mdx)("inlineCode",{parentName:"p"},"BuilderComposite::build([])")," call. So that you can have as many objects, as required, but only those, which are needed for a request are instantiated."),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"BuilderComposite")," implements the ",(0,r.mdx)("a",{parentName:"p",href:"https://designpatternsphp.readthedocs.io/en/latest/Structural/Composite/README.html"},"composite design pattern"),"."),(0,r.mdx)("p",null,"The concatenation strategy is defined in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"BuilderComposite::merge()")," method. So if you need to alter the strategy, you need to add your custom implementation of ",(0,r.mdx)("inlineCode",{parentName:"p"},"BuilderComposite"),"."),(0,r.mdx)("h2",{id:"adding-a-builder-composite"},"Adding a builder composite"),(0,r.mdx)("p",null,"Builder composites are added using ",(0,r.mdx)("a",{parentName:"p",href:"../../components/dependency-injection.md"},"dependency injection")," in ",(0,r.mdx)("inlineCode",{parentName:"p"},"di.xml"),". A builder composite might comprise simple builders as well as other builder composites."),(0,r.mdx)("p",null,"Example of adding composite builders for the Braintree payment provider (",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/etc/di.xml"},(0,r.mdx)("inlineCode",{parentName:"a"},"app/code/Magento/Braintree/etc/di.xml")),"):"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'...\n\x3c!-- is a builder composite comprising a number of builders --\x3e\n<virtualType name="BraintreeAuthorizeRequest" type="Magento\\Payment\\Gateway\\Request\\BuilderComposite">\n    <arguments>\n        <argument name="builders" xsi:type="array">\n            <item name="customer" xsi:type="string">Magento\\Braintree\\Gateway\\Request\\CustomerDataBuilder</item>\n            <item name="payment" xsi:type="string">Magento\\Braintree\\Gateway\\Request\\PaymentDataBuilder</item>\n            <item name="channel" xsi:type="string">Magento\\Braintree\\Gateway\\Request\\ChannelDataBuilder</item>\n            <item name="address" xsi:type="string">Magento\\Braintree\\Gateway\\Request\\AddressDataBuilder</item>\n            <item name="vault" xsi:type="string">Magento\\Braintree\\Gateway\\Request\\VaultDataBuilder</item>\n            <item name="3dsecure" xsi:type="string">Magento\\Braintree\\Gateway\\Request\\ThreeDSecureDataBuilder</item>\n            <item name="device_data" xsi:type="string">Magento\\Braintree\\Gateway\\Request\\KountPaymentDataBuilder</item>\n            <item name="dynamic_descriptor" xsi:type="string">Magento\\Braintree\\Gateway\\Request\\DescriptorDataBuilder</item>\n            <item name="store" xsi:type="string">Magento\\Braintree\\Gateway\\Request\\StoreConfigBuilder</item>\n            <item name="merchant_account" xsi:type="string">Magento\\Braintree\\Gateway\\Request\\MerchantAccountDataBuilder</item>\n        </argument>\n    </arguments>\n</virtualType>\n...\n\x3c!-- The same BraintreeAuthorizeRequest builder composite is a part of the BraintreeSaleRequest builder composite --\x3e\n<virtualType name="BraintreeSaleRequest" type="Magento\\Payment\\Gateway\\Request\\BuilderComposite">\n    <arguments>\n        <argument name="builders" xsi:type="array">\n            <item name="authorize" xsi:type="string">BraintreeAuthorizeRequest</item>\n            <item name="settlement" xsi:type="string">Magento\\Braintree\\Gateway\\Request\\SettlementDataBuilder</item>\n        </argument>\n    </arguments>\n</virtualType>\n')))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-development-payments-integrations-payment-gateway-request-builder-md-b10f6030e1be74837f17.js.map