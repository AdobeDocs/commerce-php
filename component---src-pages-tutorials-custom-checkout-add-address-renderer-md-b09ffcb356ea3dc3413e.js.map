{"version":3,"file":"component---src-pages-tutorials-custom-checkout-add-address-renderer-md-b09ffcb356ea3dc3413e.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/tutorials/custom-checkout/add-address-renderer.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-a-custom-shipping-address-renderer\"\n    }}>{`Add a custom shipping address renderer`}</h1>\n    <p>{`This topic describes how to implement a custom shipping address renderer.`}</p>\n    <p>{`Out of the box, `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/checkout\"\n      }}>{`checkout`}</a>{` consists of two steps:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Shipping Information`}</li>\n      <li parentName=\"ul\">{`Review and Payment Information`}</li>\n    </ul>\n    <p>{`On the Shipping Information checkout step, the application renders all addresses previously saved by a shopper. The shopper can then select the one to be used for shipping by clicking it. The default address renderers cover the majority of use cases, but the application provides a way to register custom address renderer for a new address type.`}</p>\n    <p>{`To implement shipping address rendering in checkout, you need to take the following steps:`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-1-create-the-js-renderer-component-shipping-address-renderer\"\n        }}>{`Create the JS renderer component (shipping address renderer)`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-2-create-a-template-for-the-shipping-address-renderer\"\n        }}>{`Create a template for the shipping address renderer.`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-3-create-the-js-model-for-the-shipping-rate-processor\"\n        }}>{`Create the JS model for the shipping rate processor`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-4-create-the-js-model-for-the-shipping-address-saving-processor\"\n        }}>{`Create the JS model for the shipping address saving processor`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-5-create-the-js-component-registering-the-processors\"\n        }}>{`Create the JS component registering the processors`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-6-declare-the-new-components-in-the-checkout-page-layout\"\n        }}>{`Declare the new components in the checkout page layout.`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-7-add-the-shipping-address-renderer-to-the-ship-to-block-optional\"\n        }}>{`Add the shipping address renderer to the \"Ship-To\" block (optional)`}</a>{`.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"step-1-create-the-js-renderer-component-shipping-address-renderer\"\n    }}>{`Step 1: Create the JS renderer component (shipping address renderer)`}</h2>\n    <p>{`Your shipping address renderer must be implemented as a `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/javascript\"\n      }}>{`JavaScript`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/ui-component\"\n      }}>{`UI component`}</a>{`. That is, it must be a RequireJS module, and must return a factory function, that takes a configurable object.`}</p>\n    <p>{`For the sake of compatibility, upgradability and easy maintenance, do not edit the default application code. Instead add your customizations in a separate module. For your checkout customization to be applied correctly, your custom module must depend on the `}<inlineCode parentName=\"p\">{`Magento_Checkout`}</inlineCode>{` module. Module dependencies are specified in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../development/build/composer-integration.md\"\n      }}>{`module's `}<inlineCode parentName=\"a\">{`composer.json`}</inlineCode></a>{`. Do not use `}<inlineCode parentName=\"p\">{`Ui`}</inlineCode>{` for your custom module name, because `}<inlineCode parentName=\"p\">{`%Vendor%_Ui`}</inlineCode>{` notation, required when specifying paths, might cause issues.`}</p>\n    <p>{`In your custom module directory, create the component's `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file (shipping address renderer). It must be located under the `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/web/js/view/`}</inlineCode>{` directory.`}</p>\n    <p>{`The following is a general view of the shipping address renderer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`define([\n    'ko',\n    'uiComponent',\n    'Magento_Checkout/js/action/select-shipping-address',\n    'Magento_Checkout/js/model/quote'\n], function(ko, Component, selectShippingAddressAction, quote) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            template: '%path to your template%'\n        },\n\n        initProperties: function () {\n            this._super();\n            this.isSelected = ko.computed(function() {\n                var isSelected = false;\n                var shippingAddress = quote.shippingAddress();\n                if (shippingAddress) {\n                    isSelected = shippingAddress.getKey() == this.address().getKey();\n                }\n                return isSelected;\n            }, this);\n\n            return this;\n        },\n\n        /** Set selected customer shipping address  */\n        selectAddress: function() {\n            selectShippingAddressAction(this.address());\n        },\n\n        /** additional logic required for this renderer  **/\n\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-2-create-a-template-for-the-shipping-address-renderer\"\n    }}>{`Step 2: Create a template for the shipping address renderer`}</h2>\n    <p>{`In your custom module directory, create a new `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/web/template/<your_template>.html`}</inlineCode>{` file. The template can use `}<a parentName=\"p\" {...{\n        \"href\": \"http://knockoutjs.com/\"\n      }}>{`Knockout JS`}</a>{` syntax.`}</p>\n    <p>{`The template should contain a button for setting the address to be used for shipping.`}</p>\n    <p>{`You can use the code from the default template: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Checkout/view/frontend/web/template/shipping-address/address-renderer/default.html\"\n      }}>{`app/code/Magento/Checkout/view/frontend/web/template/shipping-address/address-renderer/default.html`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"step-3-create-the-js-model-for-the-shipping-rate-processor\"\n    }}>{`Step 3: Create the JS model for the shipping rate processor`}</h2>\n    <p>{`A shipping rate processor is responsible for retrieving the shipping rates available for the given shipping address.`}</p>\n    <p>{`In your custom module directory, create the component's `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file for the processor. It must be located under the `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/web/js/model/`}</inlineCode>{` directory.`}</p>\n    <p>{`Here you need to specify the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/url\"\n      }}>{`URL`}</a>{` used for calculating the shipping rates for your custom address type.`}</p>\n    <p>{`The following is a sample of the shipping rate processor code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`define(\n    [\n        'Magento_Checkout/js/model/quote',\n        'Magento_Checkout/js/model/shipping-service',\n        'Magento_Checkout/js/model/shipping-rate-registry',\n        'magento/storage',\n        'Magento_Checkout/js/model/error-processor',\n        // additional dependencies\n    ],\n    function (quote, shippingService, rateRegistry, storage, errorProcessor, ...) {\n        'use strict';\n        return {\n            getRates: function(address) {\n                var cache = rateRegistry.get(address.getKey());\n                if (cache) {\n                    shippingService.setShippingRates(cache);\n                } else {\n                    shippingService.isLoading(true);\n                    storage.post(\n                        %URL for shipping rate estimation%,\n                        JSON.stringify({\n                            %address parameters%\n                        }),\n                        false\n                    ).done(\n                        function (result) {\n                            rateRegistry.set(address.getKey(), result);\n                            shippingService.setShippingRates(result);\n                        }\n                    ).fail(\n                        function (response) {\n                            shippingService.setShippingRates([]);\n                            errorProcessor.process(response);\n                        }\n                    ).always(\n                        function () {\n                            shippingService.isLoading(false);\n                        }\n                    );\n                }\n            }\n        };\n    }\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-4-create-the-js-model-for-the-shipping-address-saving-processor\"\n    }}>{`Step 4: Create the JS model for the shipping address saving processor`}</h2>\n    <p>{`This processor is responsible for sending the shipping address and the selected rate to the server.`}</p>\n    <p>{`In your custom module directory, create the component's `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file for the processor. It must be located under the `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/web/js/model/`}</inlineCode>{` directory.`}</p>\n    <p>{`The following is a sample of the shipping rate processor code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`define(\n    [\n        'Magento_Checkout/js/model/quote',\n        'Magento_Checkout/js/model/resource-url-manager',\n        'mage/storage',\n        'Magento_Checkout/js/model/payment-service',\n        'Magento_Checkout/js/model/error-processor',\n        'Magento_Checkout/js/model/payment/method-converter'\n    ],\n    function (quote, resourceUrlManager, storage, paymentService, errorProcessor, methodConverter) {\n        'use strict';\n        return {\n            saveShippingInformation: function() {\n                var shippingAddress = {},\n                    payload;\n\n                shippingAddress.extension_attributes = {\n                    %address extension attributes%\n                };\n\n                payload = {\n                    addressInformation: {\n                        shipping_address: shippingAddress,\n                        shipping_method_code: quote.shippingMethod().method_code,\n                        shipping_carrier_code: quote.shippingMethod().carrier_code\n                    }\n                };\n\n                return storage.post(\n                    resourceUrlManager.getUrlForSetShippingInformation(quote),\n                    JSON.stringify(payload)\n                ).done(\n                    function (response) {\n                        paymentService.setPaymentMethods(methodConverter(response.payment_methods));\n                        quote.setTotals(response.totals)\n                    }\n                ).fail(\n                    function (response) {\n                        errorProcessor.process(response);\n                    }\n                );\n            }\n        }\n    }\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-5-create-the-js-component-registering-the-processors\"\n    }}>{`Step 5: Create the JS component registering the processors`}</h2>\n    <p>{`In your custom module directory, create the `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` UI component that registers the rate processor and the saving processor. It must be located under the `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/web/js/view/`}</inlineCode>{` directory.`}</p>\n    <p>{`The file content must be similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`define(\n    [\n        'uiComponent',\n        'Magento_Checkout/js/model/shipping-rate-service',\n        %custom shipping rate processor%,\n        'Magento_Checkout/js/model/shipping-save-processor',\n        %custom shipping save processor%\n    ],\n    function (\n        Component,\n        shippingRateService,\n        customShippingRateProcessor,\n        shippingSaveProcessor,\n        customShippingSaveProcessor\n    ) {\n        'use strict';\n\n        /** Register rate processor */\n        shippingRateService.registerProcessor(%address type%, customShippingRateProcessor);\n\n        /** Register save shipping address processor */\n        shippingSaveProcessor.registerProcessor(%address type%, custormShippingSaveProcessor);\n\n        /** Add view logic here if needed */\n        return Component.extend({});\n    }\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-6-declare-the-new-components-in-the-checkout-page-layout\"\n    }}>{`Step 6: Declare the new components in the checkout page layout`}</h2>\n    <p>{`In your custom module directory, create a new `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/layout/checkout_index_index.xml`}</inlineCode>{` file. In this file, add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <body>\n        <referenceBlock name=\"checkout.root\">\n            <arguments>\n                <argument name=\"jsLayout\" xsi:type=\"array\">\n                    <item name=\"components\" xsi:type=\"array\">\n                        <item name=\"checkout\" xsi:type=\"array\">\n                            <item name=\"children\" xsi:type=\"array\">\n                                <item name=\"steps\" xsi:type=\"array\">\n                                    <item name=\"children\" xsi:type=\"array\">\n                                        <item name=\"shipping-step\" xsi:type=\"array\">\n                                            <item name=\"children\" xsi:type=\"array\">\n                                                <!-- Declare the component that registers the shipping address and rates processors -->\n                                                <item name=\"custom-address-provider\" xsi:type=\"array\">\n                                                    <item name=\"component\" xsi:type=\"string\">%component that registers address/rate processors%</item>\n                                                </item>\n                                                <!-- Declare the component that renders the shipping address -->\n                                                <item name=\"shippingAddress\" xsi:type=\"array\">\n                                                    <item name=\"children\" xsi:type=\"array\">\n                                                        <item name=\"rendererTemplates\" xsi:type=\"array\">\n                                                            <item name=\"%address type%\" xsi:type=\"array\">\n                                                                <item name=\"component\" xsi:type=\"string\">%address renderer JS component%</item>\n                                                            </item>\n                                                        </item>\n                                                    </item>\n                                                </item>\n                                           </item>\n                                        </item>\n                                    </item>\n                                </item>\n                            </item>\n                        </item>\n                    </item>\n                </argument>\n            </arguments>\n        </referenceBlock>\n    </body>\n</page>\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`address_type`}</inlineCode>{` you need to specify in the layout, is the value you set in the JS model of your custom address type.`}</p>\n    <h2 {...{\n      \"id\": \"step-7-add-the-shipping-address-renderer-to-the-ship-to-block-optional\"\n    }}>{`Step 7: Add the shipping address renderer to the \"Ship-To\" block (optional)`}</h2>\n    <p>{`On the Review and Payment Information step of checkout, the shipping address is displayed in the `}<strong parentName=\"p\">{`Ship-To`}</strong>{` section for customer to make sure everything is set correctly.`}</p>\n    <p>{`If you want your custom address type to be displayed here as well, you need to create an `}<inlineCode parentName=\"p\">{`.html`}</inlineCode>{` template for rendering it, and declare in the corresponding location in `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/layout\"\n      }}>{`layout`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"add-template-for-displaying-the-address-in-the-ship-to-section\"\n    }}>{`Add template for displaying the address in the Ship-To section`}</h3>\n    <p>{`In your custom module directory create a new `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/web/template/<your_template>.html`}</inlineCode>{` file. The template can use `}<a parentName=\"p\" {...{\n        \"href\": \"http://knockoutjs.com/\"\n      }}>{`Knockout JS`}</a>{` syntax.`}</p>\n    <p>{`You can use the code from the default template: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Checkout/view/frontend/web/template/shipping-information/address-renderer/default.html\"\n      }}>{`app/code/Magento/Checkout/view/frontend/web/template/shipping-information/address-renderer/default.html`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"declare-the-address-to-be-used-in-the-ship-to-section-in-layout\"\n    }}>{`Declare the address to be used in the Ship-To section in layout`}</h3>\n    <p>{`In your `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/layout/checkout_index_index.xml`}</inlineCode>{` file, add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <body>\n        <referenceContainer name=\"content\">\n            <block class=\"Magento\\\\Checkout\\\\Block\\\\Onepage\" name=\"checkout.root\" template=\"onepage.phtml\" cacheable=\"false\">\n                <arguments>\n                    <argument name=\"jsLayout\" xsi:type=\"array\">\n                        <item name=\"components\" xsi:type=\"array\">\n                            <item name=\"sidebar\" xsi:type=\"array\">\n                                <item name=\"children\" xsi:type=\"array\">\n                                    <item name=\"shipping-information\" xsi:type=\"array\">\n                                        <item name=\"children\" xsi:type=\"array\">\n                                            <item name=\"ship-to\" xsi:type=\"array\">\n                                                <item name=\"rendererTemplates\" xsi:type=\"array\">\n                                                    <item name=\"%address type%\" xsi:type=\"array\">\n                                                        <item name=\"component\" xsi:type=\"string\">uiComponent</item>\n                                                        <item name=\"config\" xsi:type=\"array\">\n                                                                <item name=\"template\" xsi:type=\"string\">%custom template%</item>\n                                                        </item>\n                                                    </item>\n                                                </item>\n                                            </item>\n                                        </item>\n                                    </item>\n                                </item>\n                            </item>\n                        </item>\n                    </argument>\n                </arguments>\n            </block>\n        </referenceContainer>\n    </body>\n</page>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-8-deploy-the-static-content-and-clean-the-cache\"\n    }}>{`Step 8: Deploy the static content and clean the cache`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Deploy static content:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento setup:static-content:deploy\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Then clean the cache:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento cache:clean\n`}</code></pre>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}