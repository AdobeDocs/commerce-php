{"version":3,"file":"component---src-pages-architecture-modules-dependencies-md-7f8c3cb65064799b59a3.js","mappings":"qRAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,uBACH,wBACL,kBAAK,MAAI,eAAIC,WAAW,KAAM,uBAA4B,wMAAsM,mBAAQA,WAAW,KAAM,yCAAkD,qGAAmG,eAAIA,WAAW,KAAM,mBAAwB,sGAC3d,kBAAK,mFACL,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,4DAEvB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,4DAEvB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,wLAEvB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,iFAGzB,eACE,GAAM,oBACH,qBACL,kBAAK,+DACL,eACE,GAAM,qBACH,sBACL,kBAAK,oBAAkB,eAAIA,WAAW,KAAM,mBAAwB,wFACpE,oBACE,eAAIA,WAAW,MAAO,yJACtB,eAAIA,WAAW,MAAO,2IACtB,eAAIA,WAAW,MAAO,uDACtB,eAAIA,WAAW,MAAO,kEAExB,kBAAK,QAAM,uBAAYA,WAAW,KAAM,WAAwB,gBAAc,uBAAYA,WAAW,KAAM,4CAAyD,4EACpK,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,qaAcP,eACE,GAAM,qBACH,sBACL,kBAAK,oBAAkB,eAAIA,WAAW,KAAM,mBAAwB,uIACpE,oBACE,eAAIA,WAAW,MAAO,kDACtB,eAAIA,WAAW,MAAO,2CACtB,eAAIA,WAAW,MAAO,qCAExB,kBAAK,QAAM,uBAAYA,WAAW,KAAM,WAAwB,gBAAc,uBAAYA,WAAW,KAAM,4CAAyD,4EACpK,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,oKAQP,kBAAK,QAAM,uBAAYA,WAAW,KAAM,cAA2B,aAAW,uBAAYA,WAAW,KAAM,6CAA0D,iFACrK,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,wMAQP,SAACX,EAAD,CAAaY,QAAQ,UAAUC,MAAM,OAAOH,QAAQ,iBACpD,kBAAK,4FACL,eACE,GAAM,wBACH,yBACL,kBAAK,oEACL,oBACE,eAAIC,WAAW,MAAO,0DACtB,eAAIA,WAAW,MAAO,gCAExB,eACE,GAAM,4BACH,6BACL,kBAAK,8JACL,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,mBAEvB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,oBAEvB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,6EAGzB,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,sMACL,eACE,GAAM,8BACH,+BACL,kBAAK,uCACL,oBACE,eAAIC,WAAW,MAAO,wCACtB,eAAIA,WAAW,MAAO,eACtB,eAAIA,WAAW,MAAO,eAExB,eACE,GAAM,iEACH,kEACL,kBAAK,kFACL,eACE,GAAM,uCACH,wCACL,kBAAK,iHACL,SAACX,EAAD,CAAaY,QAAQ,UAAUC,MAAM,OAAOH,QAAQ,iBACpD,kBAAK,kLACL,eACE,GAAM,yCACH,0CACL,kBAAK,0FACL,kBAAK,2QACL,eACE,GAAM,gCACH,iCACL,kBAAK,kFACL,oBACE,eAAIC,WAAW,OACb,cAAGA,WAAW,MAAO,uCAAqC,uBAAYA,WAAW,KAAM,cAA2B,YAEpH,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,wHAAsH,uBAAYA,WAAW,KAAM,iBAA8B,YAExM,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,KAAG,eAAIA,WAAW,KAAM,YAAiB,wDAAsD,uBAAYA,WAAW,KAAM,QAAqB,kBAAgB,uBAAYA,WAAW,KAAM,cAA2B,aAGlP,kBAAK,+EAA6E,uBAAYA,WAAW,KAAM,cAA2B,qCAAmC,uBAAYA,WAAW,KAAM,cAA2B,qHAAmH,uBAAYA,WAAW,KAAM,iBAA8B,+BAA6B,cAAGA,WAAW,IAC1b,KAAQ,+GACL,4BAAgC,uDACvC,mBAAG,uBAAYA,WAAW,KAAM,oBAChC,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,iTAQP,kBAAK,4CAA0C,uBAAYA,WAAW,KAAM,sBAAmC,wEAC/G,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,4HAWV,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/architecture/modules/dependencies.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"module-dependencies\"\n    }}>{`Module dependencies`}</h1>\n    <p>{`A `}<em parentName=\"p\">{`software dependency`}</em>{` identifies  one software component's reliance on another for proper functioning. A core principle of the Adobe Commerce and Magento Open Source framework (Commerce framework) architecture is the `}<strong parentName=\"p\">{`minimization of software dependencies`}</strong>{`. Instead of being closely interrelated with other modules, modules are optimally designed to be `}<em parentName=\"p\">{`loosely coupled`}</em>{`. Loosely coupled modules require little or no knowledge of other modules to perform their tasks.`}</p>\n    <p>{`Each module is responsible for a unique feature. In practice, this means that:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Several modules cannot be responsible for one feature.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`One module cannot be responsible for several features.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Module dependencies on other modules must be declared explicitly. You must also declare any dependency upon other components (for example, a theme, language package, or library).`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Removing or disabling a module does not result in disabling other modules.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"dependency-types\"\n    }}>{`Dependency types`}</h2>\n    <p>{`There are two types of module dependencies: hard and soft.`}</p>\n    <h3 {...{\n      \"id\": \"hard-dependencies\"\n    }}>{`Hard dependencies`}</h3>\n    <p>{`A module with a `}<em parentName=\"p\">{`hard dependency`}</em>{` on another module cannot function without the module it depends on. These modules:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Contain code that directly uses logic from another module, such as class constants, static methods, public class properties, interfaces, and traits.`}</li>\n      <li parentName=\"ul\">{`Contain strings that include class names, method names, class constants, class properties, interfaces, and traits from another module.`}</li>\n      <li parentName=\"ul\">{`Deserializes an object declared in another module.`}</li>\n      <li parentName=\"ul\">{`Uses or modifies the database tables used by another module.`}</li>\n    </ul>\n    <p>{`The `}<inlineCode parentName=\"p\">{`require`}</inlineCode>{` section of `}<inlineCode parentName=\"p\">{`app/code/<Vendor>/<Module>/composer.json`}</inlineCode>{` file contains hard dependency definitions for the module. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`  ...\n  \"require\": {\n    \"magento/module-catalog\": \"103.0.*\",\n    \"magento/module-email\": \"101.0.*\",\n    \"magento/module-media-storage\": \"100.3.*\",\n    \"magento/module-store\": \"101.0.*\",\n    \"magento/module-theme\": \"101.0.*\",\n    \"magento/module-ui\": \"101.1.*\",\n    \"magento/module-variable\": \"100.3.*\",\n    \"magento/module-widget\": \"101.1.*\",\n    \"magento/module-authorization\": \"100.3.*\"\n   }\n   ...\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"soft-dependencies\"\n    }}>{`Soft dependencies`}</h3>\n    <p>{`A module with a `}<em parentName=\"p\">{`soft dependency`}</em>{` on another module can function properly without the other module, even if it has a dependency on the other module. These modules:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Directly check another module's availability.`}</li>\n      <li parentName=\"ul\">{`Extend another module's configuration.`}</li>\n      <li parentName=\"ul\">{`Extend another module's layout.`}</li>\n    </ul>\n    <p>{`The `}<inlineCode parentName=\"p\">{`suggest`}</inlineCode>{` section of `}<inlineCode parentName=\"p\">{`app/code/<Vendor>/<Module>/composer.json`}</inlineCode>{` file contains soft dependency definitions for the module. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`  ...\n  \"suggest\": {\n    \"magento/module-graph-ql\": \"*\",\n    \"magento/module-graph-ql-cache\": \"*\",\n    \"magento/module-store-graph-ql\": \"*\"\n  }\n   ...\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{` node of `}<inlineCode parentName=\"p\">{`app/code/<Vendor>/<Module>/etc/module.xml`}</inlineCode>{` file also contains soft dependency definitions for the module. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`  <module name=\"Magento_Cms\">\n    <sequence>\n      <module name=\"Magento_Store\"/>\n      <module name=\"Magento_Theme\"/>\n      <module name=\"Magento_Variable\"/>\n    </sequence>\n  </module>\n`}</code></pre>\n    <InlineAlert variant=\"success\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If a module uses code from another module, it should declare the dependency explicitly.`}</p>\n    <h2 {...{\n      \"id\": \"module-install-order\"\n    }}>{`Module install order`}</h2>\n    <p>{`The Commerce framework installs modules in the following order:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The module serving as a dependency for another module`}</li>\n      <li parentName=\"ol\">{`The module dependent on it`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"appropriate-dependencies\"\n    }}>{`Appropriate dependencies`}</h2>\n    <p>{`Although the Commerce framework architecture favors loosely coupled software components, modules can contain dependencies upon these software components:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`other modules`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`PHP extensions`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`libraries (either Commerce framework library or third party libraries)`}</p>\n      </li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You can lose the historical information contained in a module if the module is removed or disabled. We recommend alternative storage of module information before you remove or disable a module.`}</p>\n    <h2 {...{\n      \"id\": \"inappropriate-dependencies\"\n    }}>{`Inappropriate dependencies`}</h2>\n    <p>{`Avoid creating these dependencies:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Circular (both direct and indirect)`}</li>\n      <li parentName=\"ul\">{`Undeclared`}</li>\n      <li parentName=\"ul\">{`Incorrect`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"dependencies-between-modules-in-different-presentation-layers\"\n    }}>{`Dependencies between modules in different presentation layers`}</h2>\n    <p>{`You can build dependencies between the modules belonging to different layers.`}</p>\n    <h2 {...{\n      \"id\": \"dependencies-in-the-framework-layer\"\n    }}>{`Dependencies in the Framework layer`}</h2>\n    <p>{`A module belonging to the Commerce framework can be used in the application layer by an explicit dependency.`}</p>\n    <InlineAlert variant=\"success\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`In this case, using interfaces is preferable to using classes. You can build dependencies between classes in the Commerce framework even if they belong to different modules.`}</p>\n    <h2 {...{\n      \"id\": \"dependencies-in-the-application-layer\"\n    }}>{`Dependencies in the application layer`}</h2>\n    <p>{`A module belonging to the application layer cannot be used in the Commerce framework.`}</p>\n    <p>{`You can build dependencies between classes in the application layer, but these classes must belong to the same module. Dependencies between the modules of the application layer should be built only by the service contract or the service provider interface (SPI).`}</p>\n    <h2 {...{\n      \"id\": \"managing-module-dependencies\"\n    }}>{`Managing module dependencies`}</h2>\n    <p>{`At a high level, there are three main steps for managing module dependencies:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Name and declare the module in the `}<inlineCode parentName=\"p\">{`module.xml`}</inlineCode>{` file.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Declare any dependencies that the module has (whether on other modules or on a different component) in the module's `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` file.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`(`}<em parentName=\"p\">{`Optional`}</em>{`) Define the desired load order of config files and `}<inlineCode parentName=\"p\">{`.css`}</inlineCode>{` files in the `}<inlineCode parentName=\"p\">{`module.xml`}</inlineCode>{` file.`}</p>\n      </li>\n    </ol>\n    <p>{`Example: Module A declares a dependency upon Module B. Thus, in Module A's `}<inlineCode parentName=\"p\">{`module.xml`}</inlineCode>{` file, Module B is listed in the `}<inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{` list, so that B's files are loaded before A's. Additionally, you must declare a dependency upon Module B in A's `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` file. Furthermore, in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/commerce-operations/configuration-guide/files/deployment-files.html\"\n      }}>{`deployment configuration`}</a>{`, Modules A and B must both be defined as enabled.`}</p>\n    <p><inlineCode parentName=\"p\">{`etc/module.xml`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\">\n    <module name=\"Module_A\" setup_version=\"1.0.0\">\n        <sequence>\n            <module name=\"Module_B\" />\n        </sequence>\n    </module>\n</config>\n`}</code></pre>\n    <p>{`After installing the module and opening `}<inlineCode parentName=\"p\">{`app/etc/config.php`}</inlineCode>{`, you are able to see that the Module_B was loaded before Module_A:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`return [\n    'modules' => [\n        ...\n        'Module_B' => 1,\n        'Module_A' => 1,\n        ...\n    ]\n];\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}