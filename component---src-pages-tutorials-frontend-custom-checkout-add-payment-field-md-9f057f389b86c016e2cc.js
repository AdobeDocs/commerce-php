"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[63028],{89076:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return i},default:function(){return u}});var a=t(58168),r=t(80045),o=(t(88763),t(15680)),d=t(83407);const m=["components"],i={},l=(p="InlineAlert",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var p;const s={_frontmatter:i},c=d.A;function u(e){let{components:n}=e,t=(0,r.A)(e,m);return(0,o.mdx)(c,(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"add-a-custom-field-for-an-offline-payment-method"},"Add a custom field for an offline payment method"),(0,o.mdx)("p",null,"This topic describes how to add a custom field to an offline payment method in the payment step of the checkout. The custom field allows the buyer to enter a comment about a purchase order."),(0,o.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.mdx)(l,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"Purchase Order")," payment method must be enabled in the storefront for this task. Ensure this payment method is enabled by navigating to ",(0,o.mdx)("strong",{parentName:"p"},"Stores")," > ",(0,o.mdx)("strong",{parentName:"p"},"Settings")," > ",(0,o.mdx)("strong",{parentName:"p"},"Configuration")," > ",(0,o.mdx)("strong",{parentName:"p"},"Sales")," > ",(0,o.mdx)("strong",{parentName:"p"},"Payment Methods")," > ",(0,o.mdx)("strong",{parentName:"p"},"Other Payment Methods")," > ",(0,o.mdx)("strong",{parentName:"p"},"Purchase Order")," in the Admin."),(0,o.mdx)("p",null,"You must perform following steps to add a custom field to an offline payment method:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"#step-1-create-a-new-module"},"Create a new module"),"."),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"#step-2-add-a-db_schemaxml-file"},"Add a ",(0,o.mdx)("inlineCode",{parentName:"a"},"db_schema.xml")," file"),"."),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"#step-3-add-a-requirejs-file-to-the-module"},"Add a ",(0,o.mdx)("inlineCode",{parentName:"a"},"requirejs")," file to the module"),"."),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"#step-4-override-the-vendor-files"},"Override the vendor files"),"."),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"#step-5-add-an-observer"},"Add an Observer"),"."),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"#step-6-compile-and-deploy-the-module"},"Compile and deploy the module"),"."),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("a",{parentName:"li",href:"#step-7-verify-that-the-module-works"},"Verify that the module works"),".")),(0,o.mdx)("p",null,"Let's go through each step."),(0,o.mdx)("h2",{id:"step-1-create-a-new-module"},"Step 1: Create a new module"),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"https://experienceleague.adobe.com/docs/commerce-learn/tutorials/backend-development/create-module.html?lang=en"},"Create a new module")," named ",(0,o.mdx)("inlineCode",{parentName:"p"},"Learning/CustomField")," and register it."),(0,o.mdx)("h2",{id:"step-2-add-a-db_schemaxml-file"},"Step 2 Add a ",(0,o.mdx)("inlineCode",{parentName:"h2"},"db_schema.xml")," file"),(0,o.mdx)("p",null,"Add the ",(0,o.mdx)("inlineCode",{parentName:"p"},"paymentpocomment")," column in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"quote_payment")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"sales_order_payment")," tables using the ",(0,o.mdx)("a",{parentName:"p",href:"../../../development/components/declarative-schema/configuration.md"},"declarative schema")," method."),(0,o.mdx)("p",null,"Create the ",(0,o.mdx)("inlineCode",{parentName:"p"},"app/code/Learning/CustomField/etc/db_schema.xml")," and define the declarative schema as follows:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-xml"},'<schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n        xsi:noNamespaceSchemaLocation="urn:magento:framework:Setup/Declaration/Schema/etc/schema.xsd">\n    <table name="quote_payment" resource="checkout" engine="innodb" comment="Sales Flat Quote Payment">\n        <column xsi:type="text" name="paymentpocomment" nullable="true" comment="PO Comment"/>\n    </table>\n    <table name="sales_order_payment" resource="sales" engine="innodb" comment="Sales Flat Order Payment">\n        <column xsi:type="text" name="paymentpocomment" nullable="true" comment="PO Comment"/>\n    </table>\n</schema>\n')),(0,o.mdx)("h2",{id:"step-3-add-a-requirejs-file-to-the-module"},"Step 3: Add a requirejs file to the module"),(0,o.mdx)("p",null,"Create the ",(0,o.mdx)("inlineCode",{parentName:"p"},"app/code/Learning/CustomField/view/frontend/requirejs-config.js")," file and add the following code:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"}," var config = {\n    map: {\n        '*': {\n          'Magento_OfflinePayments/js/view/payment/offline-payments':'Learning_CustomField/js/view/payment/offline-payments',\n        }\n    }\n}\n")),(0,o.mdx)("h2",{id:"step-4-override-the-vendor-files"},"Step 4: Override the vendor files"),(0,o.mdx)("p",null,"We must override the behavior of the following files to display the custom field:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"#override-the-offline-paymentsjs"},"Magento_OfflinePayments/view/frontend/web/js/view/payment/offline-payments.js")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"#override-the-purchaseorder-methodjs"},"Magento_OfflinePayments/view/frontend/web/js/view/payment/method-renderer/purchaseorder-method.js")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"#override-the-purchaseorder-formhtml"},"Magento_OfflinePayments/view/frontend/web/template/payment/purchaseorder-form.html"))),(0,o.mdx)("h3",{id:"override-the-offline-paymentsjs"},"Override the ",(0,o.mdx)("inlineCode",{parentName:"h3"},"offline-payments.js")),(0,o.mdx)("p",null,"Override the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Magento_OfflinePayments/view/frontend/web/js/view/payment/offline-payments.js")," file to change the renderer of the Purchase Order payment method."),(0,o.mdx)("p",null,"Create the ",(0,o.mdx)("inlineCode",{parentName:"p"},"app/code/Learning/CustomField/view/frontend/web/js/view/payment/offline-payments.js")," file and add the following code:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"define(\n    [\n        'uiComponent',\n        'Magento_Checkout/js/model/payment/renderer-list'\n    ],\n    function (\n        Component,\n        rendererList\n    ) {\n        'use strict';\n        rendererList.push(\n            {\n                type: 'checkmo',\n                component: 'Magento_OfflinePayments/js/view/payment/method-renderer/checkmo-method'\n            },\n            {\n                type: 'banktransfer',\n                component: 'Magento_OfflinePayments/js/view/payment/method-renderer/banktransfer-method'\n            },\n            {\n                type: 'cashondelivery',\n                component: 'Magento_OfflinePayments/js/view/payment/method-renderer/cashondelivery-method'\n            },\n            {\n                type: 'purchaseorder',\n                component: 'Learning_CustomField/js/view/payment/method-renderer/purchaseorder-method'\n            }\n        );\n        /** Add view logic here if needed */\n        return Component.extend({});\n    }\n);\n")),(0,o.mdx)("h3",{id:"override-the-purchaseorder-methodjs"},"Override the ",(0,o.mdx)("inlineCode",{parentName:"h3"},"purchaseorder-method.js")),(0,o.mdx)("p",null,"It is also necessary to override the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Magento_OfflinePayments/view/frontend/web/js/view/payment/method-renderer/purchaseorder-method.js")," file."),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"template")," path value used in this file must be altered to use the custom template. Also, the logic to get the ",(0,o.mdx)("inlineCode",{parentName:"p"},"additional_data")," is implemented in this file."),(0,o.mdx)("p",null,"Create the ",(0,o.mdx)("inlineCode",{parentName:"p"},"app/code/Learning/CustomField/view/frontend/web/js/view/payment/method-renderer/purchaseorder-method.js")," file and add the following code:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"define([\n    'Magento_Checkout/js/view/payment/default',\n    'jquery',\n    'mage/validation'\n], function (Component, $) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Learning_CustomField/payment/purchaseorder-form',\n            purchaseOrderNumber: ''\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super()\n                .observe('purchaseOrderNumber');\n\n            return this;\n        },\n\n        /**\n         * @return {Object}\n         */\n        getData: function () {\n            return {\n                method: this.item.method,\n                'po_number': this.purchaseOrderNumber(),\n                'additional_data': {\n                    'po_number': $('#po_number').val(),\n                    'paymentpocomment': $('#purchaseorder_paymentpocomment').val(),\n                }\n            };\n        },\n\n        /**\n         * @return {jQuery}\n         */\n        validate: function () {\n            var form = 'form[data-role=purchaseorder-form]';\n\n            return $(form).validation() && $(form).validation('isValid');\n        }\n    });\n});\n")),(0,o.mdx)("h3",{id:"override-the-purchaseorder-formhtml"},"Override the ",(0,o.mdx)("inlineCode",{parentName:"h3"},"purchaseorder-form.html")),(0,o.mdx)("p",null,"We must override the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Magento_OfflinePayments/view/frontend/web/template/payment/purchaseorder-form.html")," template file to add the custom input field (",(0,o.mdx)("strong",{parentName:"p"},"Purchase Order Comment"),")."),(0,o.mdx)("p",null,"Create the ",(0,o.mdx)("inlineCode",{parentName:"p"},"app/code/Learning/CustomField/view/frontend/web/template/payment/purchaseorder-form.html")," file and add the following code:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-html"},'<div class="payment-method" data-bind="css: {\'_active\': (getCode() == isChecked())}">\n    <div class="payment-method-title field choice">\n        <input type="radio"\n               name="payment[method]"\n               class="radio"\n               data-bind="attr: {\'id\': getCode()}, value: getCode(), checked: isChecked, click: selectPaymentMethod, visible: isRadioButtonVisible()"/>\n        <label data-bind="attr: {\'for\': getCode()}" class="label">\n            <span data-bind="text: getTitle()"></span>\n        </label>\n    </div>\n\n    <div class="payment-method-content">\n        \x3c!-- ko foreach: getRegion(\'messages\') --\x3e\n        \x3c!-- ko template: getTemplate() --\x3e\x3c!-- /ko --\x3e\n        \x3c!--/ko--\x3e\n        <div class="payment-method-billing-address">\n            \x3c!-- ko foreach: $parent.getRegion(getBillingAddressFormName()) --\x3e\n            \x3c!-- ko template: getTemplate() --\x3e\x3c!-- /ko --\x3e\n            \x3c!--/ko--\x3e\n        </div>\n        <form id="purchaseorder-form" class="form form-purchase-order" data-role="purchaseorder-form">\n            <fieldset class="fieldset payment method" data-bind=\'attr: {id: "payment_form_" + getCode()}\'>\n                <div class="field field-number required">\n                    <label for="po_number" class="label">\n                    <span>\x3c!-- ko i18n: \'Purchase Order Number\'--\x3e\x3c!-- /ko --\x3e</span>\n                    </label>\n                    <div class="control">\n                    <div class="name-info">\n                    <input type="text" id="po_number" name="payment[po_number]" placeholder="Purchase Order Number" data-validate="{required:true}"        data-bind=\'attr: {title: $t("Purchase Order Number")},value: purchaseOrderNumber\' class="input-text"/>\n                    <input type="text" id="purchaseorder_paymentpocomment" name="payment[paymentpocomment]" class="input-text" placeholder="Purchase Order Comment" value="" data-bind="attr: {title: $t(\'Purchase Order Comment\'),\'data-container\': getCode() + \'-paymentpocomment\'},valueUpdate: \'keyup\'"/>\n                        </div>\n                    </div>\n                </div>\n            </fieldset>\n        </form>\n        <div class="checkout-agreements-block">\n            \x3c!-- ko foreach: $parent.getRegion(\'before-place-order\') --\x3e\n                \x3c!-- ko template: getTemplate() --\x3e\x3c!-- /ko --\x3e\n            \x3c!--/ko--\x3e\n        </div>\n        <div class="actions-toolbar" id="review-buttons-container">\n            <div class="primary">\n                <button class="action primary checkout"\n                        type="submit"\n                        data-bind="\n                        click: placeOrder,\n                        attr: {title: $t(\'Place Order\')},\n                        enable: (getCode() == isChecked()),\n                        css: {disabled: !isPlaceOrderActionAllowed()}\n                        "\n                        data-role="review-save">\n                    <span data-bind="i18n: \'Place Order\'"></span>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n')),(0,o.mdx)("h2",{id:"step-5-add-an-observer"},"Step 5: Add an Observer"),(0,o.mdx)("p",null,"Create an Observer file to save the custom field data to the order. For the Observer file an ",(0,o.mdx)("inlineCode",{parentName:"p"},"events.xml")," file is required to call the observer for a particular event. For this example, the ",(0,o.mdx)("inlineCode",{parentName:"p"},"checkout_onepage_controller_success_action")," event is used."),(0,o.mdx)("p",null,"Create the ",(0,o.mdx)("inlineCode",{parentName:"p"},"app/code/Learning/CustomField/etc/frontend/events.xml")," file and add the following code:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0"?>\n\n<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Event/etc/events.xsd">\n    <event name="checkout_onepage_controller_success_action">\n        <observer name="paymentfields_paymentfields_observer_frontend_sales_orderpaymentsavebefore" instance="Learning\\CustomField\\Observer\\Frontend\\Sales\\OrderPaymentSaveBefore" />\n    </event>\n</config>\n')),(0,o.mdx)("p",null,"Then create the ",(0,o.mdx)("inlineCode",{parentName:"p"},"app/code/Learning/CustomField/Observer/Frontend/Sales/OrderPaymentSaveBefore.php")," file."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace Learning\\CustomField\\Observer\\Frontend\\Sales;\n\nuse Magento\\Framework\\Event\\Observer as EventObserver;\nuse Magento\\Framework\\Event\\ObserverInterface;\nuse Magento\\OfflinePayments\\Model\\Purchaseorder;\nuse Magento\\Framework\\App\\Request\\DataPersistorInterface;\n\nclass OrderPaymentSaveBefore implements \\Magento\\Framework\\Event\\ObserverInterface\n{\n    protected $order;\n    protected $logger;\n    protected $_serialize;\n    protected $quoteRepository;\n\n    public function __construct(\n        \\Magento\\Sales\\Api\\Data\\OrderInterface $order,\n        \\Magento\\Quote\\Api\\CartRepositoryInterface $quoteRepository,\n        \\Psr\\Log\\LoggerInterface $logger,\n        \\Magento\\Framework\\Serialize\\Serializer\\Serialize $serialize\n    ) {\n        $this->order = $order;\n        $this->quoteRepository = $quoteRepository;\n        $this->logger = $logger;\n        $this->_serialize = $serialize;\n    }\n    /**\n     * Execute observer\n     *\n     * @param \\Magento\\Framework\\Event\\Observer $observer\n     * @return void\n     */\n    public function execute(\\Magento\\Framework\\Event\\Observer $observer)\n    {\n        $orderids = $observer->getEvent()->getOrderIds();\n        if(!$orderids){\n            foreach ($orderids as $orderid) {\n                $order = $this->_order->load($orderid);\n                $method = $order->getPayment()->getMethod();\n                if($method == 'purchaseorder') {\n                    $quote_id = $order->getQuoteId();\n                    $quote = $this->quoteRepository->get($quote_id);\n                    $paymentQuote = $quote->getPayment();\n                    $paymentOrder = $order->getPayment();\n                    $paymentOrder->setData('paymentpocomment',$paymentQuote->getPaymentpocomment());\n                    $paymentOrder->save();\n                }\n            }\n        }\n    }\n}\n")),(0,o.mdx)("h2",{id:"step-6-compile-and-deploy-the-module"},"Step 6: Compile and deploy the module"),(0,o.mdx)("p",null,"Run the following sequence of commands to compile and deploy your custom module."),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Enable the new module."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento module:enable Learning_CustomField\n"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Install the new module."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento setup:upgrade\n"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Compile the code."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento setup:di:compile\n"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Deploy the static files."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento setup:static-content:deploy\n")))),(0,o.mdx)("h2",{id:"step-7-verify-that-the-module-works"},"Step 7: Verify that the module works"),(0,o.mdx)("p",null,"Use the following steps to verify your changes work as expected."),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Go to the storefront as a guest user and add a product to the cart.")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Go to the checkout page and select the ",(0,o.mdx)("strong",{parentName:"p"},"Purchase Order")," payment.")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Verify that the ",(0,o.mdx)("strong",{parentName:"p"},"Purchase Order Comment")," field is visible."),(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1238px"}},"\n      ",(0,o.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"49.6875%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,o.mdx)("picture",{parentName:"span"},"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/commerce-php/static/3724567ea01f34b1dd9f6775d02fb473/5530d/custom_field_payment.webp 320w","/commerce-php/static/3724567ea01f34b1dd9f6775d02fb473/0c8fb/custom_field_payment.webp 640w","/commerce-php/static/3724567ea01f34b1dd9f6775d02fb473/1ca0c/custom_field_payment.webp 1238w"],sizes:"(max-width: 1238px) 100vw, 1238px",type:"image/webp"}),"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/commerce-php/static/3724567ea01f34b1dd9f6775d02fb473/dd4a7/custom_field_payment.png 320w","/commerce-php/static/3724567ea01f34b1dd9f6775d02fb473/0f09e/custom_field_payment.png 640w","/commerce-php/static/3724567ea01f34b1dd9f6775d02fb473/74b07/custom_field_payment.png 1238w"],sizes:"(max-width: 1238px) 100vw, 1238px",type:"image/png"}),"\n          ",(0,o.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/commerce-php/static/3724567ea01f34b1dd9f6775d02fb473/74b07/custom_field_payment.png",alt:"Custom field in checkout page",title:"Custom field in checkout page",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    "))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Fill the purchase order comment field in the checkout and place an order.")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Verify that the entered value is stored in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"paymentpocomment")," column of the  ",(0,o.mdx)("inlineCode",{parentName:"p"},"sales_order_payment")," table."))))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-tutorials-frontend-custom-checkout-add-payment-field-md-9f057f389b86c016e2cc.js.map