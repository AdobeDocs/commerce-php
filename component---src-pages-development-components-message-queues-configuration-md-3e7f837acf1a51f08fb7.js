"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[97148],{9203:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return o},default:function(){return x}});var t,m=a(87462),i=a(63366),l=(a(15007),a(64983)),d=a(91515),r=["components"],o={},s=(t="InlineAlert",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)}),p={_frontmatter:o},u=d.Z;function x(e){var n=e.components,a=(0,i.Z)(e,r);return(0,l.mdx)(u,(0,m.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"configure-message-queues"},"Configure message queues"),(0,l.mdx)("p",null,"The message queue topology is an Adobe Commerce and Magento Open Source feature. You can also add it to existing modules."),(0,l.mdx)("p",null,"Configuring the message queue topology involves creating and modifying the following configuration files in the ",(0,l.mdx)("inlineCode",{parentName:"p"},"<module>/etc")," directory:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#communicationxml"},(0,l.mdx)("inlineCode",{parentName:"a"},"communication.xml"))," - Defines aspects of the message queue system that all communication types have in common."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#queue_consumerxml"},(0,l.mdx)("inlineCode",{parentName:"a"},"queue_consumer.xml"))," - Defines the relationship between an existing queue and its consumer."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#queue_topologyxml"},(0,l.mdx)("inlineCode",{parentName:"a"},"queue_topology.xml"))," - Defines the message routing rules and declares queues and exchanges."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#queue_publisherxml"},(0,l.mdx)("inlineCode",{parentName:"a"},"queue_publisher.xml"))," - Defines the exchange where a topic is published.")),(0,l.mdx)("h2",{id:"use-cases"},"Use cases"),(0,l.mdx)("p",null,"Depending on your needs, you may only need to create and configure ",(0,l.mdx)("inlineCode",{parentName:"p"},"communication.xml")," and one or two of these files."),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"If you only want to publish to an existing queue created by a 3rd party system, you will only need the ",(0,l.mdx)("inlineCode",{parentName:"li"},"queue_publisher.xml")," file."),(0,l.mdx)("li",{parentName:"ul"},"If you only want to consume from an existing queue,  you will only need the ",(0,l.mdx)("inlineCode",{parentName:"li"},"queue_consumer.xml")," config file."),(0,l.mdx)("li",{parentName:"ul"},"In cases where you want to configure the local queue and publish to it for 3rd party systems to consume, you will need the ",(0,l.mdx)("inlineCode",{parentName:"li"},"queue_publisher.xml")," and ",(0,l.mdx)("inlineCode",{parentName:"li"},"queue_topology.xml")," files."),(0,l.mdx)("li",{parentName:"ul"},"When you want to configure the local queue and consume messages published by 3rd party system, you will need the ",(0,l.mdx)("inlineCode",{parentName:"li"},"queue_topology.xml")," and ",(0,l.mdx)("inlineCode",{parentName:"li"},"queue_consumer.xml")," files.")),(0,l.mdx)("h2",{id:"communicationxml"},(0,l.mdx)("inlineCode",{parentName:"h2"},"communication.xml")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"<module>/etc/communication.xml")," file defines aspects of the message queue system that all communication types have in common. This release supports AMQP and database connections."),(0,l.mdx)("h3",{id:"example"},"Example"),(0,l.mdx)("p",null,"The following sample defines two synchronous topics. The first topic is for RPC calls. The second uses a custom service interface."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0"?>\n<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Communication/etc/communication.xsd">\n  <topic name="synchronous.rpc.test" request="string" response="string">\n    <handler name="processRpcRequest" type="Magento\\TestModuleSynchronousAmqp\\Model\\RpcRequestHandler" method="process"/>\n  </topic>\n  <topic name="magento.testModuleSynchronousAmqp.api.serviceInterface.execute" schema="Magento\\TestModuleSynchronousAmqp\\Api\\ServiceInterface::execute">\n    <handler name="processRemoteRequest" type="Magento\\TestModuleSynchronousAmqp\\Model\\RpcRequestHandler" method="process"/>\n  </topic>\n</config>\n')),(0,l.mdx)("h4",{id:"topic-element"},"topic element"),(0,l.mdx)("p",null,"Topic configuration is flexible in that you can switch the transport layer for topics at deployment time. These values can be overwritten in the ",(0,l.mdx)("inlineCode",{parentName:"p"},"env.php")," file."),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"name")," parameter is required. The topic definition must include either a ",(0,l.mdx)("inlineCode",{parentName:"p"},"request")," or a ",(0,l.mdx)("inlineCode",{parentName:"p"},"schema"),". Use ",(0,l.mdx)("inlineCode",{parentName:"p"},"schema")," if you want to implement a custom service interface.  Otherwise, specify ",(0,l.mdx)("inlineCode",{parentName:"p"},"request"),". If ",(0,l.mdx)("inlineCode",{parentName:"p"},"request")," is specified, then also specify ",(0,l.mdx)("inlineCode",{parentName:"p"},"response")," if the topic is synchronous."),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Parameter"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"name"),(0,l.mdx)("td",{parentName:"tr",align:null},"A string that uniquely identifies the topic. A topic name should be a series of strings that are separated by periods. The leftmost string should be the most general, and each string afterward should narrow the scope. For example, to describe actions for tending to pets, you might create names such as ",(0,l.mdx)("inlineCode",{parentName:"td"},"cat.white.feed")," and ",(0,l.mdx)("inlineCode",{parentName:"td"},"dog.retriever.walk"),". Wildcards are not supported in the ",(0,l.mdx)("inlineCode",{parentName:"td"},"communication.xml")," file.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"request"),(0,l.mdx)("td",{parentName:"tr",align:null},"Specifies the data type of the topic.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"response"),(0,l.mdx)("td",{parentName:"tr",align:null},"Specifies the format of the response. This parameter is required if you are defining a synchronous topic. Omit this parameter if you are defining an asynchronous topic.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"schema"),(0,l.mdx)("td",{parentName:"tr",align:null},"The interface that describes the structure of the message. The format must be  ",(0,l.mdx)("inlineCode",{parentName:"td"},"<module>\\Api\\<ServiceName>::<methodName>"),".")))),(0,l.mdx)("h4",{id:"handler-element"},"handler element"),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"handler")," element specifies the class where the logic for handling messages exists and the method it executes."),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Parameter"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"name"),(0,l.mdx)("td",{parentName:"tr",align:null},"A string that uniquely defines the handler. The name can be derived from the topic name if the handler is specific to the topic. If the handler provides more generic capabilities, name the handler so that it describes those capabilities.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"type"),(0,l.mdx)("td",{parentName:"tr",align:null},"The class or interface that defines the handler.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"method"),(0,l.mdx)("td",{parentName:"tr",align:null},"The method this handler executes.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"disabled"),(0,l.mdx)("td",{parentName:"tr",align:null},"Determines whether this handler is disabled. The default value is ",(0,l.mdx)("inlineCode",{parentName:"td"},"false"),".")))),(0,l.mdx)("h2",{id:"queue_consumerxml"},(0,l.mdx)("inlineCode",{parentName:"h2"},"queue_consumer.xml")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"queue_consumer.xml")," file contains one or more ",(0,l.mdx)("inlineCode",{parentName:"p"},"consumer")," elements:"),(0,l.mdx)("h3",{id:"example-1"},"Example"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0"?>\n<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework-message-queue:etc/consumer.xsd">\n    <consumer name="basic.consumer" queue="basic.consumer.queue" handler="LoggerClass::log"/>\n    <consumer name="synchronous.rpc.test" queue="synchronous.rpc.test.queue" handler="LoggerClass::log"/>\n    <consumer name="rpc.test" queue="queue.for.rpc.test.unused.queue" consumerInstance="Magento\\Framework\\MessageQueue\\BatchConsumer" connection="amqp"/>\n    <consumer name="test.product.delete" queue="queue.for.test.product.delete" connection="amqp" handler="Magento\\Queue\\Model\\ProductDeleteConsumer::processMessage" maxMessages="200" maxIdleTime="180" sleep="60" onlySpawnWhenMessageAvailable="0"/>\n</config>\n')),(0,l.mdx)("h4",{id:"consumer-element"},(0,l.mdx)("inlineCode",{parentName:"h4"},"consumer")," element"),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Attribute"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"name (required)"),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of the consumer.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"queue (required)"),(0,l.mdx)("td",{parentName:"tr",align:null},"Defines the queue name to send the message to.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"handler"),(0,l.mdx)("td",{parentName:"tr",align:null},"Specifies the class and method that processes the message. The value must be specified in the format ",(0,l.mdx)("inlineCode",{parentName:"td"},"<Vendor>\\Module\\<ServiceName>::<methodName>"),".")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"consumerInstance"),(0,l.mdx)("td",{parentName:"tr",align:null},"The class name that consumes the message. Default value: ",(0,l.mdx)("inlineCode",{parentName:"td"},"Magento\\Framework\\MessageQueue\\Consumer"),".")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"connection"),(0,l.mdx)("td",{parentName:"tr",align:null},"Connection is defined dynamically based on deployment configuration of message queue in ",(0,l.mdx)("inlineCode",{parentName:"td"},"env.php"),". If AMQP is configured in deployment configuration, AMQP connection is used. Otherwise, db connection is used. If you still want to specify connection type for consumer, keep in mind that for AMQP connections, the connection name must match the ",(0,l.mdx)("inlineCode",{parentName:"td"},"connection")," attribute in the ",(0,l.mdx)("inlineCode",{parentName:"td"},"queue_topology.xml")," file. Otherwise, the connection name must be ",(0,l.mdx)("inlineCode",{parentName:"td"},"db"),".")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"maxMessages"),(0,l.mdx)("td",{parentName:"tr",align:null},"Specifies the maximum number of messages to consume.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"maxIdleTime"),(0,l.mdx)("td",{parentName:"tr",align:null},"Defines the maximum waiting time in seconds for a new message from the queue. If no message was handled within this period of time, the consumer exits. Default value: ",(0,l.mdx)("inlineCode",{parentName:"td"},"null"))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"sleep"),(0,l.mdx)("td",{parentName:"tr",align:null},"Specifies time in seconds to sleep before checking if a new message is available in the queue. Default value is ",(0,l.mdx)("inlineCode",{parentName:"td"},"null")," which equals to 1 second.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"onlySpawnWhenMessageAvailable"),(0,l.mdx)("td",{parentName:"tr",align:null},"Boolean value (",(0,l.mdx)("inlineCode",{parentName:"td"},"1")," or ",(0,l.mdx)("inlineCode",{parentName:"td"},"0")," only) that identifies whether a consumer should be spawned only if there is available message in the related queue. Default value: ",(0,l.mdx)("inlineCode",{parentName:"td"},"null"))))),(0,l.mdx)(s,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"maxIdleTime")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"sleep")," attributes will be handled only by consumers that were fired with a defined ",(0,l.mdx)("inlineCode",{parentName:"p"},"maxMessages")," parameter. The ",(0,l.mdx)("inlineCode",{parentName:"p"},"onlySpawnWhenMessageAvailable")," attribute is only checked and validated by the ",(0,l.mdx)("inlineCode",{parentName:"p"},"\\Magento\\MessageQueue\\Model\\Cron\\ConsumersRunner")," class that runs consumer processes with cron."),(0,l.mdx)("p",null,"It is possible to set ",(0,l.mdx)("inlineCode",{parentName:"p"},"onlySpawnWhenMessageAvailable")," globally by setting ",(0,l.mdx)("inlineCode",{parentName:"p"},"queue/only_spawn_when_message_available")," equal to ",(0,l.mdx)("inlineCode",{parentName:"p"},"0")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"1")," in ",(0,l.mdx)("inlineCode",{parentName:"p"},"app/etc/env.php"),". By default, the global value of ",(0,l.mdx)("inlineCode",{parentName:"p"},"only_spawn_when_message_available")," for all consumers is ",(0,l.mdx)("inlineCode",{parentName:"p"},"1"),".\nThe ",(0,l.mdx)("inlineCode",{parentName:"p"},"onlySpawnWhenMessageAvailable")," consumer attribute has higher priority than the global ",(0,l.mdx)("inlineCode",{parentName:"p"},"queue/only_spawn_when_message_available")," setting in ",(0,l.mdx)("inlineCode",{parentName:"p"},"app/etc/env.php"),". Therefore, it is possible to overwrite the global ",(0,l.mdx)("inlineCode",{parentName:"p"},"only_spawn_when_message_available")," value by setting ",(0,l.mdx)("inlineCode",{parentName:"p"},"onlySpawnWhenMessageAvailable")," equal to ",(0,l.mdx)("inlineCode",{parentName:"p"},"0")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"1")," for each consumer in ",(0,l.mdx)("inlineCode",{parentName:"p"},"queue_consumer.xml"),"."),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"onlySpawnWhenMessageAvailable")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"maxIdleTime")," attributes may be combined if a specific consumer needs to run infrequently. The consumer will only spawn when it is needed, and it terminates itself if it is inactive for a certain period.\nIt is also possible to combine the global ",(0,l.mdx)("inlineCode",{parentName:"p"},"queue/only_spawn_when_message_available")," setting in ",(0,l.mdx)("inlineCode",{parentName:"p"},"app/etc/env.php")," with the ",(0,l.mdx)("inlineCode",{parentName:"p"},"queue/consumers-wait-for-messages")," setting. That means that the consumer will run only when there is an available message in the queue, and it will be terminated when there are no more messages to process. This combination of settings is recommended to save server resources such as CPU usage."),(0,l.mdx)("p",null,"The ",(0,l.mdx)("a",{parentName:"p",href:"https://devdocs.magento.com/guides/v2.4/install-gde/install/cli/install-cli-subcommands-consumers.html"},(0,l.mdx)("inlineCode",{parentName:"a"},"consumers-wait-for-messages"))," option works similar to ",(0,l.mdx)("inlineCode",{parentName:"p"},"onlySpawnWhenMessageAvailable"),". When it is set to ",(0,l.mdx)("inlineCode",{parentName:"p"},"false"),", the consumer processes all messages and exits if there are no available messages in the queue.\nThe problem is that every time the cron job ",(0,l.mdx)("inlineCode",{parentName:"p"},"cron_consumers_runner")," runs, it spawns a new consumer process, the consumer checks if messages are available, and it terminates itself if there are no messages.\nMeanwhile, the ",(0,l.mdx)("inlineCode",{parentName:"p"},"onlySpawnWhenMessageAvailable")," attribute first checks if there are available messages, and it spawns a new consumer process only if there are messages. It means that it does not spawn unneeded processes which take up memory, live for a very short period, and then disappear."),(0,l.mdx)(s,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,l.mdx)("p",null,"The ",(0,l.mdx)("a",{parentName:"p",href:"https://devdocs.magento.com/guides/v2.4/install-gde/install/cli/install-cli-subcommands-consumers.html"},(0,l.mdx)("inlineCode",{parentName:"a"},"consumers-wait-for-messages"))," option is a global option and cannot be configured separately for each consumer, such as the ",(0,l.mdx)("inlineCode",{parentName:"p"},"onlySpawnWhenMessageAvailable")," option."),(0,l.mdx)("h4",{id:"handler-element-1"},(0,l.mdx)("inlineCode",{parentName:"h4"},"handler")," element"),(0,l.mdx)("p",null,"A handler is a class and method that processes a message. The application has two ways to define a handler for messages."),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"In the ",(0,l.mdx)("inlineCode",{parentName:"li"},"<handler>")," element of the module's ",(0,l.mdx)("inlineCode",{parentName:"li"},"communication.xml")," file"),(0,l.mdx)("li",{parentName:"ul"},"In the ",(0,l.mdx)("inlineCode",{parentName:"li"},"handler")," attribute of the module's ",(0,l.mdx)("inlineCode",{parentName:"li"},"queue_consumer.xml")," file")),(0,l.mdx)("p",null,"The following conditions determine how these handlers are processed:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"If the consumer in ",(0,l.mdx)("inlineCode",{parentName:"li"},"queue_consumer.xml")," does not have a ",(0,l.mdx)("inlineCode",{parentName:"li"},"consumerInstance")," defined, then the system uses the default consumer: ",(0,l.mdx)("inlineCode",{parentName:"li"},"Magento\\Framework\\MessageQueue\\Consumer"),". In this case, if the ",(0,l.mdx)("inlineCode",{parentName:"li"},"<consumer>")," element contains the ",(0,l.mdx)("inlineCode",{parentName:"li"},"handler")," attribute, then it will be used, and the ",(0,l.mdx)("inlineCode",{parentName:"li"},"<handler>")," element in ",(0,l.mdx)("inlineCode",{parentName:"li"},"communication.xml")," will be ignored."),(0,l.mdx)("li",{parentName:"ul"},"If the consumer in ",(0,l.mdx)("inlineCode",{parentName:"li"},"queue_consumer.xml")," has a ",(0,l.mdx)("inlineCode",{parentName:"li"},"consumerInstance")," defined, then the specific consumer implementation defines how the ",(0,l.mdx)("inlineCode",{parentName:"li"},"handler")," is used.")),(0,l.mdx)("p",null,"The application provides these consumers out-of-the-box:"),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Class name"),(0,l.mdx)("th",{parentName:"tr",align:null},"Handler in ",(0,l.mdx)("inlineCode",{parentName:"th"},"communication.xml")," will be executed?"),(0,l.mdx)("th",{parentName:"tr",align:null},"Handler in ",(0,l.mdx)("inlineCode",{parentName:"th"},"queue_consumer.xml")," will be executed?"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"Magento\\Framework\\MessageQueue\\Consumer")),(0,l.mdx)("td",{parentName:"tr",align:null},"Only if not defined in ",(0,l.mdx)("inlineCode",{parentName:"td"},"queue_consumer.xml")),(0,l.mdx)("td",{parentName:"tr",align:null},"Yes, if exists")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"Magento\\Framework\\MessageQueue\\BatchConsumer")),(0,l.mdx)("td",{parentName:"tr",align:null},"Only if not defined in ",(0,l.mdx)("inlineCode",{parentName:"td"},"queue_consumer.xml")),(0,l.mdx)("td",{parentName:"tr",align:null},"Yes, if exists")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"Magento\\AsynchronousOperations\\Model\\MassConsumer")),(0,l.mdx)("td",{parentName:"tr",align:null},"Yes, if exists"),(0,l.mdx)("td",{parentName:"tr",align:null},"Yes, if exists")))),(0,l.mdx)("h2",{id:"queue_topologyxml"},(0,l.mdx)("inlineCode",{parentName:"h2"},"queue_topology.xml")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"queue_topology.xml")," file defines the message routing rules and declares queues and exchanges. It contains the following elements:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"exchange")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"exchange/binding")," (optional)"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"exchange/arguments")," (optional)"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"exchange/binding/arguments")," (optional)")),(0,l.mdx)("h3",{id:"example-2"},"Example"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0"?>\n<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework-message-queue:etc/topology.xsd">\n  <exchange name="magento-topic-based-exchange1">\n    <binding id="topicBasedRouting2" topic="anotherTopic" destination="topic-queue1">\n        <arguments>\n            \x3c!--Not part of our use case, but will be processed if someone specifies them--\x3e\n            <argument name="argument1" xsi:type="string">value</argument>\n        </arguments>\n    </binding>\n    <arguments>\n        <argument name="alternate-exchange" xsi:type="string">magento-log-exchange</argument>\n    </arguments>\n  </exchange>\n  <exchange name="magento-topic-based-exchange2" type="topic" connection="db">\n    <binding id="topicBasedRouting1" topic="#" destinationType="queue" destination="topic-queue2"/>\n    <arguments>\n      <argument name="alternate-exchange" xsi:type="string">magento-log-exchange</argument>\n    </arguments>\n  </exchange>\n</config>\n')),(0,l.mdx)("h4",{id:"exchange-element"},(0,l.mdx)("inlineCode",{parentName:"h4"},"exchange")," element"),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Attribute"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"name (required)"),(0,l.mdx)("td",{parentName:"tr",align:null},"A unique ID for the exchange.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"type"),(0,l.mdx)("td",{parentName:"tr",align:null},"Specifies the type of exchange. The default value is ",(0,l.mdx)("inlineCode",{parentName:"td"},"topic")," because only ",(0,l.mdx)("inlineCode",{parentName:"td"},"topic")," type is supported.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"connection  (required)"),(0,l.mdx)("td",{parentName:"tr",align:null},"Connection is defined dynamically based on deployment configuration of message queue in ",(0,l.mdx)("inlineCode",{parentName:"td"},"env.php"),". If AMQP is configured in deployment configuration, AMQP connection is used. Otherwise, db connection is used. If you still want to specify connection, the connection name must be ",(0,l.mdx)("inlineCode",{parentName:"td"},"amqp")," for AMQP. For MySQL connections, the connection name must be ",(0,l.mdx)("inlineCode",{parentName:"td"},"db"),".")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"durable"),(0,l.mdx)("td",{parentName:"tr",align:null},"Boolean value indicating whether the exchange is persistent. Non-durable exchanges are purged when the server restarts. The default is ",(0,l.mdx)("inlineCode",{parentName:"td"},"true"),".")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"autoDelete"),(0,l.mdx)("td",{parentName:"tr",align:null},"Boolean value indicating whether the exchange is deleted when all queues have finished using it. The default is ",(0,l.mdx)("inlineCode",{parentName:"td"},"false"),".")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"internal"),(0,l.mdx)("td",{parentName:"tr",align:null},"Boolean value. If set to true, the exchange may not be used directly by publishers, but only when bound to other exchanges. The default is ",(0,l.mdx)("inlineCode",{parentName:"td"},"false"),".")))),(0,l.mdx)("h4",{id:"binding-element"},(0,l.mdx)("inlineCode",{parentName:"h4"},"binding")," element"),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"binding")," element is a subnode of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"exchange")," element."),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Attribute"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"id (required)"),(0,l.mdx)("td",{parentName:"tr",align:null},"A unique ID for this binding.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"topic (required)"),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of a topic. You can specify an asterisk (*) or pound sign (#) as wildcards. These are described below the table.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"destinationType"),(0,l.mdx)("td",{parentName:"tr",align:null},"The default value is ",(0,l.mdx)("inlineCode",{parentName:"td"},"queue"),".")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"destination (required)"),(0,l.mdx)("td",{parentName:"tr",align:null},"Identifies the name of a queue.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"disabled"),(0,l.mdx)("td",{parentName:"tr",align:null},"Determines whether this binding is disabled. The default value is ",(0,l.mdx)("inlineCode",{parentName:"td"},"false"),".")))),(0,l.mdx)("p",null,"Example topic names that include wildcards:"),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Pattern"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"),(0,l.mdx)("th",{parentName:"tr",align:null},"Example matching topics"),(0,l.mdx)("th",{parentName:"tr",align:null},"Example non-matching topics"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"*.*.*")),(0,l.mdx)("td",{parentName:"tr",align:null},"Matches any topic that contains exactly two periods."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic.createOrder.success"),", ",(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic.updatePrice.item1")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic.createOrder"),", ",(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic.createOrder.success.true"))),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"#")),(0,l.mdx)("td",{parentName:"tr",align:null},"Matches any topic name."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic"),", ",(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic.createOrder.success"),", ",(0,l.mdx)("inlineCode",{parentName:"td"},"this.is.a.long.topic.name")),(0,l.mdx)("td",{parentName:"tr",align:null},"Not applicable")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic.#")),(0,l.mdx)("td",{parentName:"tr",align:null},"Matches any topic name that begins with ",(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic")," and has a period afterward."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic.success"),", ",(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic.createOrder.error")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"new.mytopic.success"),",")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"*.Order.#")),(0,l.mdx)("td",{parentName:"tr",align:null},"There must be one string before ",(0,l.mdx)("strong",{parentName:"td"},".Order"),". There can be any number of strings (including 0) after that."),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic.Order"),", ",(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic.Order.Create"),", ",(0,l.mdx)("inlineCode",{parentName:"td"},"newtopic.Order.delete.success")),(0,l.mdx)("td",{parentName:"tr",align:null},(0,l.mdx)("inlineCode",{parentName:"td"},"mytopic.Sales.Order.Create"))))),(0,l.mdx)("h4",{id:"arguments-element"},(0,l.mdx)("inlineCode",{parentName:"h4"},"arguments")," element"),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"arguments")," element is an optional element that contains one or more ",(0,l.mdx)("inlineCode",{parentName:"p"},"argument")," elements. These arguments define key/value pairs that are passed to the broker for processing."),(0,l.mdx)("p",null,"Each ",(0,l.mdx)("inlineCode",{parentName:"p"},"argument")," definition must have the following parameters:"),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Attribute"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"name"),(0,l.mdx)("td",{parentName:"tr",align:null},"The parameter name")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"type"),(0,l.mdx)("td",{parentName:"tr",align:null},"The data type of the value")))),(0,l.mdx)("p",null,"The following illustrates an ",(0,l.mdx)("inlineCode",{parentName:"p"},"arguments")," block:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-xml"},'<arguments>\n    <argument name="warehouseId" xsi:type="int">1</argument>\n    <argument name="carrierName" xsi:type="string">USPS</argument>\n</arguments>\n')),(0,l.mdx)("h2",{id:"queue_publisherxml"},(0,l.mdx)("inlineCode",{parentName:"h2"},"queue_publisher.xml")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"queue_publisher.xml")," file defines which connection and exchange to use to publish messages for a specific topic. It contains the following elements:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"publisher"),(0,l.mdx)("li",{parentName:"ul"},"publisher/connection")),(0,l.mdx)("h3",{id:"example-3"},"Example"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0"?>\n<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework-message-queue:etc/publisher.xsd">\n    <publisher topic="magento.testModuleSynchronousAmqp.api.serviceInterface.execute" disabled="true" />\n    <publisher topic="asynchronous.test">\n        <connection name="amqp" exchange="magento" disabled="false"/>\n        <connection name="db" exchange="exch1" disabled="true"/>\n    </publisher>\n</config>\n')),(0,l.mdx)("h4",{id:"publisher-element"},(0,l.mdx)("inlineCode",{parentName:"h4"},"publisher")," element"),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Attribute"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"topic (required)"),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of the topic.")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"disabled"),(0,l.mdx)("td",{parentName:"tr",align:null},"Determines whether this queue is disabled. The default value is ",(0,l.mdx)("inlineCode",{parentName:"td"},"false"),".")))),(0,l.mdx)("h4",{id:"connection-element"},(0,l.mdx)("inlineCode",{parentName:"h4"},"connection")," element"),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"connection")," element is a subnode of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"publisher")," element. There must not be more than one enabled active connection to a publisher defined at a time. If you omit the ",(0,l.mdx)("inlineCode",{parentName:"p"},"connection")," element, connection will be defined dynamically based on deployment configuration of message queue in ",(0,l.mdx)("inlineCode",{parentName:"p"},"env.php")," and exchange ",(0,l.mdx)("inlineCode",{parentName:"p"},"magento")," will be used. If AMQP is configured in deployment configuration, AMQP connection is used. Otherwise, db connection is used."),(0,l.mdx)("table",null,(0,l.mdx)("thead",{parentName:"table"},(0,l.mdx)("tr",{parentName:"thead"},(0,l.mdx)("th",{parentName:"tr",align:null},"Attribute"),(0,l.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,l.mdx)("tbody",{parentName:"table"},(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"name"),(0,l.mdx)("td",{parentName:"tr",align:null},"Connection name is defined dynamically based on deployment configuration of message queue in ",(0,l.mdx)("inlineCode",{parentName:"td"},"env.php"),". If you still want to specify connection type for publisher, keep in mind that for AMQP connections, the connection name must match the ",(0,l.mdx)("inlineCode",{parentName:"td"},"connection")," attribute in the ",(0,l.mdx)("inlineCode",{parentName:"td"},"queue_topology.xml")," file. Otherwise, the connection name must be ",(0,l.mdx)("inlineCode",{parentName:"td"},"db"),".")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"exchange"),(0,l.mdx)("td",{parentName:"tr",align:null},"The name of the exchange to publish to. The default system exchange name is ",(0,l.mdx)("inlineCode",{parentName:"td"},"magento"),".")),(0,l.mdx)("tr",{parentName:"tbody"},(0,l.mdx)("td",{parentName:"tr",align:null},"disabled"),(0,l.mdx)("td",{parentName:"tr",align:null},"Determines whether this queue is disabled. The default value is ",(0,l.mdx)("inlineCode",{parentName:"td"},"false"),".")))),(0,l.mdx)(s,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,l.mdx)("p",null,"You cannot enable more than one ",(0,l.mdx)("inlineCode",{parentName:"p"},"publisher")," for each ",(0,l.mdx)("inlineCode",{parentName:"p"},"topic"),"."),(0,l.mdx)("h2",{id:"updating-queuexml"},"Updating ",(0,l.mdx)("inlineCode",{parentName:"h2"},"queue.xml")),(0,l.mdx)("p",null,"See ",(0,l.mdx)("a",{parentName:"p",href:"migration.md"},"Migrate message queue configuration")," for information about upgrading from Adobe Commerce and Magento Open Source 2.0 or 2.1."))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-development-components-message-queues-configuration-md-3e7f837acf1a51f08fb7.js.map