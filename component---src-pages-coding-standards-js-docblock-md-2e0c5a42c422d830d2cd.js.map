{"version":3,"file":"component---src-pages-coding-standards-js-docblock-md-2e0c5a42c422d830d2cd.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/coding-standards/js-docblock.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"javascript-docblock-standard\"\n    }}>{`JavaScript DocBlock standard`}</h1>\n    <p>{`To add `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/javascript\"\n      }}>{`JavaScript`}</a>{` code inline documentation, follow these guidelines. Some parts of the code may not comply with this standard, but we are working to gradually improve this. Following these standard is optional for third-party developers, but will help to create consistent, clean, and easy to read inline documentation.\nThis standard are a subset of `}<a parentName=\"p\" {...{\n        \"href\": \"https://google.github.io/styleguide/javascriptguide.xml\"\n      }}>{`Google JavaScript Style Guide`}</a>{` regulations.`}</p>\n    <p>{`Use `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.ietf.org/rfc/rfc2119.txt\"\n      }}>{`RFC 2119`}</a>{` to interpret the \"must,\" \"must not,\" \"required,\" \"shall,\" \"shall not,\" \"should,\" \"should not,\" \"recommended,\" \"may,\" and \"optional\" keywords.`}</p>\n    <h2 {...{\n      \"id\": \"use-jsdoc\"\n    }}>{`Use JSDoc`}</h2>\n    <p>{`Document all files, classes, methods, and properties with JSDoc comments.`}</p>\n    <p>{`Inline comments should be of the \"//\" type.`}</p>\n    <p>{`It is recommended to avoid sentence fragments in documentation blocks. Use sentence-style capitalization and put a period at the end. Sentence fragmentation is acceptable in inline commentaries to keep it short.`}</p>\n    <h3 {...{\n      \"id\": \"comment-syntax\"\n    }}>{`Comment syntax`}</h3>\n    <p>{`JSDoc comments requirements:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A JSDoc comment should begin with a slash (/) and two asterisks (*).`}</li>\n      <li parentName=\"ul\">{`Inline tags should be enclosed in braces: `}<inlineCode parentName=\"li\">{`{ @code this }`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@desc`}</inlineCode>{` Block tags should always start on their own line.`}</li>\n    </ul>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n* A testJSDoc comment should begin with a slash and 2 asterisks.\n* Inline tags should be enclosed in braces like {@code this}.\n* @desc Block tags should always start on their own line.\n*/\n`}</code></pre>\n    <p>{`Many tools extract `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/metadata\"\n      }}>{`metadata`}</a>{` from JSDoc comments to validate and optimize the code.`}</p>\n    <h3 {...{\n      \"id\": \"jsdoc-indentation\"\n    }}>{`JSDoc indentation`}</h3>\n    <p>{`If you have to line break a block tag, you should treat this as breaking a code statement and indent it four spaces.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Illustrates line wrapping for long param/return descriptions.\n *\n * @param {string} foo This is a param with a description too long to fit in\n *     one line.\n * @return {number} This returns something that has a description too long to\n *     fit in one line.\n */\nproject.MyClass.prototype.method = function(foo) {\n    return 5;\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"class-comments\"\n    }}>{`Class comments`}</h3>\n    <p>{`Classes must be documented with a description, and appropriate type tags.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Class making something fun and easy.\n * @param {string} arg1 An argument that makes this more interesting.\n * @param {Array.<number>} arg2 List of numbers to be processed.\n * @constructor\n */\nproject.MyClass = function(arg1, arg2) {\n    // ...\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"method-and-function-comments\"\n    }}>{`Method and function comments`}</h3>\n    <p>{`A description must be provided along with parameters. Method descriptions should start with a sentence written in the third person declarative voice.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Operates on an instance of MyClass and returns something.\n *\n * @param {project.MyClass} obj Instance of MyClass which leads to a long\n *     comment that needs to be wrapped to two lines.\n * @return {boolean} Whether something occurred.\n */\nfunction someMethod(obj) {\n    // ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"property-comments\"\n    }}>{`Property comments`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Maximum number of things per pane.\n *\n * @type {number}\n */\nproject.MyClass.prototype.someProperty = 4;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"jsdoc-tag-reference\"\n    }}>{`JSDoc tag reference`}</h3>\n    <h4 {...{\n      \"id\": \"const\"\n    }}>{`@const`}</h4>\n    <p>{`Marks a variable read-only and suitable for inlining. Generates warnings if it is rewritten. Constants should also be ALL_CAPS, but the annotation should help eliminate reliance on the naming convention.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/** @const */ var DEFAULT_TIMEZONE = 'GMT';\n\n/** @const */ MyClass.DEFAULT_TIMEZONE = 'GMT';\n\n/**\n * My namespace's default timezone.\n *\n * @const\n * @type {string}\n */\nmynamespace.DEFAULT_TIMEZONE = 'GMT';\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"extends\"\n    }}>{`@extends`}</h4>\n    <p>{`Used with `}<inlineCode parentName=\"p\">{`@constructor`}</inlineCode>{` to indicate that a class inherits from another class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Immutable empty node list.\n *\n * @constructor\n * @extends project.MyClass.BasicNodeList\n */\nproject.MyClass.EmptyNodeList = function() {\n    // ...\n};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"interface\"\n    }}>{`@interface`}</h4>\n    <p>{`Used to indicate that the function defines an interface.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * A shape.\n *\n * @interface\n */\nfunction Shape() {};\nShape.prototype.draw = function() {};\n\n/**\n * A polygon.\n *\n * @interface\n * @extends {Shape}\n */\nfunction Polygon() {};\nPolygon.prototype.getSides = function() {};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"implements\"\n    }}>{`@implements`}</h4>\n    <p>{`Used with `}<inlineCode parentName=\"p\">{`@constructor`}</inlineCode>{` to indicate that a class implements an interface.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * A shape.\n *\n * @interface\n */\nfunction Shape() {};\nShape.prototype.draw = function() {};\n\n/**\n * @constructor\n * @implements {Shape}\n */\nfunction Square() {};\nSquare.prototype.draw = function() {\n    // ...\n};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"lends\"\n    }}>{`@lends`}</h4>\n    <p>{`Indicates that the keys of an object literal should be treated as properties of some other object. This annotation should only appear on object literals.`}</p>\n    <p>{`Please note that the name in braces is not a type name like in other annotations. It's an object name. It names the object on which the properties are \"lent\". For example, `}<inlineCode parentName=\"p\">{`@type {Foo}`}</inlineCode>{` means \"an instance of Foo,\" but `}<inlineCode parentName=\"p\">{`@lends {Foo}`}</inlineCode>{` means \"the constructor Foo\".`}</p>\n    <p>{`Please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://code.google.com/p/jsdoc-toolkit/wiki/TagLends\"\n      }}>{`JSDoc Toolkit`}</a>{` for more information about this annotation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`project.MyClass.extend(\n    Button.prototype,\n    /** @lends {Button.prototype} */ {\n        isButton: function() {return true;}\n    }\n);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"override\"\n    }}>{`@override`}</h4>\n    <p>{`Indicates that a method or property of a subclass intentionally hides a method or property of the superclass. If no other documentation is included, the method or property also inherits documentation from its superclass.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * @return {string} Human-readable representation of project.SubClass.\n * @override\n */\nproject.SubClass.prototype.toString() {\n    // ...\n};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"param\"\n    }}>{`@param`}</h4>\n    <p>{`Used with method, function and constructor calls to document the arguments of a function.`}</p>\n    <p>{`Type names must be enclosed in curly braces. If the type is omitted, the compiler will not type-check the parameter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Queries a Storage for items.\n *\n * @param {number} groupNum Subgroup id to query.\n * @param {string|number|null} term An itemName,\n *     or itemId, or null to search everything.\n */\n[namespace](https://glossary.magento.com/namespace).Storage.prototype.query = function(groupNum, term) {\n   // ...\n};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"return\"\n    }}>{`@return`}</h4>\n    <p>{`Used with method and function calls to document the return type. When writing descriptions for boolean parameters, prefer \"Whether the component is visible\" to \"True if the component is visible, false otherwise\". If there is no return value, do not use an `}<inlineCode parentName=\"p\">{`@return`}</inlineCode>{` tag.`}</p>\n    <p>{`Type names must be enclosed in curly braces. If the type is omitted, the compiler will not type-check the return value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * @return {string} The hex ID of the last item.\n */\nnamespace.Storage.prototype.getLastId = function() {\n    // ...\n    return id;\n};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"this\"\n    }}>{`@this`}</h4>\n    <p>{`The type of the object in whose context a particular method is called. Required when the this `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/keyword\"\n      }}>{`keyword`}</a>{` is referenced from a function that is not a prototype method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`pinto.chat.RosterWidget.extern('getRosterElement',\n    /**\n     * Returns the roster widget element.\n     *\n     * @this pinto.chat.RosterWidget\n     * @return {Element}\n     */\n    function() {\n        return this._getWrappedComponent().getElement();\n    }\n);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"type\"\n    }}>{`@type`}</h4>\n    <p>{`Identifies the type of a variable, property, or expression.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * The message hex ID.\n *\n * @type {string}\n */\nvar hexId = hexId;\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typedef\"\n    }}>{`@typedef`}</h4>\n    <p>{`This annotation can be used to declare an alias of a more complex type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/** @typedef {(string|number)} */\nnamespace.NumberLike;\n\n/** @param {namespace.NumberLike} x A number or a string. */\nnamespace.readNumber = function(x) {\n    // ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"javascript-types\"\n    }}>{`JavaScript types`}</h3>\n    <h4 {...{\n      \"id\": \"number\"\n    }}>{`number`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`1\n1.0\n-5\n1e5\nMath.PI\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"number-1\"\n    }}>{`Number`}</h4>\n    <p>{`Number object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`new Number(true)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"string\"\n    }}>{`string`}</h4>\n    <p>{`String value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`'Hello'\n\"World\"\nString(42)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"string-1\"\n    }}>{`String`}</h4>\n    <p>{`String object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`new String('Hello')\nnew String(42)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"boolean\"\n    }}>{`boolean`}</h4>\n    <p>{`Boolean value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`true\nfalse\nBoolean(0)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"boolean-1\"\n    }}>{`Boolean`}</h4>\n    <p>{`Boolean object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`new Boolean(true)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"regexp\"\n    }}>{`RegExp`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`new RegExp('hello')\n/world/g\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"date\"\n    }}>{`Date`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`new Date\nnew Date()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"null\"\n    }}>{`null`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`null\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"undefined\"\n    }}>{`undefined`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`undefined\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"void\"\n    }}>{`void`}</h4>\n    <p>{`No return value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function f() {\n   return;\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"array\"\n    }}>{`Array`}</h4>\n    <p>{`Untyped array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`['foo', 0.3, null]\n[]\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"arraynumber\"\n    }}>{`Array.`}{`<`}{`number`}{`>`}</h4>\n    <p>{`An array of numbers.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`[11, 22, 33]\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"arrayarraystring\"\n    }}>{`Array.`}{`<`}{`Array.`}{`<`}{`string`}{`>`}{`>`}</h4>\n    <p>{`Array of arrays of strings.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`[['one', 'two', 'three'], ['foo', 'bar']]\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"object\"\n    }}>{`Object`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{}\n{foo: 'abc', bar: 123, baz: null}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objectstring\"\n    }}>{`Object.`}{`<`}{`string`}{`>`}</h4>\n    <p>{`An object. In the object, the values are strings.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{'foo': 'bar'}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objectnumberstring\"\n    }}>{`Object.`}{`<`}{`number,string`}{`>`}</h4>\n    <p>{`An object. In the object, the keys are numbers and the values are strings. Note that in JavaScript, the keys are always implicitly converted to strings, so obj`}{`['1']`}{` == obj`}{`[1]`}{`. So the key will always be a string in for...in loops. But the compiler will verify the type if the key when indexing into the object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`var obj = {};\nobj[1] = 'bar';\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"function\"\n    }}>{`Function`}</h4>\n    <p>{`Function object`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function(x, y) {\n   return x * y;\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"functionnumber-number-number\"\n    }}>{`function(number, number): number`}</h4>\n    <p>{`Function value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function(x, y) {\n   return x * y;\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"someclass\"\n    }}>{`SomeClass`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/** @constructor */\nfunction SomeClass() {}\n\nnew SomeClass();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"someinterface\"\n    }}>{`SomeInterface`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/** @interface */\nfunction SomeInterface() {}\n\nSomeInterface.prototype.draw = function() {};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"projectmyclass\"\n    }}>{`project.MyClass`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/** @constructor */\nproject.MyClass = function () {}\n\nnew project.MyClass()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"element\"\n    }}>{`Element`}</h4>\n    <p>{`Elements in the DOM.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`document.createElement('div')\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node\"\n    }}>{`Node`}</h4>\n    <p>{`Node in the DOM.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`document.body.firstChild\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"htmlinputelement\"\n    }}>{`HTMLInputElement`}</h4>\n    <p>{`A specific type of DOM element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`htmlDocument.getElementsByTagName('input')[0]\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"javascript-type-language\"\n    }}>{`JavaScript type language`}</h3>\n    <h4 {...{\n      \"id\": \"type-name\"\n    }}>{`Type name`}</h4>\n    <p>{`Simply the name of a type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{boolean}, {Window}, {namespace.ui.Menu}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"type-application\"\n    }}>{`Type application`}</h4>\n    <p>{`Parametrizes a type, by applying a set of type arguments to that type. The idea is analogous to generics in Java.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// An array of strings.\n{Array. <string>}\n\n// An object. In the object, the keys are strings and the values are numbers.\n{Object. }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"type-union\"\n    }}>{`Type union`}</h4>\n    <p>{`Indicates that a value might have type A OR type B.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// A number or a boolean.\n{(number|boolean)}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Deprecated syntaxes:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{(number,boolean)}, {number|boolean}, {(number||boolean)}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"record-type\"\n    }}>{`Record type`}</h4>\n    <p>{`Indicates that the value has the specified members with the specified types. In this case, `}<inlineCode parentName=\"p\">{`myNum`}</inlineCode>{` with a type `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`myObject`}</inlineCode>{` with any type. Note that the braces are part of the type syntax. For example, to denote an `}<inlineCode parentName=\"p\">{`Array`}</inlineCode>{` of objects that have a `}<inlineCode parentName=\"p\">{`length`}</inlineCode>{` property, you might write `}<inlineCode parentName=\"p\">{`Array.<{length}>`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// An anonymous type with the given type members.\ncodemyNum: number, myObject}}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"nullable-type\"\n    }}>{`Nullable type`}</h4>\n    <p>{`Indicates that a value is type A or `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`. By default, all object types are nullable.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Function types are not nullable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// A number or NULL.\n{?number}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Deprecated syntax:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{number?}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"non-nullable-type\"\n    }}>{`Non-nullable type`}</h4>\n    <p>{`Indicates that a value is type A and not null. By default, all value types (boolean, number, string, and undefined) are not nullable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// An Object, but never the null value.\n{!Object}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Deprecated syntax:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{Object!}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"function-type\"\n    }}>{`Function type`}</h4>\n    <p>{`Specifies a function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// A function that takes two arguments (a string and a boolean), and has an unknown return value.\n{function(string, boolean)}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"function-return-type\"\n    }}>{`Function return type`}</h4>\n    <p>{`Specifies a function return type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// A function that takes no arguments and returns a number.\n{function(): number}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"function-this-type\"\n    }}>{`Function `}<inlineCode parentName=\"h4\">{`this`}</inlineCode>{` type`}</h4>\n    <p>{`Specifies the context type of a function type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// A function that takes one argument (a string), and executes in the context of a namespace.ui.Menu.\n{function(this:namespace.ui.Menu, string)}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"function-new-type\"\n    }}>{`Function `}<inlineCode parentName=\"h4\">{`new`}</inlineCode>{` type`}</h4>\n    <p>{`Specifies the constructed type of a constructor.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// A constructor that takes one argument (a string), and creates a new instance of namespace.ui.Menu when called with the 'new' keyword.\n{function(new:namespace.ui.Menu, string)}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"variable-arguments\"\n    }}>{`Variable arguments`}</h4>\n    <p>{`Specifies variable arguments to a function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// A function that takes one argument (a string), and then a variable number of arguments that must be numbers.\n{function(string, ...[number]): number}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"variable-arguments-in-param-annotations\"\n    }}>{`Variable arguments (in `}<inlineCode parentName=\"h4\">{`@param`}</inlineCode>{` annotations)`}</h4>\n    <p>{`Specifies that the annotated function accepts a variable number of arguments.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// A variable number of arguments to an annotated function.\n@param {...number} var_args\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"functional-optional-arguments\"\n    }}>{`Functional optional arguments`}</h4>\n    <p>{`Specifies optional arguments to a function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// A function that takes one optional, nullable string and one optional number as arguments. The = syntax is only for function type declarations.\n{function(?string=, number=)}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"functional-optional-arguments-in-param-annotations\"\n    }}>{`Functional optional arguments (in `}<inlineCode parentName=\"h4\">{`@param`}</inlineCode>{` annotations)`}</h4>\n    <p>{`Specifies that the annotated function accepts an optional argument.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// An optional parameter of type number.\n@param {number=} opt_argument\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"the-all-type\"\n    }}>{`The ALL type`}</h4>\n    <p>{`Indicates that the variable can take on any type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{*}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"the-unkown-type\"\n    }}>{`The UNKOWN type`}</h4>\n    <p>{`Indicates that the variable can take on any type, and the compiler should not type-check any uses of it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{?}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}