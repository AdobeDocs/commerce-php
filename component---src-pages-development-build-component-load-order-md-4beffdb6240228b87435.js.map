{"version":3,"file":"component---src-pages-development-build-component-load-order-md-4beffdb6240228b87435.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/development/build/component-load-order.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"component-load-order\"\n    }}>{`Component load order`}</h1>\n    <p>{`You may need to specify your component's dependency on other components or files from other components using your component's `}<a parentName=\"p\" {...{\n        \"href\": \"component-name.md#add-a-composerjson-file\"\n      }}>{`composer.json`}</a>{`. Further, you can specify a load order in your component's `}<inlineCode parentName=\"p\">{`module.xml`}</inlineCode>{` file using the `}<inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{` tag to ensure that needed files from other components are already loaded when your component loads.`}</p>\n    <p><inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{` declares the list of components that must be loaded before the current component is loaded. It's used for loading different kind of files: configuration files, view files (including CSS, Less, and template files), or setup classes. Note that `}<inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{` does not affect the loading of regular classes (non-setup classes).\n`}<em parentName=\"p\">{`Setup`}</em>{` classes are classes in the component that create or update `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/database-schema\"\n      }}>{`database schema`}</a>{` or data.`}</p>\n    <p>{`If you know that your component's logic depends on something in another component, then you should add this component to `}<inlineCode parentName=\"p\">{`require`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`module.xml`}</inlineCode>{`.`}</p>\n    <p>{`You can check your module's load order from the `}<inlineCode parentName=\"p\">{`<magento_root>/app/etc/config.php`}</inlineCode>{` file after you've successfully set up Magento. This file is created dynamically at run time during set up.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If you change the component load order using `}<inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{`, you must regenerate the component list in `}<inlineCode parentName=\"p\">{`config.php`}</inlineCode>{`; otherwise, the load order does not take effect. Currently, the only way to do this is to enable the component using `}<a parentName=\"p\" {...{\n        \"href\": \"https://devdocs.magento.com/guides/v2.4/install-gde/install/cli/install-cli-subcommands-enable.html#instgde-cli-subcommands-enable-disable\"\n      }}><inlineCode parentName=\"a\">{`magento module:enable <module-list>`}</inlineCode></a>{`, where `}<inlineCode parentName=\"p\">{`<module-list>`}</inlineCode>{` is the component or components to which you added `}<inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`Assume you have a component that needs a configuration file from another component:`}</p>\n    <p><strong parentName=\"p\">{`Component B`}</strong>{` introduces `}<inlineCode parentName=\"p\">{`gadgetlayout.xml`}</inlineCode>{`, which updates block `}<inlineCode parentName=\"p\">{`gadgetBlock`}</inlineCode>{` from `}<strong parentName=\"p\">{`component A`}</strong>{`. In this case, layout files from `}<strong parentName=\"p\">{`component A`}</strong>{` should be loaded before `}<strong parentName=\"p\">{`component B`}</strong>{`, so you should specify that in `}<strong parentName=\"p\">{`component B's`}</strong>{` `}<inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{` entry in `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/module\"\n      }}>{`module`}</a>{`.xml. In other words, `}<strong parentName=\"p\">{`component B`}</strong>{` is dependent on `}<strong parentName=\"p\">{`component A`}</strong>{`. That is to say:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<?xml version=\"1.0\"?>\n<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\">\n    <module name=\"Vendor_ComponentB\" setup_version=\"0.0.1\">\n        <sequence>\n        <!-- Vendor_ComponentB is dependent on Vendor_ComponentA: -->\n            <module name=\"Vendor_ComponentA\" />\n        </sequence>\n    </module>\n</config>\n`}</code></pre>\n    <p>{`For each particular scenario, files of the same type are loaded from different components taking into account the sequence information provided in each component's `}<inlineCode parentName=\"p\">{`module.xml`}</inlineCode>{` file.`}</p>\n    <p>{`In another scenario, let's say you want to load all of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/layout\"\n      }}>{`layout`}</a>{` files with the name `}<inlineCode parentName=\"p\">{`default.xml`}</inlineCode>{`. `}<strong parentName=\"p\">{`Component A`}</strong>{` specifies `}<strong parentName=\"p\">{`component B`}</strong>{` in `}<inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{`. The files load in the following order:`}</p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`component X/view/frontend/layout/default.xml`}</inlineCode>{`---Either we don't care about when component X loads or perhaps component B requires it to be loaded before it.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`component B/view/frontend/layout/default.xml`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`component A/view/frontend/layout/default.xml`}</inlineCode>{`---Loads after `}<strong parentName=\"li\">{`component B`}</strong>{` because `}<strong parentName=\"li\">{`component B`}</strong>{` is listed in `}<strong parentName=\"li\">{`component A's`}</strong>{` `}<inlineCode parentName=\"li\">{`<sequence>`}</inlineCode>{` tag.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`component Z/view/frontend/layout/default.xml`}</inlineCode>{`---Either we don't care about the sequence for component Z or perhaps component Z requires component A files to be loaded before it.`}</li>\n    </ol>\n    <p>{`There are no limitations---you can specify any valid component in `}<inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{`.`}</p>\n    <p>{`If you do specify a component in `}<inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{`, make sure that you have also added it to the `}<inlineCode parentName=\"p\">{`require`}</inlineCode>{` section in that component's `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` file.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Take care when using `}<inlineCode parentName=\"p\">{`<sequence>`}</inlineCode>{` in multiple components because it's possible to define circular dependencies. If you do, the application aborts the installation when it detects the circular dependency.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}