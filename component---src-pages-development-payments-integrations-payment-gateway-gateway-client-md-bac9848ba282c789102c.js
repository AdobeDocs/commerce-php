"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[7039],{47395:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return i},default:function(){return c}});var n=a(87462),r=a(63366),m=(a(15007),a(64983)),o=a(91515),p=a(1930),s=["components"],i={},l={_frontmatter:i},d=o.Z;function c(e){var t=e.components,a=(0,r.Z)(e,s);return(0,m.mdx)(d,(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,m.mdx)(p.default,{mdxType:"Docs"}),(0,m.mdx)("h1",{id:"gateway-client"},"Gateway Client"),(0,m.mdx)("p",null,"Gateway Client is a component of the Adobe Commerce ",(0,m.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/payment-gateway"},"payment gateway")," that transfers the payload to the payment provider and gets the response."),(0,m.mdx)("h2",{id:"basic-interface"},"Basic interface"),(0,m.mdx)("p",null,"The basic interface for a gateway client is ",(0,m.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Http/ClientInterface.php"},(0,m.mdx)("inlineCode",{parentName:"a"},"Magento\\Payment\\Gateway\\Http\\ClientInterface")),"."),(0,m.mdx)("p",null,"A gateway client receives a called ",(0,m.mdx)("a",{parentName:"p",href:"#transfer-factory"},(0,m.mdx)("inlineCode",{parentName:"a"},"Transfer"))," object. The client may be configured with response converter using ",(0,m.mdx)("a",{parentName:"p",href:"../../components/dependency-injection.md"},"dependency injection"),"."),(0,m.mdx)("h2",{id:"default-implementations"},"Default implementations"),(0,m.mdx)("p",null,"The following gateway client implementations can be used out-of-the-box:"),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("p",{parentName:"li"},(0,m.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Http/Client/Zend.php"},"\\Magento\\Payment\\Gateway\\Http\\Client\\Zend"))),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("p",{parentName:"li"},(0,m.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Http/Client/Soap.php"},"\\Magento\\Payment\\Gateway\\Http\\Client\\Soap")))),(0,m.mdx)("h2",{id:"example"},"Example"),(0,m.mdx)("p",null,"Following is the illustration of how a Zend client can be added in ",(0,m.mdx)("inlineCode",{parentName:"p"},"di.xml"),":"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-xml"},'...\n<virtualType name="HtmlConverterZendClient" type="Magento\\Payment\\Gateway\\Http\\Client\\Zend">\n    <arguments>\n        <argument name="converter" xsi:type="object">Magento\\Payment\\Gateway\\Http\\Converter\\HtmlFormConverter</argument>\n        <argument name="logger" xsi:type="object">CustomLogger</argument>\n    </arguments>\n</virtualType>\n...\n')),(0,m.mdx)("h2",{id:"transfer-factory"},"Transfer Factory"),(0,m.mdx)("p",null,"Transfer Factory allows to create transfer object with all data from ",(0,m.mdx)("a",{parentName:"p",href:"request-builder.md"},"request builders"),". This object is then used by Gateway Client to process requests to payment processor."),(0,m.mdx)("p",null,"Transfer Factory uses ",(0,m.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Http/TransferBuilder.php"},"Transfer Builder")," to set required request parameters."),(0,m.mdx)("p",null,"The basic Transfer Factory interface is ",(0,m.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Http/TransferFactoryInterface.php"},"Magento\\Payment\\Gateway\\Http\\TransferFactoryInterface"),"."),(0,m.mdx)("p",null,"The similar example of factory might looks like this:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-php"}," public function create(array $request)\n {\n    return $this->transferBuilder\n        ->setBody($request)\n        ->build();\n }\n")),(0,m.mdx)("p",null,"In this example transfer factory simply sets request data using Transfer Builder and returns the created object."),(0,m.mdx)("p",null,"Following is an example of a more complicated behavior. Here transfer factory sets all required data to process requests using ",(0,m.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/api"},"API")," credentials and all data is sent in JSON format."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-php"},"public function create(array $request)\n{\n    return $this->transferBuilder\n        ->setMethod(Curl::POST)\n        ->setHeaders(['Content-Type' => 'application/json'])\n        ->setBody(json_encode($request, JSON_UNESCAPED_SLASHES))\n        ->setAuthUsername($this->getApiKey())\n        ->setAuthPassword($this->getApiPassword())\n        ->setUri($this->getUrl())\n        ->build();\n}\n")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-development-payments-integrations-payment-gateway-gateway-client-md-bac9848ba282c789102c.js.map