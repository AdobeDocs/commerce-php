{"version":3,"file":"component---src-pages-development-security-mass-assignment-md-a672526465f492390666.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/development/security/mass-assignment.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mass-assignment\"\n    }}>{`Mass assignment`}</h1>\n    <p>{`Mass assignment is a type of attack in which a client inserts or updates data that either should not be available to the user, or should require additional authorization.`}</p>\n    <p>{`For example, you have an endpoint or a page where users can edit their personal information. The user table in your database contains the following columns:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`id`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`first_name`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`last_name`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`email`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`password_hash`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`is_admin`}</inlineCode></li>\n    </ul>\n    <p>{`You want users to be able to edit their first and last names only on a page or through the endpoint, but inside the controller/service contract, you have code that looks something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$user = $repository->findById($authContext->getUserId());\n$user->setData($request->getPostData());\n$dbConnection->updateTable('users', $user->getData(), ['id' => $user->getId()]);\n`}</code></pre>\n    <p>{`When a client only provides `}<inlineCode parentName=\"p\">{`first_name`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`last_name`}</inlineCode>{` properties, this code will perform as expected, but it is vulnerable to mass assignment attacks.`}</p>\n    <p>{`The first vulnerability is through the `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` property. Users are meant to be able to edit only their own data, but here an attacker can set an `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` in their request. The`}<inlineCode parentName=\"p\">{`$user`}</inlineCode>{` object's ID will be overwritten, so when you call `}<inlineCode parentName=\"p\">{`$dbConnection->updateTable()`}</inlineCode>{`, instead of having the ID from `}<inlineCode parentName=\"p\">{`$authContext`}</inlineCode>{`, you will have an arbitrary ID from the HTTP request. This will allow an attacker to override data of any user in your system!`}</p>\n    <p>{`The second possible vulnerability is through the `}<inlineCode parentName=\"p\">{`is_admin`}</inlineCode>{` property. Clearly, the property was meant to be writable only by other admins, and maybe even by using another page/endpoint. Using the code above, an attacker can set `}<inlineCode parentName=\"p\">{`\"is_admin\": true`}</inlineCode>{` inside a request and gain admin access when you save the user record.`}</p>\n    <p>{`Given the `}<inlineCode parentName=\"p\">{`users`}</inlineCode>{` table structure, and depending on your application's logic, `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{` can also be a vulnerable property. An attacker might be able to change their email to any other address without confirming it first.`}</p>\n    <h2 {...{\n      \"id\": \"mass-assignment-and-the-commerce-framework\"\n    }}>{`Mass assignment and the Commerce framework`}</h2>\n    <p>{`If you are not careful and, especially, if you use the legacy approach described below, it is easy to make yourself vulnerable to mass assignment.`}</p>\n    <h3 {...{\n      \"id\": \"legacy-approach\"\n    }}>{`Legacy approach`}</h3>\n    <p>{`The legacy approach of exposing data to be writable by users means having a controller that uses\n`}<inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\Model\\\\AbstractModel`}</inlineCode>{` and sets request data directly, instead of doing so with a DTO\nand a service contract.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class Save extends \\\\Magento\\\\Backend\\\\App\\\\Action implements HttpPostActionInterface\n{\n    ...\n\n\n    public function execute()\n    {\n        $data = $this->getRequest()->getPostValue();\n        /** @var MyModel $model */\n        $model = $this->modelFactory->create()\n            ->load($this->getRequest()->getParam('id'));\n        $model->setData($data);\n        $model->save();\n\n        return $this->generateRedirect();\n    }\n}\n`}</code></pre>\n    <p>{`As you can see, this example is similar to the generic example with users before. We take all data from the request,\nthus allowing the client to override ANY property that the model (table) has and then store it.`}</p>\n    <h3 {...{\n      \"id\": \"newer-approach\"\n    }}>{`Newer approach`}</h3>\n    <p>{`A more recent practice is to have service contracts and DTOs that are directly exposed as REST APIs, used inside related\ncontrollers and GraphQL resolvers.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Api/etc/extension_attributes.xsd\">\n    <extension_attributes for=\"\\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\User\">\n        <attribute code=\"is_admin\" type=\"boolean\" />\n    </extension_attributes>\n</config>\n\n<routes xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Webapi:etc/webapi.xsd\">\n    <route url=\"/V1/users\" method=\"PUT\">\n        <service class=\"MyStore\\\\MyModule\\\\Api\\\\UserManagerInterface\" method=\"save\"/>\n        <resources>\n            <resource ref=\"self\"/>\n        </resources>\n    </route>\n</routes>\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`interface UserInterface extends ExtensibleDataInterface\n{\n    public function getId(): int;\n    public function getFirstName(): string;\n    public function getLastName(): string;\n    public function getEmail(): string;\n    public function getPasswordHash(): string;\n    public function getExtensionAttributes(): \\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UserExtensionInterface;\n    public function setExtensionAttributes(\\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UserExtensionInterface $extensionAttributes): void;\n}\n\nclass UserModel extends AbstractModel implements UserInterface\n{\n    ...\n}\n\ninterface UserManagerInterface\n{\n    public function save(\\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UserInterface $user): \\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UserInterface;\n}\n\nclass Save extends \\\\Magento\\\\Framework\\\\App\\\\Action\\\\Action implements HttpPostActionInterface\n{\n    ...\n\n    /**\n     * @var DataObjectHelper\n     */\n    private $dataObjectHelper;\n\n    /**\n     * @var UserManagerInterface\n     */\n    private $manager;\n\n    ...\n\n    public function execute()\n    {\n        $data = $this->getRequest()->getPostValue();\n        /** @var UserInterface|UserModel $user */\n        $user = $this->repo->findById($this->userContext->getUserId());\n        //hydration\n        $this->dataObjectHelper->populateWithArray($user, $data, UserInterface::class);\n\n        //Saving\n        $this->manager->save($user);\n\n        return $this->generateRedirect();\n    }\n}\n`}</code></pre>\n    <p>{`In this example, `}<inlineCode parentName=\"p\">{`UserInterface`}</inlineCode>{` is the DTO for the operation, and `}<inlineCode parentName=\"p\">{`UserManagerInterface`}</inlineCode>{` is the service contract. From\nthe XML snippet above, you can see that the `}<inlineCode parentName=\"p\">{`isAdmin`}</inlineCode>{` property is added to the `}<inlineCode parentName=\"p\">{`UserInterface`}</inlineCode>{` DTO as an extension attribute.\nYou can also see that `}<inlineCode parentName=\"p\">{`UserManagerInterface::save()`}</inlineCode>{` can be invoked directly by accessing the REST endpoint\n`}<inlineCode parentName=\"p\">{`PUT /V1/users`}</inlineCode>{`. We also use the service contract inside the `}<inlineCode parentName=\"p\">{`Save`}</inlineCode>{` controller, which handles a page that enables a user to edit personal info.`}</p>\n    <p>{`This approach is better because we do not accept all data coming from client request blindly, but rather only those properties\nstrictly defined inside `}<inlineCode parentName=\"p\">{`UserInterface`}</inlineCode>{` with getters. For REST APIs, this is ensured by the application framework automatically,\nand inside the controller, we hydrate the user object retrieved from the DB with `}<inlineCode parentName=\"p\">{`DataObjectHelper`}</inlineCode>{`.`}</p>\n    <p>{`However, because our DTO is also implemented by a class that extends `}<inlineCode parentName=\"p\">{`AbstractModel`}</inlineCode>{`, it's a de facto active record\nof the `}<inlineCode parentName=\"p\">{`users`}</inlineCode>{` table. As a result, we still have the issue where we exposed the `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`is_admin`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{` properties.\nThe same vulnerabilities persist.`}</p>\n    <h2 {...{\n      \"id\": \"solution\"\n    }}>{`Solution`}</h2>\n    <p>{`The vulnerability can be fixed relatively easily by having a strict list of properties accepted by your\ncontrollers/service contracts that do not necessarily correlate with the storage schema.\nThis can be achieved by using operation-specific DTOs instead of persistence-layer DTOs.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<routes xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Webapi:etc/webapi.xsd\">\n    <route url=\"/V1/users\" method=\"PUT\">\n        <service class=\"MyStore\\\\MyModule\\\\Api\\\\UserManagerInterface\" method=\"update\"/>\n        <resources>\n            <resource ref=\"self\"/>\n        </resources>\n        <data>\n            <!-- Enforcing UpdatedUserDataInterface::getId() to always equal to current user's ID -->\n            <parameter name=\"user.id\" force=\"true\">%user_id%</parameter>\n        </data>\n    </route>\n</routes>\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`interface UpdatedUserDataInterface extends ExtensibleDataInterface\n{\n    //This property will be enforced by controller/webapi\n    public function getId(): int;\n    //Only having properties that you wish to be writable by users themselves\n    public function getFirstName(): string;\n    public function getLastName(): string;\n    public function getExtensionAttributes(): \\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UpdatedUserDataExtensionInterface;\n    public function setExtensionAttributes(\\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UpdatedUserDataExtensionInterface $extensionAttributes): void;\n}\n\n//Read-only DTO\ninterface UserInfoInterface extends ExtensibleDataInterface\n{\n    public function getId(): int;\n    public function getFirstName(): string;\n    public function getLastName(): string;\n    public function getEmail(): string;\n    public function getExtensionAttributes(): \\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UserInfoExtensionInterface;\n    public function setExtensionAttributes(\\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UserInfoExtensionInterface $extensionAttributes): void;\n}\n\n//Notice the implementation extending simple DataObject instead of the model.\nclass UpdatedUserData extends DataObject implements UpdatedUserDataInterface\n{\n    ...\n}\n\ninterface UserManagerInterface\n{\n    public function update(\\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UpdatedUserDataInterface $user): \\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UserInfoInterface;\n}\n\nclass Save extends \\\\Magento\\\\Framework\\\\App\\\\Action\\\\Action implements HttpPostActionInterface\n{\n    ...\n\n    /**\n     * @var DataObjectHelper\n     */\n    private $dataObjectHelper;\n\n    /**\n     * @var UserManagerInterface\n     */\n    private $manager;\n\n    ...\n\n    public function execute()\n    {\n        $data = $this->getRequest()->getPostValue();\n        //Enforcing user ID.\n        $data['id'] = $this->userContext->getUserId();\n        $updatedData = new UpdatedUserData();\n        //hydration\n        $this->dataObjectHelper->populateWithArray($updatedData, $data, UpdatedUserDataInterface::class);\n\n        //Saving\n        $this->manager->update($updatedData);\n\n        return $this->generateRedirect();\n    }\n}\n`}</code></pre>\n    <p>{`You can see that `}<inlineCode parentName=\"p\">{`UpdatedUserDataInterface`}</inlineCode>{` only contains properties that we want users to be able to\nupdate. It is not an `}<inlineCode parentName=\"p\">{`AbstractModel`}</inlineCode>{`, but rather a simple data container (`}<inlineCode parentName=\"p\">{`DataObject`}</inlineCode>{`), so we won't have to add any\nnew properties, even if we add new columns to the table. We'll only update `}<inlineCode parentName=\"p\">{`UpdatedUserDataInterface`}</inlineCode>{` explicitly\nwhen we want to make a property writeable by clients.`}</p>\n    <p>{`However, we still have\n`}<inlineCode parentName=\"p\">{`getId`}</inlineCode>{` as a part of the DTO in order to identify which user to update. That means that we need to ensure that the\nproperty will contain the value we want, and not a user defined value. For REST APIs, we achieve this with the `}<inlineCode parentName=\"p\">{`parameter`}</inlineCode>{`\ntag, which will find a registered `}<inlineCode parentName=\"p\">{`ParamOverrider`}</inlineCode>{` and use it to override whatever the client has provided. In the controller,\nwe do this by explicitly setting `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` as current user ID.`}</p>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`UserManagerInterface`}</inlineCode>{` returns `}<inlineCode parentName=\"p\">{`UserInfoInterface`}</inlineCode>{`, which is another DTO, and not an `}<inlineCode parentName=\"p\">{`AbstractModel`}</inlineCode>{`.\nIt serves a similar purpose: to expose only the properties to clients that we want them to see. This example does not contain\n`}<inlineCode parentName=\"p\">{`getPasswordHash()`}</inlineCode>{`, for instance.`}</p>\n    <h3 {...{\n      \"id\": \"authorization\"\n    }}>{`Authorization`}</h3>\n    <p>{`In the example above, we skipped the `}<inlineCode parentName=\"p\">{`isAdmin()`}</inlineCode>{` user property. We don't want users to access this property themselves,\nbut we do want this property to be writeable by other admin users.`}</p>\n    <p>{`The best solution here would be to have a separate service, controller, and DTOs meant for admin users that would expose\nmore properties like `}<inlineCode parentName=\"p\">{`isAdmin()`}</inlineCode>{` with the endpoints/pages requiring authorization to related resources.`}</p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<routes xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Webapi:etc/webapi.xsd\">\n    <route url=\"/V1/admin/users\" method=\"PUT\">\n        <service class=\"MyStore\\\\MyModule\\\\Api\\\\AdminUserManagerInterface\" method=\"save\"/>\n        <resources>\n            <resource ref=\"Magento_User::manage\"/>\n        </resources>\n    </route>\n</routes>\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`interface UserFullDataInterface extends ExtensibleDataInterface\n{\n    //Properties we wish admins have access to\n    public function getId(): int;\n    public function getFirstName(): string;\n    public function getLastName(): string;\n    public function isAdmin(): bool;\n    public function isActive(): bool;\n    public function getExtensionAttributes(): \\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UserFullDataExtensionInterface;\n    public function setExtensionAttributes(\\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UserFullDataExtensionInterface $extensionAttributes): void;\n}\n\n\n//Read-only DTO\ninterface FullUserInfoInterface extends ExtensibleDataInterface\n{\n    public function getId(): int;\n    public function getFirstName(): string;\n    public function getLastName(): string;\n    public function getEmail(): string;\n    public function isAdmin(): boolean;\n    public function isActive(): string;\n    public function getExtensionAttributes(): \\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\FullUserInfoExtensionInterface;\n    public function setExtensionAttributes(\\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\FullUserInfoExtensionInterface $extensionAttributes): void;\n}\n\n//Notice the implementation extending simple DataObject instead of the model.\nclass UserFullData extends DataObject implements UserFullDataInterface\n{\n    ...\n}\n\ninterface AdminUserManagerInterface\n{\n    public function save(\\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\UserFullDataInterface $user): \\\\MyStore\\\\MyModule\\\\Api\\\\Data\\\\FullUserInfoInterface;\n}\n\nclass Save extends \\\\Magento\\\\Backend\\\\App\\\\Action implements HttpPostActionInterface\n{\n    ...\n\n    const ADMIN_RESOURCE = 'Magento_User::manage';\n\n    /**\n     * @var DataObjectHelper\n     */\n    private $dataObjectHelper;\n\n    /**\n     * @var AdminUserManagerInterface\n     */\n    private $manager;\n\n    ...\n\n    public function execute()\n    {\n        $data = $this->getRequest()->getPostValue();\n        $userData = new UserFullData();\n        //hydration\n        $this->dataObjectHelper->populateWithArray($userData, $data, UserFullDataInterface::class);\n\n        //Saving\n        $this->manager->save($userData);\n\n        return $this->generateRedirect();\n    }\n}\n`}</code></pre>\n    <p>{`Notice how both the endpoint and the controller now require authorization for `}<inlineCode parentName=\"p\">{`Magento_User::manage`}</inlineCode>{`. In an earlier example,\nwe had `}<inlineCode parentName=\"p\">{`isAdmin()`}</inlineCode>{` property added to `}<inlineCode parentName=\"p\">{`UserInterface`}</inlineCode>{` as an extension attribute. If we have the same DTOs\nfor operations that require additional authorization and those that do not, we risk other extensions exposing\nvulnerable data. With this approach, another extension can decide to only add certain properties to DTOs available\nonly to admin users by providing extension attributes for `}<inlineCode parentName=\"p\">{`UserFullDataInterface`}</inlineCode>{` only.`}</p>\n    <h3 {...{\n      \"id\": \"graphql\"\n    }}>{`GraphQL`}</h3>\n    <p>{`For GraphQL APIs, the application does not rely on interfaces to generate schema. Instead, we have explicit GraphQL schemas, and there is\nno risk of exposing fields accidentally when you update data storage schema. However, if for some reason some fields\ndo require additional authorization, you would still need to verify it explicitly.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}