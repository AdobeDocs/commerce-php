{"version":3,"file":"component---src-pages-development-components-declarative-schema-migration-scripts-md-403fbdcc1bb78a5b07b6.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/development/components/declarative-schema/migration-scripts.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"migrate-installupgrade-scripts-to-declarative-schema\"\n    }}>{`Migrate install/upgrade scripts to declarative schema`}</h1>\n    <p>{`Adobe Commerce and Magento Open Source provide several commands to help convert your installation and upgrade scripts to declarative schema. These commands also help you test your changes, roll back your changes if anything goes wrong, and help your module maintain backward compatibility.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Once you start with data patches, you cannot continue to use upgrade scripts.`}</p>\n    <h2 {...{\n      \"id\": \"convert-installupgrade-schema-scripts-to-db_schemaxml-files\"\n    }}>{`Convert install/upgrade schema scripts to db_schema.xml files`}</h2>\n    <p>{`The `}<strong parentName=\"p\">{`Schema Listener Tool`}</strong>{` converts pre-Adobe Commerce and Magento Open Source 2.3 migration scripts into declarative schema. To use this tool, you specify an argument when you run the `}<inlineCode parentName=\"p\">{`setup:install`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`setup:upgrade`}</inlineCode>{` CLI command. As the application is installed or upgraded, the system logs all schema changes per module, then persists the changes in a series of `}<inlineCode parentName=\"p\">{`db_schema.xml`}</inlineCode>{` files (one per affected module).`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The Schema Listener tool listens for schema changes and attempts to change application code, so it should not be run in production mode. It is disabled by default.`}</p>\n    <p>{`To convert your install or upgrade script, run one of the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento setup:install --convert-old-scripts=1\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento setup:upgrade --convert-old-scripts=1\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`In Adobe Commerce and Magento Open Source 2.3 Alpha, the `}<inlineCode parentName=\"p\">{`--convert-old-scripts`}</inlineCode>{` parameter was named `}<inlineCode parentName=\"p\">{`--convert_old_scripts`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"troubleshooting\"\n    }}>{`Troubleshooting`}</h3>\n    <p>{`The Schema Listener Tool cannot convert everything that can appear in a pre-Adobe Commerce and Magento Open Source 2.3 migration script.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The tool supports only DDL operations represented in `}<inlineCode parentName=\"li\">{`\\\\Magento\\\\Framework\\\\DB\\\\Adapter\\\\Pdo\\\\Mysql`}</inlineCode>{`. As a result, the tool ignores all custom DDL operations.`}</li>\n      <li parentName=\"ul\">{`The tool ignores all raw SQL in your `}<inlineCode parentName=\"li\">{`InstallSchema`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`UpgradeSchema`}</inlineCode>{` scripts.`}</li>\n      <li parentName=\"ul\">{`Any DDL statements in a `}<inlineCode parentName=\"li\">{`Recurring`}</inlineCode>{` file will not be transferred to the new schema, because this file should be designed to run during each installation or upgrade.`}</li>\n      <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n          \"href\": \"configuration.md\"\n        }}>{`Configure declarative schema`}</a>{` if you need to make manual modifications to your schema.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"convert-installupgrade-data-scripts-to-the-data-patch-format\"\n    }}>{`Convert install/upgrade data scripts to the data patch format`}</h2>\n    <p>{`Old data scripts cannot be converted automatically. The following steps help make the conversion go as smoothly as possible.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Generate a patch stub.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento setup:db-declaration:generate-patch [options] <module-name> <patch-name>\n`}</code></pre>\n        <p parentName=\"li\">{`where `}<inlineCode parentName=\"p\">{`[options]`}</inlineCode>{` can be any of the following:`}</p>\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`--revertable[=true | false]`}</inlineCode>{` - Determines whether the patch is revertable. The default value is `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`--type[=<type>]`}</inlineCode>{` - Specifies what type of patch to generate. The default is `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`All released modules that previously used upgrade scripts must support backward compatibility by implementing `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Framework\\\\Setup\\\\Patch\\\\PatchVersionInterface`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`getVersion`}</inlineCode>{` method. This method allows you to skip changes that were applied in previous versions and were done by old scripts. The returned value of the `}<inlineCode parentName=\"p\">{`getVersion`}</inlineCode>{` method in this case should be equal to the value of a version in `}<inlineCode parentName=\"p\">{`version_compare`}</inlineCode>{` function in old scripts. When the `}<inlineCode parentName=\"p\">{`InstallData.php`}</inlineCode>{` script does not have any versions to compare, you can specify the first version of your module. See `}<a parentName=\"p\" {...{\n            \"href\": \"patches.md\"\n          }}>{`Develop declarative data and schema patches`}</a>{` for more information.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"dry-run-mode\"\n    }}>{`Dry run mode`}</h2>\n    <p>{`It is important that declarative installation/upgrade does not break anything. A useful way to ensure this is use dry run mode to examine all the DDL SQL statements that are generated during the declarative installation process. In dry run mode, the database state does not change. The schemas and data will be the same before and after installation.`}</p>\n    <p>{`To enable dry run mode, run one of the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento setup:install --dry-run=1\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento setup:upgrade --dry-run=1\n`}</code></pre>\n    <p>{`As a result of specifying the `}<inlineCode parentName=\"p\">{`--dry-run=1`}</inlineCode>{` flag, the application writes a log file at `}<inlineCode parentName=\"p\">{`<Application_Root>/var/log/dry-run-installation.log`}</inlineCode>{`. This file contains all the DDL SQL statements that are generated during installation. You can use these SQL statements for debugging and optimizing performance processes.`}</p>\n    <h2 {...{\n      \"id\": \"safe-installation-and-rollback\"\n    }}>{`Safe installation and rollback`}</h2>\n    <p>{`The advantage and the main problem of declarative schema is that it can blindly modify the database schema. For example, a developer can make a mistake and potentially remove a structural element from the database, causing data loss.`}</p>\n    <p>{`To help prevent data loss, you can specify command line options that dump all the data that could be lost as a result of an installation. The dumped data can then be restored manually or automatically. These arguments are optional--you do not have to create a manual dump during a system upgrade. `}<em parentName=\"p\">{`(Note that this works only with schema.)`}</em></p>\n    <p>{`Adobe Commerce and Magento Open Source provide options to the `}<inlineCode parentName=\"p\">{`setup:install`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`setup:upgrade`}</inlineCode>{` commands that enable safe installations and rollbacks:`}</p>\n    <p><inlineCode parentName=\"p\">{`--safe-mode=1`}</inlineCode>{` - Creates a data dump during the installation or upgrade process.`}</p>\n    <p><inlineCode parentName=\"p\">{`--data-restore=1`}</inlineCode>{` - (Used with the `}<inlineCode parentName=\"p\">{`setup:upgrade`}</inlineCode>{` command only.) Performs a rollback. Before you rollback, you must first check out code to the previous version of Magento. Then run `}<inlineCode parentName=\"p\">{`setup:upgrade  --data-restore=1`}</inlineCode>{`.`}</p>\n    <p>{`Several types of operations have an effect on data dumps and rollbacks.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><em parentName=\"p\">{`Destructive operations (DO)`}</em>{` - SQL DDL operations that cause data deletion or data corruption. The following operations are destructive:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Deleting a table`}</li>\n          <li parentName=\"ul\">{`Deleting a column`}</li>\n          <li parentName=\"ul\">{`Reducing column length`}</li>\n          <li parentName=\"ul\">{`Changing column precision`}</li>\n          <li parentName=\"ul\">{`Changing the column type`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><em parentName=\"p\">{`Opposite to destructive operations (ODO)`}</em>{` - In the case of a failed installation, SQL DDL operations that are the opposite of destructive operations can be used for rollback. For example, changing the column type from CHAR to INT is a destructive operation. The rollback operation changes the type from INT to CHAR.`}</p>\n      </li>\n    </ul>\n    <p>{`When safe mode is enabled, Adobe Commerce and Magento Open Source create a CSV file each time a destructive operation for a table or column occurs. You can find these files at the following locations:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Magento_root/var/declarative_dumps_csv/{column_name_column_type_other_dimensions}.csv`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Magento_root/var/declarative_dumps_csv/{table_name}.csv`}</inlineCode></li>\n    </ul>\n    <p>{`Each CSV file contains a row that defines the column (or other database entity) names as well as rows of values, as shown in the following image:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"36.25%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-php/static/f991ec2a50535fa9ffa8e56a4871bfb8/5530d/dump_example.webp 320w\", \"/commerce-php/static/f991ec2a50535fa9ffa8e56a4871bfb8/0c8fb/dump_example.webp 640w\", \"/commerce-php/static/f991ec2a50535fa9ffa8e56a4871bfb8/94b1e/dump_example.webp 1280w\", \"/commerce-php/static/f991ec2a50535fa9ffa8e56a4871bfb8/c2bc5/dump_example.webp 1442w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-php/static/f991ec2a50535fa9ffa8e56a4871bfb8/dd4a7/dump_example.png 320w\", \"/commerce-php/static/f991ec2a50535fa9ffa8e56a4871bfb8/0f09e/dump_example.png 640w\", \"/commerce-php/static/f991ec2a50535fa9ffa8e56a4871bfb8/bbbf7/dump_example.png 1280w\", \"/commerce-php/static/f991ec2a50535fa9ffa8e56a4871bfb8/a4b35/dump_example.png 1442w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/commerce-php/static/f991ec2a50535fa9ffa8e56a4871bfb8/bbbf7/dump_example.png\",\n            \"alt\": \"Dump Example\",\n            \"title\": \"Dump Example\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"create-a-schema-whitelist\"\n    }}>{`Create a schema whitelist`}</h2>\n    <p>{`Backward compatibility must be maintained. Therefore, declarative schema does not automatically delete database tables, columns or keys that are not defined in a `}<inlineCode parentName=\"p\">{`db_schema.xml`}</inlineCode>{` file. Declarative schema cannot delete these elements because these items can be declared somewhere else, such as in an `}<inlineCode parentName=\"p\">{`Setup/UpgradeSchema.php`}</inlineCode>{` file.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Whitelists cannot be generated on application instances that use a database prefix. The presence of a prefix impacts the names of some DB entities, such as the names of keys, and these names cannot be used in generated whitelists. The whitelist should be generated by the extension developer on a development environment with no prefixes.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<module_vendor>/<module_name>/etc/db_schema_whitelist.json`}</inlineCode>{` file provides a history of all tables, columns, and keys added with declarative schema. It is required to allow drop operations. It can be generated manually or created automatically with the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento setup:db-declaration:generate-whitelist [options]\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`[options]`}</inlineCode>{` can be:`}</p>\n    <p><inlineCode parentName=\"p\">{`--module-name[=MODULE-NAME]`}</inlineCode>{` specifies which module to generate a whitelist for. If no module name is specified, then the default behavior is to generate a whitelist for all modules. You can also explicitly set `}<inlineCode parentName=\"p\">{`--module-name=all`}</inlineCode>{`.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`In Adobe Commerce and Magento Open Source 2.3 Alpha, the `}<inlineCode parentName=\"p\">{`setup:db-declaration:generate-whitelist`}</inlineCode>{` command was named `}<inlineCode parentName=\"p\">{`declaration:generate:whitelist`}</inlineCode>{`.`}</p>\n    <p>{`As a best practice, you should generate a new whitelist file for each release. You must generate the whitelist  in any release that contains changes in the `}<inlineCode parentName=\"p\">{`db_schema.xml`}</inlineCode>{` file.`}</p>\n    <p>{`The following code sample shows a sample `}<inlineCode parentName=\"p\">{`db_schema_whitelist.json`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"adminnotification_inbox\": {\n        \"column\": {\n            \"notification_id\": true,\n            \"severity\": true,\n            \"date_added\": true,\n            \"title\": true,\n            \"description\": true,\n            \"url\": true,\n            \"is_read\": true,\n            \"is_remove\": true\n        },\n        \"index\": {\n            \"ADMINNOTIFICATION_INBOX_SEVERITY\": true,\n            \"ADMINNOTIFICATION_INBOX_IS_READ\": true,\n            \"ADMINNOTIFICATION_INBOX_IS_REMOVE\": true\n        },\n        \"constraint\": {\n            \"PRIMARY\": true\n        }\n    },\n    \"admin_system_messages\": {\n        \"column\": {\n            \"identity\": true,\n            \"severity\": true,\n            \"created_at\": true\n        },\n        \"constraint\": {\n            \"PRIMARY\": true\n        }\n    }\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`This file is a temporary solution. It will be removed in the future, when upgrade scripts are no longer supported.`}</p>\n    <h2 {...{\n      \"id\": \"resolve-reference-ids\"\n    }}>{`Resolve reference IDs`}</h2>\n    <p>{`The sample `}<inlineCode parentName=\"p\">{`db_schema_whitelist.json`}</inlineCode>{` file above contains system-generated constraint and index names. `}<a parentName=\"p\" {...{\n        \"href\": \"configuration.md\"\n      }}>{`Configure your `}<inlineCode parentName=\"a\">{`db_schema.xml`}</inlineCode>{` file`}</a>{` so that the `}<inlineCode parentName=\"p\">{`referenceId`}</inlineCode>{` attributes match these values.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`In Adobe Commerce and Magento Open Source 2.3.0, the identifying attribute for constraints and index definitions is `}<inlineCode parentName=\"p\">{`referenceId`}</inlineCode>{`. In pre-release versions, the attribute was `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","variant","slots","parentName","isMDXComponent"],"sourceRoot":""}