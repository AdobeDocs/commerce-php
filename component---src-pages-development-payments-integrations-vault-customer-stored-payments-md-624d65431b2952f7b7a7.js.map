{"version":3,"file":"component---src-pages-development-payments-integrations-vault-customer-stored-payments-md-624d65431b2952f7b7a7.js","mappings":"yRASaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,SAAC,UAAD,CAAMA,QAAQ,UACd,eACE,GAAM,kCADR,mCAGA,iJACA,eACE,GAAM,kBADR,mBAGA,yMAEmB,cAAGC,WAAW,IAC7B,KAAQ,yGACP,uBAAYA,WAAW,KAAvB,2BAJL,UAKE,cAAGA,WAAW,IACZ,KAAQ,yGACP,uBAAYA,WAAW,KAAvB,kBAPL,iBAQA,8FAA+E,cAAGA,WAAW,IACzF,KAAQ,sGADmE,wBAA/E,2BAE4D,cAAGA,WAAW,IACtE,KAAQ,wGACP,uBAAYA,WAAW,KAAvB,0BAJL,MAKA,mBAAG,uBAAYA,WAAW,KAAvB,wBAAH,gBAAmF,cAAGA,WAAW,IAC7F,KAAQ,uGADuE,yBAAnF,oDAGA,uFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,yoCAwDL,eACE,GAAM,uBADR,wBAGA,kKACA,+BAAgB,cAAGA,WAAW,IAC1B,KAAQ,2HADI,8BAAhB,OAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,ohBAYL,kDAAmC,uBAAYA,WAAW,KAAvB,qBAAnC,6HAGH,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/vault/customer-stored-payments.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/pages/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"display-the-stored-information\"\n    }}>{`Display the stored information`}</h1>\n    <p>{`This topic describes how to display stored tokens in the customer account and give customers ability to remove the tokens.`}</p>\n    <h2 {...{\n      \"id\": \"token-renderer\"\n    }}>{`Token renderer`}</h2>\n    <p>{`To implement the displaying functionality, create a token renderer. Its\nimplementation depends on token type (card or account). But both types of renderers\nimplement the common `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Block/TokenRendererInterface.php\"\n      }}><inlineCode parentName=\"a\">{`TokenRendererInterface`}</inlineCode></a>{`\nand `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Block/Customer/IconInterface.php\"\n      }}><inlineCode parentName=\"a\">{`IconInterface`}</inlineCode></a>{` interfaces.`}</p>\n    <p>{`If your vault integration uses card token type, then you need to extend `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Block/AbstractCardRenderer.php\"\n      }}>{`AbstractCardRenderer`}</a>{`. In other case extend `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Block/AbstractTokenRenderer.php\"\n      }}><inlineCode parentName=\"a\">{`AbstractTokenRenderer`}</inlineCode></a>{`.`}</p>\n    <p><inlineCode parentName=\"p\">{`AbstractCardRenderer`}</inlineCode>{` implements `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Block/CardRendererInterface.php\"\n      }}>{`CardRendererInterface`}</a>{` and has additional method to get card details.`}</p>\n    <p>{`The simple card renderer implementation might be like following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class CardRenderer extends AbstractCardRenderer\n{\n    /**\n     * Can render specified token\n     *\n     * @param PaymentTokenInterface $token\n     * @return boolean\n     */\n    public function canRender(PaymentTokenInterface $token)\n    {\n        return $token->getPaymentMethodCode() === ConfigProvider::CODE;\n    }\n\n    /**\n     * @return string\n     */\n    public function getNumberLast4Digits()\n    {\n        return $this->getTokenDetails()['maskedCC'];\n    }\n\n    /**\n     * @return string\n     */\n    public function getExpDate()\n    {\n        return $this->getTokenDetails()['expirationDate'];\n    }\n\n    /**\n     * @return string\n     */\n    public function getIconUrl()\n    {\n        return $this->getIconForType($this->getTokenDetails()['type'])['url'];\n    }\n\n    /**\n     * @return int\n     */\n    public function getIconHeight()\n    {\n        return $this->getIconForType($this->getTokenDetails()['type'])['height'];\n    }\n\n    /**\n     * @return int\n     */\n    public function getIconWidth()\n    {\n        return $this->getIconForType($this->getTokenDetails()['type'])['width'];\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"layout-and-template\"\n    }}>{`Layout and template`}</h2>\n    <p>{`Next, you need to create the layout to be used for displaying token details. In this layout, specify the previously created token renderer.`}</p>\n    <p>{`Example (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/view/frontend/layout/vault_cards_listaction.xml\"\n      }}>{`vault_cards_listaction.xml`}</a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <body>\n        <referenceContainer name=\"content\">\n            <referenceBlock name=\"vault.cards.list\">\n                <block class=\"Magento\\\\Braintree\\\\Block\\\\Customer\\\\CardRenderer\" name=\"braintree.card.renderer\" template=\"Magento_Vault::customer_account/credit_card.phtml\"/>\n            </referenceBlock>\n        </referenceContainer>\n    </body>\n</page>\n`}</code></pre>\n    <p>{`In this example the default `}<inlineCode parentName=\"p\">{`credit_card.phtml`}</inlineCode>{` vault template is used. But you can create and specify a custom template. Add the template in the payment method module.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}