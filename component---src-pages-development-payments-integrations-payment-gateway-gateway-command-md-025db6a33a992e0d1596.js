"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[85944],{47212:function(e,a,t){t.r(a),t.d(a,{_frontmatter:function(){return i},default:function(){return u}});var n=t(87462),r=t(63366),m=(t(15007),t(64983)),d=t(91515),o=t(1930),p=["components"],i={},s={_frontmatter:i},l=d.Z;function u(e){var a=e.components,t=(0,r.Z)(e,p);return(0,m.mdx)(l,(0,n.Z)({},s,t,{components:a,mdxType:"MDXLayout"}),(0,m.mdx)(o.default,{mdxType:"Docs"}),(0,m.mdx)("h1",{id:"gateway-command"},"Gateway Command"),(0,m.mdx)("p",null,"Gateway Command is a component of the Adobe Commerce ",(0,m.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/payment-gateway"},"payment gateway")," that takes the ",(0,m.mdx)("a",{parentName:"p",href:"index.md#terms-used"},"payload")," required for a particular payment provider and sends, receives, and processes the provider's response."),(0,m.mdx)("p",null,"For each operation (authorization, capture and so on) of a certain payment provider - a separate gateway command is added."),(0,m.mdx)("h2",{id:"interface"},"Interface"),(0,m.mdx)("p",null,"Basic interface for a gateway command is ",(0,m.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/CommandInterface.php"},(0,m.mdx)("inlineCode",{parentName:"a"},"\\Magento\\Payment\\Gateway\\CommandInterface")),". It implements the ",(0,m.mdx)("a",{parentName:"p",href:"https://designpatternsphp.readthedocs.io/en/latest/Behavioral/Command/README.html"},"Command design pattern"),"."),(0,m.mdx)("h2",{id:"basic-implementation"},"Basic implementation"),(0,m.mdx)("p",null,"The ",(0,m.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Payment\\Gateway\\Command\\GatewayCommand")," class is the default ",(0,m.mdx)("inlineCode",{parentName:"p"},"CommandInterface")," implementation. It allows performing most of the operations implemented in the ",(0,m.mdx)("a",{parentName:"p",href:"index.md#terms-used"},"Commerce sales management"),"."),(0,m.mdx)("h2",{id:"adding-gateway-commands"},"Adding gateway commands"),(0,m.mdx)("p",null,"For each particular integration with a payment provider, gateway commands are added using virtual types in ",(0,m.mdx)("a",{parentName:"p",href:"../../components/dependency-injection.md"},"dependency injection (DI)")," configuration."),(0,m.mdx)("p",null,"In the following example the ",(0,m.mdx)("inlineCode",{parentName:"p"},"BraintreeAuthorizeCommand"),' gateway command is added. The command implements the "authorize" operation for the Braintree payment provider (',(0,m.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/tree/2.3/app/code/Magento/Braintree/etc/di.xml"},(0,m.mdx)("inlineCode",{parentName:"a"},"app/code/Magento/Braintree/etc/di.xml")),"):"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-xml"},'<virtualType name="BraintreeAuthorizeCommand" type="Magento\\Payment\\Gateway\\Command\\GatewayCommand">\n    <arguments>\n        <argument name="requestBuilder" xsi:type="object">BraintreeAuthorizeRequest</argument>\n        <argument name="transferFactory" xsi:type="object">Magento\\Braintree\\Gateway\\Http\\TransferFactory</argument>\n        <argument name="client" xsi:type="object">Magento\\Braintree\\Gateway\\Http\\Client\\TransactionSale</argument>\n        <argument name="handler" xsi:type="object">BraintreeAuthorizationHandler</argument>\n        <argument name="validator" xsi:type="object">Magento\\Braintree\\Gateway\\Validator\\ResponseValidator</argument>\n        <argument name="errorMessageMapper" xsi:type="object">Magento\\Braintree\\Gateway\\ErrorMapper\\VirtualErrorMessageMapper</argument>\n    </arguments>\n</virtualType>\n')),(0,m.mdx)("p",null,"(The code sample is from Magento Open Source v2.2. Although the payment provider gateway was added in v2.0, the particular default implementation using the gateway were added in v2.1.)"),(0,m.mdx)("p",null,"A gateway command must be configured with the following arguments:"),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("p",{parentName:"li"},(0,m.mdx)("inlineCode",{parentName:"p"},"requestBuilder"),": ",(0,m.mdx)("a",{parentName:"p",href:"request-builder.md"},"request builder"),", builds an array of provider-specific arguments using the order information.")),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("p",{parentName:"li"},(0,m.mdx)("inlineCode",{parentName:"p"},"transferFactory"),": ",(0,m.mdx)("a",{parentName:"p",href:"gateway-client.md#transfer-factory"},"transfer factory"),", creates transfer object from request data, which will be used by Gateway Client to process requests.")),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("p",{parentName:"li"},(0,m.mdx)("inlineCode",{parentName:"p"},"client"),": ",(0,m.mdx)("a",{parentName:"p",href:"gateway-client.md"},"gateway client"),", takes the provider-specific arguments and performs a low-level call to the provider."))),(0,m.mdx)("p",null,"Optional arguments :"),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("p",{parentName:"li"},(0,m.mdx)("inlineCode",{parentName:"p"},"handler"),": ",(0,m.mdx)("a",{parentName:"p",href:"response-handler.md"},"response handler"),", changes the order and payment status depending on the payment provider response.")),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("p",{parentName:"li"},(0,m.mdx)("inlineCode",{parentName:"p"},"validator"),": ",(0,m.mdx)("a",{parentName:"p",href:"response-validator.md"},"response validator"),", validates the provider response."))))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-development-payments-integrations-payment-gateway-gateway-command-md-025db6a33a992e0d1596.js.map