"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[96707],{76637:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return d},default:function(){return c}});var t,r=a(87462),o=a(63366),l=(a(15007),a(64983)),m=a(91515),s=["components"],d={},i=(t="InlineAlert",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)}),p={_frontmatter:d},u=m.Z;function c(e){var n=e.components,a=(0,o.Z)(e,s);return(0,l.mdx)(u,(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"javascript-docblock-standard"},"JavaScript DocBlock standard"),(0,l.mdx)("p",null,"To add JavaScript code inline documentation, follow these guidelines. Some parts of the code may not comply with this standard, but we are working to gradually improve this. Following these standard is optional for third-party developers, but will help to create consistent, clean, and easy to read inline documentation.\nThis standard are a subset of ",(0,l.mdx)("a",{parentName:"p",href:"https://google.github.io/styleguide/javascriptguide.xml"},"Google JavaScript Style Guide")," regulations."),(0,l.mdx)("p",null,"Use ",(0,l.mdx)("a",{parentName:"p",href:"http://www.ietf.org/rfc/rfc2119.txt"},"RFC 2119"),' to interpret the "must," "must not," "required," "shall," "shall not," "should," "should not," "recommended," "may," and "optional" keywords.'),(0,l.mdx)("h2",{id:"use-jsdoc"},"Use JSDoc"),(0,l.mdx)("p",null,"Document all files, classes, methods, and properties with JSDoc comments."),(0,l.mdx)("p",null,'Inline comments should be of the "//" type.'),(0,l.mdx)("p",null,"It is recommended to avoid sentence fragments in documentation blocks. Use sentence-style capitalization and put a period at the end. Sentence fragmentation is acceptable in inline commentaries to keep it short."),(0,l.mdx)("h3",{id:"comment-syntax"},"Comment syntax"),(0,l.mdx)("p",null,"JSDoc comments requirements:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"A JSDoc comment should begin with a slash (/) and two asterisks (*)."),(0,l.mdx)("li",{parentName:"ul"},"Inline tags should be enclosed in braces: ",(0,l.mdx)("inlineCode",{parentName:"li"},"{ @code this }"),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"@desc")," Block tags should always start on their own line.")),(0,l.mdx)("p",null,"Example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n* A testJSDoc comment should begin with a slash and 2 asterisks.\n* Inline tags should be enclosed in braces like {@code this}.\n* @desc Block tags should always start on their own line.\n*/\n")),(0,l.mdx)("p",null,"Many tools extract metadata from JSDoc comments to validate and optimize the code."),(0,l.mdx)("h3",{id:"jsdoc-indentation"},"JSDoc indentation"),(0,l.mdx)("p",null,"If you have to line break a block tag, you should treat this as breaking a code statement and indent it four spaces."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Illustrates line wrapping for long param/return descriptions.\n *\n * @param {string} foo This is a param with a description too long to fit in\n *     one line.\n * @return {number} This returns something that has a description too long to\n *     fit in one line.\n */\nproject.MyClass.prototype.method = function(foo) {\n    return 5;\n};\n")),(0,l.mdx)("h3",{id:"class-comments"},"Class comments"),(0,l.mdx)("p",null,"Classes must be documented with a description, and appropriate type tags."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Class making something fun and easy.\n * @param {string} arg1 An argument that makes this more interesting.\n * @param {Array.<number>} arg2 List of numbers to be processed.\n * @constructor\n */\nproject.MyClass = function(arg1, arg2) {\n    // ...\n};\n")),(0,l.mdx)("h3",{id:"method-and-function-comments"},"Method and function comments"),(0,l.mdx)("p",null,"A description must be provided along with parameters. Method descriptions should start with a sentence written in the third person declarative voice."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Operates on an instance of MyClass and returns something.\n *\n * @param {project.MyClass} obj Instance of MyClass which leads to a long\n *     comment that needs to be wrapped to two lines.\n * @return {boolean} Whether something occurred.\n */\nfunction someMethod(obj) {\n    // ...\n}\n")),(0,l.mdx)("h3",{id:"property-comments"},"Property comments"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Maximum number of things per pane.\n *\n * @type {number}\n */\nproject.MyClass.prototype.someProperty = 4;\n")),(0,l.mdx)("h3",{id:"jsdoc-tag-reference"},"JSDoc tag reference"),(0,l.mdx)("h4",{id:"const"},"@const"),(0,l.mdx)("p",null,"Marks a variable read-only and suitable for inlining. Generates warnings if it is rewritten. Constants should also be ALL_CAPS, but the annotation should help eliminate reliance on the naming convention."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/** @const */ var DEFAULT_TIMEZONE = 'GMT';\n\n/** @const */ MyClass.DEFAULT_TIMEZONE = 'GMT';\n\n/**\n * My namespace's default timezone.\n *\n * @const\n * @type {string}\n */\nmynamespace.DEFAULT_TIMEZONE = 'GMT';\n")),(0,l.mdx)("h4",{id:"extends"},"@extends"),(0,l.mdx)("p",null,"Used with ",(0,l.mdx)("inlineCode",{parentName:"p"},"@constructor")," to indicate that a class inherits from another class."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Immutable empty node list.\n *\n * @constructor\n * @extends project.MyClass.BasicNodeList\n */\nproject.MyClass.EmptyNodeList = function() {\n    // ...\n};\n")),(0,l.mdx)("h4",{id:"interface"},"@interface"),(0,l.mdx)("p",null,"Used to indicate that the function defines an interface."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * A shape.\n *\n * @interface\n */\nfunction Shape() {};\nShape.prototype.draw = function() {};\n\n/**\n * A polygon.\n *\n * @interface\n * @extends {Shape}\n */\nfunction Polygon() {};\nPolygon.prototype.getSides = function() {};\n")),(0,l.mdx)("h4",{id:"implements"},"@implements"),(0,l.mdx)("p",null,"Used with ",(0,l.mdx)("inlineCode",{parentName:"p"},"@constructor")," to indicate that a class implements an interface."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * A shape.\n *\n * @interface\n */\nfunction Shape() {};\nShape.prototype.draw = function() {};\n\n/**\n * @constructor\n * @implements {Shape}\n */\nfunction Square() {};\nSquare.prototype.draw = function() {\n    // ...\n};\n")),(0,l.mdx)("h4",{id:"lends"},"@lends"),(0,l.mdx)("p",null,"Indicates that the keys of an object literal should be treated as properties of some other object. This annotation should only appear on object literals."),(0,l.mdx)("p",null,'Please note that the name in braces is not a type name like in other annotations. It\'s an object name. It names the object on which the properties are "lent". For example, ',(0,l.mdx)("inlineCode",{parentName:"p"},"@type {Foo}"),' means "an instance of Foo," but ',(0,l.mdx)("inlineCode",{parentName:"p"},"@lends {Foo}"),' means "the constructor Foo".'),(0,l.mdx)("p",null,"Please refer to ",(0,l.mdx)("a",{parentName:"p",href:"https://code.google.com/p/jsdoc-toolkit/wiki/TagLends"},"JSDoc Toolkit")," for more information about this annotation."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"project.MyClass.extend(\n    Button.prototype,\n    /** @lends {Button.prototype} */ {\n        isButton: function() {return true;}\n    }\n);\n")),(0,l.mdx)("h4",{id:"override"},"@override"),(0,l.mdx)("p",null,"Indicates that a method or property of a subclass intentionally hides a method or property of the superclass. If no other documentation is included, the method or property also inherits documentation from its superclass."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @return {string} Human-readable representation of project.SubClass.\n * @override\n */\nproject.SubClass.prototype.toString() {\n    // ...\n};\n")),(0,l.mdx)("h4",{id:"param"},"@param"),(0,l.mdx)("p",null,"Used with method, function and constructor calls to document the arguments of a function."),(0,l.mdx)("p",null,"Type names must be enclosed in curly braces. If the type is omitted, the compiler will not type-check the parameter."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Queries a Storage for items.\n *\n * @param {number} groupNum Subgroup id to query.\n * @param {string|number|null} term An itemName,\n *     or itemId, or null to search everything.\n */\nnamespace.Storage.prototype.query = function(groupNum, term) {\n   // ...\n};\n")),(0,l.mdx)("h4",{id:"return"},"@return"),(0,l.mdx)("p",null,'Used with method and function calls to document the return type. When writing descriptions for boolean parameters, prefer "Whether the component is visible" to "True if the component is visible, false otherwise". If there is no return value, do not use an ',(0,l.mdx)("inlineCode",{parentName:"p"},"@return")," tag."),(0,l.mdx)("p",null,"Type names must be enclosed in curly braces. If the type is omitted, the compiler will not type-check the return value."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @return {string} The hex ID of the last item.\n */\nnamespace.Storage.prototype.getLastId = function() {\n    // ...\n    return id;\n};\n")),(0,l.mdx)("h4",{id:"this"},"@this"),(0,l.mdx)("p",null,"The type of the object in whose context a particular method is called. Required when the this keyword is referenced from a function that is not a prototype method."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"pinto.chat.RosterWidget.extern('getRosterElement',\n    /**\n     * Returns the roster widget element.\n     *\n     * @this pinto.chat.RosterWidget\n     * @return {Element}\n     */\n    function() {\n        return this._getWrappedComponent().getElement();\n    }\n);\n")),(0,l.mdx)("h4",{id:"type"},"@type"),(0,l.mdx)("p",null,"Identifies the type of a variable, property, or expression."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * The message hex ID.\n *\n * @type {string}\n */\nvar hexId = hexId;\n")),(0,l.mdx)("h4",{id:"typedef"},"@typedef"),(0,l.mdx)("p",null,"This annotation can be used to declare an alias of a more complex type."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"/** @typedef {(string|number)} */\nnamespace.NumberLike;\n\n/** @param {namespace.NumberLike} x A number or a string. */\nnamespace.readNumber = function(x) {\n    // ...\n}\n")),(0,l.mdx)("h3",{id:"javascript-types"},"JavaScript types"),(0,l.mdx)("h4",{id:"number"},"number"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"1\n1.0\n-5\n1e5\nMath.PI\n")),(0,l.mdx)("h4",{id:"number-1"},"Number"),(0,l.mdx)("p",null,"Number object."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"new Number(true)\n")),(0,l.mdx)("h4",{id:"string"},"string"),(0,l.mdx)("p",null,"String value."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"'Hello'\n\"World\"\nString(42)\n")),(0,l.mdx)("h4",{id:"string-1"},"String"),(0,l.mdx)("p",null,"String object."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"new String('Hello')\nnew String(42)\n")),(0,l.mdx)("h4",{id:"boolean"},"boolean"),(0,l.mdx)("p",null,"Boolean value."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"true\nfalse\nBoolean(0)\n")),(0,l.mdx)("h4",{id:"boolean-1"},"Boolean"),(0,l.mdx)("p",null,"Boolean object."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"new Boolean(true)\n")),(0,l.mdx)("h4",{id:"regexp"},"RegExp"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"new RegExp('hello')\n/world/g\n")),(0,l.mdx)("h4",{id:"date"},"Date"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"new Date\nnew Date()\n")),(0,l.mdx)("h4",{id:"null"},"null"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"null\n")),(0,l.mdx)("h4",{id:"undefined"},"undefined"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"undefined\n")),(0,l.mdx)("h4",{id:"void"},"void"),(0,l.mdx)("p",null,"No return value."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"function f() {\n   return;\n}\n")),(0,l.mdx)("h4",{id:"array"},"Array"),(0,l.mdx)("p",null,"Untyped array."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"['foo', 0.3, null]\n[]\n")),(0,l.mdx)("h4",{id:"arraynumber"},"Array.","<","number",">"),(0,l.mdx)("p",null,"An array of numbers."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"[11, 22, 33]\n")),(0,l.mdx)("h4",{id:"arrayarraystring"},"Array.","<","Array.","<","string",">",">"),(0,l.mdx)("p",null,"Array of arrays of strings."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"[['one', 'two', 'three'], ['foo', 'bar']]\n")),(0,l.mdx)("h4",{id:"object"},"Object"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"{}\n{foo: 'abc', bar: 123, baz: null}\n")),(0,l.mdx)("h4",{id:"objectstring"},"Object.","<","string",">"),(0,l.mdx)("p",null,"An object. In the object, the values are strings."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"{'foo': 'bar'}\n")),(0,l.mdx)("h4",{id:"objectnumberstring"},"Object.","<","number,string",">"),(0,l.mdx)("p",null,"An object. In the object, the keys are numbers and the values are strings. Note that in JavaScript, the keys are always implicitly converted to strings, so obj","['1']"," == obj","[1]",". So the key will always be a string in for...in loops. But the compiler will verify the type if the key when indexing into the object."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"var obj = {};\nobj[1] = 'bar';\n")),(0,l.mdx)("h4",{id:"function"},"Function"),(0,l.mdx)("p",null,"Function object"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"function(x, y) {\n   return x * y;\n}\n")),(0,l.mdx)("h4",{id:"functionnumber-number-number"},"function(number, number): number"),(0,l.mdx)("p",null,"Function value"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"function(x, y) {\n   return x * y;\n}\n")),(0,l.mdx)("h4",{id:"someclass"},"SomeClass"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"/** @constructor */\nfunction SomeClass() {}\n\nnew SomeClass();\n")),(0,l.mdx)("h4",{id:"someinterface"},"SomeInterface"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"/** @interface */\nfunction SomeInterface() {}\n\nSomeInterface.prototype.draw = function() {};\n")),(0,l.mdx)("h4",{id:"projectmyclass"},"project.MyClass"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"/** @constructor */\nproject.MyClass = function () {}\n\nnew project.MyClass()\n")),(0,l.mdx)("h4",{id:"element"},"Element"),(0,l.mdx)("p",null,"Elements in the DOM."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"document.createElement('div')\n")),(0,l.mdx)("h4",{id:"node"},"Node"),(0,l.mdx)("p",null,"Node in the DOM."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"document.body.firstChild\n")),(0,l.mdx)("h4",{id:"htmlinputelement"},"HTMLInputElement"),(0,l.mdx)("p",null,"A specific type of DOM element."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"htmlDocument.getElementsByTagName('input')[0]\n")),(0,l.mdx)("h3",{id:"javascript-type-language"},"JavaScript type language"),(0,l.mdx)("h4",{id:"type-name"},"Type name"),(0,l.mdx)("p",null,"Simply the name of a type."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"{boolean}, {Window}, {namespace.ui.Menu}\n")),(0,l.mdx)("h4",{id:"type-application"},"Type application"),(0,l.mdx)("p",null,"Parametrizes a type, by applying a set of type arguments to that type. The idea is analogous to generics in Java."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// An array of strings.\n{Array. <string>}\n\n// An object. In the object, the keys are strings and the values are numbers.\n{Object. }\n")),(0,l.mdx)("h4",{id:"type-union"},"Type union"),(0,l.mdx)("p",null,"Indicates that a value might have type A OR type B."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// A number or a boolean.\n{(number|boolean)}\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Deprecated syntaxes:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"{(number,boolean)}, {number|boolean}, {(number||boolean)}\n")),(0,l.mdx)("h4",{id:"record-type"},"Record type"),(0,l.mdx)("p",null,"Indicates that the value has the specified members with the specified types. In this case, ",(0,l.mdx)("inlineCode",{parentName:"p"},"myNum")," with a type ",(0,l.mdx)("inlineCode",{parentName:"p"},"number")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"myObject")," with any type. Note that the braces are part of the type syntax. For example, to denote an ",(0,l.mdx)("inlineCode",{parentName:"p"},"Array")," of objects that have a ",(0,l.mdx)("inlineCode",{parentName:"p"},"length")," property, you might write ",(0,l.mdx)("inlineCode",{parentName:"p"},"Array.<{length}>"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// An anonymous type with the given type members.\ncodemyNum: number, myObject}}\n")),(0,l.mdx)("h4",{id:"nullable-type"},"Nullable type"),(0,l.mdx)("p",null,"Indicates that a value is type A or ",(0,l.mdx)("inlineCode",{parentName:"p"},"null"),". By default, all object types are nullable."),(0,l.mdx)(i,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,l.mdx)("p",null,"Function types are not nullable."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// A number or NULL.\n{?number}\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Deprecated syntax:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"{number?}\n")),(0,l.mdx)("h4",{id:"non-nullable-type"},"Non-nullable type"),(0,l.mdx)("p",null,"Indicates that a value is type A and not null. By default, all value types (boolean, number, string, and undefined) are not nullable."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// An Object, but never the null value.\n{!Object}\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Deprecated syntax:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"{Object!}\n")),(0,l.mdx)("h4",{id:"function-type"},"Function type"),(0,l.mdx)("p",null,"Specifies a function."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// A function that takes two arguments (a string and a boolean), and has an unknown return value.\n{function(string, boolean)}\n")),(0,l.mdx)("h4",{id:"function-return-type"},"Function return type"),(0,l.mdx)("p",null,"Specifies a function return type."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// A function that takes no arguments and returns a number.\n{function(): number}\n")),(0,l.mdx)("h4",{id:"function-this-type"},"Function ",(0,l.mdx)("inlineCode",{parentName:"h4"},"this")," type"),(0,l.mdx)("p",null,"Specifies the context type of a function type."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// A function that takes one argument (a string), and executes in the context of a namespace.ui.Menu.\n{function(this:namespace.ui.Menu, string)}\n")),(0,l.mdx)("h4",{id:"function-new-type"},"Function ",(0,l.mdx)("inlineCode",{parentName:"h4"},"new")," type"),(0,l.mdx)("p",null,"Specifies the constructed type of a constructor."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// A constructor that takes one argument (a string), and creates a new instance of namespace.ui.Menu when called with the 'new' keyword.\n{function(new:namespace.ui.Menu, string)}\n")),(0,l.mdx)("h4",{id:"variable-arguments"},"Variable arguments"),(0,l.mdx)("p",null,"Specifies variable arguments to a function."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// A function that takes one argument (a string), and then a variable number of arguments that must be numbers.\n{function(string, ...[number]): number}\n")),(0,l.mdx)("h4",{id:"variable-arguments-in-param-annotations"},"Variable arguments (in ",(0,l.mdx)("inlineCode",{parentName:"h4"},"@param")," annotations)"),(0,l.mdx)("p",null,"Specifies that the annotated function accepts a variable number of arguments."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// A variable number of arguments to an annotated function.\n@param {...number} var_args\n")),(0,l.mdx)("h4",{id:"functional-optional-arguments"},"Functional optional arguments"),(0,l.mdx)("p",null,"Specifies optional arguments to a function."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// A function that takes one optional, nullable string and one optional number as arguments. The = syntax is only for function type declarations.\n{function(?string=, number=)}\n")),(0,l.mdx)("h4",{id:"functional-optional-arguments-in-param-annotations"},"Functional optional arguments (in ",(0,l.mdx)("inlineCode",{parentName:"h4"},"@param")," annotations)"),(0,l.mdx)("p",null,"Specifies that the annotated function accepts an optional argument."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// An optional parameter of type number.\n@param {number=} opt_argument\n")),(0,l.mdx)("h4",{id:"the-all-type"},"The ALL type"),(0,l.mdx)("p",null,"Indicates that the variable can take on any type."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"{*}\n")),(0,l.mdx)("h4",{id:"the-unknown-type"},"The UNKNOWN type"),(0,l.mdx)("p",null,"Indicates that the variable can take on any type, and the compiler should not type-check any uses of it."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"{?}\n")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-coding-standards-js-docblock-md-1e69e8258b2193bc2604.js.map