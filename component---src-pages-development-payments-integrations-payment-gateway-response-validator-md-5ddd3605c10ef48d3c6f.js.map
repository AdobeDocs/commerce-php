{"version":3,"file":"component---src-pages-development-payments-integrations-payment-gateway-response-validator-md-5ddd3605c10ef48d3c6f.js","mappings":"+RASaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,SAAC,IAAD,CAAMA,QAAQ,UACd,eACE,GAAM,sBACH,uBACL,kBAAK,oRACL,kBAAK,kIAAgI,cAAGC,WAAW,IAC/I,KAAQ,0FACL,UAAc,MACrB,eACE,GAAM,cACH,eACL,kBAAK,sCAAoC,cAAGA,WAAW,IACnD,KAAQ,mHACP,uBAAYA,WAAW,KAAM,+DAClC,kBAAK,gCAA8B,cAAGA,WAAW,IAC7C,KAAQ,gHACP,uBAAYA,WAAW,KAAM,4DAClC,kBAAK,wIAAsI,cAAGA,WAAW,IACrJ,KAAQ,4CACL,wBAA4B,MACnC,eACE,GAAM,0BACH,2BACL,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,cAAGA,WAAW,IAC7B,KAAQ,iHACL,6DAAiE,yIAE1E,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,cAAGA,WAAW,IAC7B,KAAQ,kHACL,8DAAkE,6LAE3E,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,cAAGA,WAAW,IAC7B,KAAQ,sGACL,kDAAsD,qJAGjE,eACE,GAAM,WACH,YACL,kBAAK,6IACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,+zCA6CP,kBAAK,2JACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,mTASP,kBAAK,uHAGR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/payment-gateway/response-validator.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"response-validator\"\n    }}>{`Response Validator`}</h1>\n    <p>{`Response Validator is a component of the Adobe Commerce payment provider gateway that performs gateway response verification. This may include low level data formatting, security verification, and even execution of some business logic required by the store configuration.`}</p>\n    <p>{`Response Validator returns a Result object, containing validation result as Boolean value and errors description as a list of `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/lib/internal/Magento/Framework/Phrase.php\"\n      }}>{`Phrase`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h2>\n    <p>{`Response Validator must implement `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Validator/ValidatorInterface.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Payment\\\\Gateway\\\\Validator\\\\ValidatorInterface`}</inlineCode></a></p>\n    <p>{`Result class must implement `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Validator/ResultInterface.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Payment\\\\Gateway\\\\Validator\\\\ResultInterface`}</inlineCode></a></p>\n    <p>{`A payment provider integration can have multiple response validators, that should be added to the provider's validator's pool using `}<a parentName=\"p\" {...{\n        \"href\": \"../../components/dependency-injection.md\"\n      }}>{`dependency injection`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"useful-implementations\"\n    }}>{`Useful implementations`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Validator/AbstractValidator.php\"\n          }}>{`\\\\Magento\\\\Payment\\\\Gateway\\\\Validator\\\\AbstractValidator`}</a>{`: an abstract class with ability to create a Result object. Can be inherited from by particular response validator implementations.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Validator/ValidatorComposite.php\"\n          }}>{`\\\\Magento\\\\Payment\\\\Gateway\\\\Validator\\\\ValidatorComposite`}</a>{`: a chain of Validator objects, which are executed one by one and the result gets aggregated into one Result object. This chain can be configured to stop when certain validators fail.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Validator/Result.php\"\n          }}>{`\\\\Magento\\\\Payment\\\\Gateway\\\\Validator\\\\Result`}</a>{`: base class for Result object. You still have an ability to create a Result of your own, but the default one covers the most amount of cases.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`In the following example a response validator is implemented and added to the pool of the Braintree payment provider request validators.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class AcceptValidator extends AbstractValidator\n{\n    /**\n     * Performs domain-related validation for business object\n     *\n     * @param array $validationSubject\n     * @return ResultInterface\n     */\n    public function validate(array $validationSubject)\n    {\n        $response = SubjectReader::readResponse($validationSubject);\n        $paymentDO = SubjectReader::readPayment($validationSubject);\n\n        $isValid = true;\n        $fails = [];\n\n        $statements = [\n            [\n                $paymentDO->getOrder()->getCurrencyCode() === $response['authCurrency'],\n                __('Currency doesn\\\\'t match.')\n            ],\n            [\n                sprintf(\n                    '%.2F',\n                    $paymentDO->getOrder()->getGrandTotalAmount()) === $response['authCost'],\n                    __('Amount doesn\\\\'t match.'\n                )\n            ],\n            [\n                in_array($response['authMode'], ['A', 'E']),\n                __('Not supported response.')\n            ]\n        ];\n\n        foreach ($statements as $statementResult) {\n            if (!$statementResult[0]) {\n                $isValid = false;\n                $fails[] = $statementResult[1];\n            }\n        }\n\n        return $this->createResult($isValid, $fails);\n    }\n}\n`}</code></pre>\n    <p>{`Now, the newly added validator should be specified for a specific command. Below is an example of specifying a validator for an authorization command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`...\n<virtualType name=\"BraintreeAuthorizeCommand\" type=\"Magento\\\\Payment\\\\Gateway\\\\Command\\\\GatewayCommand\">\n    <arguments>\n        ...\n        <argument name=\"validator\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\Validator\\\\AcceptValidator</argument>\n    </arguments>\n</virtualType>\n...\n`}</code></pre>\n    <p>{`(This code sample was created for demonstration purposes only, it differs from the actual Braintree configuration).`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}