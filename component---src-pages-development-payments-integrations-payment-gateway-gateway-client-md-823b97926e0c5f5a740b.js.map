{"version":3,"file":"component---src-pages-development-payments-integrations-payment-gateway-gateway-client-md-823b97926e0c5f5a740b.js","mappings":"+RASaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,SAAC,IAAD,CAAMA,QAAQ,UACd,eACE,GAAM,kBACH,mBACL,kBAAK,kJACL,eACE,GAAM,mBACH,oBACL,kBAAK,gDAA8C,cAAGC,WAAW,IAC7D,KAAQ,2GACP,uBAAYA,WAAW,KAAM,qDAAqE,MACvG,kBAAK,uCAAqC,cAAGA,WAAW,IACpD,KAAQ,sBACP,uBAAYA,WAAW,KAAM,aAA6B,wEAAsE,cAAGA,WAAW,IAC/I,KAAQ,4CACL,wBAA4B,MACnC,eACE,GAAM,2BACH,4BACL,kBAAK,6EACL,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,cAAGA,WAAW,IAC7B,KAAQ,sGACL,sDAET,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,cAAGA,WAAW,IAC7B,KAAQ,sGACL,uDAGX,eACE,GAAM,WACH,YACL,kBAAK,uEAAqE,uBAAYA,WAAW,KAAM,UAAuB,MAC9H,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,gXASP,eACE,GAAM,oBACH,qBACL,kBAAK,yEAAuE,cAAGA,WAAW,IACtF,KAAQ,sBACL,oBAAwB,2FAC/B,kBAAK,0BAAwB,cAAGA,WAAW,IACvC,KAAQ,0GACL,oBAAwB,yCAC/B,kBAAK,4CAA0C,cAAGA,WAAW,IACzD,KAAQ,mHACL,6DAAiE,MACxE,kBAAK,0DACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,2IAOP,kBAAK,qHACL,kBAAK,wLACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,iZAcV,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/payment-gateway/gateway-client.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"gateway-client\"\n    }}>{`Gateway Client`}</h1>\n    <p>{`Gateway Client is a component of the Adobe Commerce payment gateway that transfers the payload to the payment provider and gets the response.`}</p>\n    <h2 {...{\n      \"id\": \"basic-interface\"\n    }}>{`Basic interface`}</h2>\n    <p>{`The basic interface for a gateway client is `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Http/ClientInterface.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Payment\\\\Gateway\\\\Http\\\\ClientInterface`}</inlineCode></a>{`.`}</p>\n    <p>{`A gateway client receives a called `}<a parentName=\"p\" {...{\n        \"href\": \"#transfer-factory\"\n      }}><inlineCode parentName=\"a\">{`Transfer`}</inlineCode></a>{` object. The client may be configured with response converter using `}<a parentName=\"p\" {...{\n        \"href\": \"../../components/dependency-injection.md\"\n      }}>{`dependency injection`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"default-implementations\"\n    }}>{`Default implementations`}</h2>\n    <p>{`The following gateway client implementations can be used out-of-the-box:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Http/Client/Zend.php\"\n          }}>{`\\\\Magento\\\\Payment\\\\Gateway\\\\Http\\\\Client\\\\Zend`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Http/Client/Soap.php\"\n          }}>{`\\\\Magento\\\\Payment\\\\Gateway\\\\Http\\\\Client\\\\Soap`}</a></p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Following is the illustration of how a Zend client can be added in `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`...\n<virtualType name=\"HtmlConverterZendClient\" type=\"Magento\\\\Payment\\\\Gateway\\\\Http\\\\Client\\\\Zend\">\n    <arguments>\n        <argument name=\"converter\" xsi:type=\"object\">Magento\\\\Payment\\\\Gateway\\\\Http\\\\Converter\\\\HtmlFormConverter</argument>\n        <argument name=\"logger\" xsi:type=\"object\">CustomLogger</argument>\n    </arguments>\n</virtualType>\n...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"transfer-factory\"\n    }}>{`Transfer Factory`}</h2>\n    <p>{`Transfer Factory allows to create transfer object with all data from `}<a parentName=\"p\" {...{\n        \"href\": \"request-builder.md\"\n      }}>{`request builders`}</a>{`. This object is then used by Gateway Client to process requests to payment processor.`}</p>\n    <p>{`Transfer Factory uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Http/TransferBuilder.php\"\n      }}>{`Transfer Builder`}</a>{` to set required request parameters.`}</p>\n    <p>{`The basic Transfer Factory interface is `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Payment/Gateway/Http/TransferFactoryInterface.php\"\n      }}>{`Magento\\\\Payment\\\\Gateway\\\\Http\\\\TransferFactoryInterface`}</a>{`.`}</p>\n    <p>{`The similar example of factory might looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{` public function create(array $request)\n {\n    return $this->transferBuilder\n        ->setBody($request)\n        ->build();\n }\n`}</code></pre>\n    <p>{`In this example transfer factory simply sets request data using Transfer Builder and returns the created object.`}</p>\n    <p>{`Following is an example of a more complicated behavior. Here transfer factory sets all required data to process requests using API credentials and all data is sent in JSON format.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`public function create(array $request)\n{\n    return $this->transferBuilder\n        ->setMethod(Curl::POST)\n        ->setHeaders(['Content-Type' => 'application/json'])\n        ->setBody(json_encode($request, JSON_UNESCAPED_SLASHES))\n        ->setAuthUsername($this->getApiKey())\n        ->setAuthPassword($this->getApiPassword())\n        ->setUri($this->getUrl())\n        ->build();\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}