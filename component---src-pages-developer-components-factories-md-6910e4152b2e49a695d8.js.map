{"version":3,"file":"component---src-pages-developer-components-factories-md-6910e4152b2e49a695d8.js","mappings":"8QAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,YADR,aAGA,uIAAwH,cAAGC,WAAW,IAClI,KAAQ,uCAD4G,UAAxH,sDAG6C,uBAAYA,WAAW,KAAvB,iBAH7C,wBAIA,eACE,GAAM,iCADR,oBAEuB,uBAAYA,WAAW,MAAvB,mBACvB,0BAAW,uBAAYA,WAAW,KAAvB,qCAAX,iKACkF,uBAAYA,WAAW,KAAvB,iBADlF,mBAEA,uCAAwB,cAAGA,WAAW,IAClC,KAAQ,0CADY,aAAxB,2CAEiE,uBAAYA,WAAW,KAAvB,iBAFjE,qCAGA,0GAA2F,uBAAYA,WAAW,KAAvB,iBAA3F,MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,o4BAyCL,eACE,GAAM,qBADR,sBAGA,mJAAoI,cAAGA,WAAW,IAC9I,KAAQ,sBADwH,2BAApI,iFAG6D,cAAGA,WAAW,IACvE,KAAQ,2BADiD,kBAH7D,uDAMA,6DAA8C,uBAAYA,WAAW,KAAvB,uBAA9C,WAAwH,uBAAYA,WAAW,KAAvB,gBAAxH,wDACA,8DAA+C,uBAAYA,WAAW,KAAvB,qCAA/C,oDAAgL,cAAGA,WAAW,IAC1L,KAAQ,sFACP,uBAAYA,WAAW,KAAvB,+BAFL,MAGA,eACE,GAAM,mBADR,oBAGA,iGAAkF,cAAGA,WAAW,IAC5F,KAAQ,2BADsE,wBAAlF,MAGA,sEAAuD,uBAAYA,WAAW,KAAvB,gBAAvD,uCACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,gIAML,kCAAmB,uBAAYA,WAAW,KAAvB,YAAnB,sEACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,+CAIL,uFAAwE,uBAAYA,WAAW,KAAvB,YAAxE,sEAAkM,uBAAYA,WAAW,KAAvB,iBAAlM,iCACA,oEAAqD,uBAAYA,WAAW,KAAvB,qCAArD,+DACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,4FAML,0BAAW,uBAAYA,WAAW,KAAvB,QAAX,iBAA4E,uBAAYA,WAAW,KAAvB,SAA5E,oEAAiM,uBAAYA,WAAW,KAAvB,UAAjM,kBACA,eACE,GAAM,cADR,eAGA,+JAAgJ,uBAAYA,WAAW,KAAvB,UAAhJ,MACA,0CAA2B,cAAGA,WAAW,IACrC,KAAQ,mFACP,uBAAYA,WAAW,KAAvB,qBAFL,iBAEsF,uBAAYA,WAAW,KAAvB,UAFtF,wCAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,0IAIL,uEAAwD,cAAGA,WAAW,IAClE,KAAQ,wGACP,uBAAYA,WAAW,KAAvB,SAFL,wBAEiF,cAAGA,WAAW,IAC3F,KAAQ,mHACP,uBAAYA,WAAW,KAAvB,uBAJL,oCAKmB,cAAGA,WAAW,IAC7B,KAAQ,uCADO,UALnB,0BAO6C,uBAAYA,WAAW,KAAvB,6BAP7C,mGAOqN,uBAAYA,WAAW,KAAvB,QAPrN,cAYJJ,EAAWK,gBAAiB","sources":["webpack://commerce-php/./src/pages/developer/components/factories.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Factories are service classes that instantiate non-injectable classes, that is, models that represent a database `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/entity\"\n      }}>{`entity`}</a>{`.\nThey create a layer of abstraction between the `}<inlineCode parentName=\"p\">{`ObjectManager`}</inlineCode>{` and business code.`}</p>\n    <h2 {...{\n      \"id\": \"relationship-to-objectmanager\"\n    }}>{`Relationship to `}<inlineCode parentName=\"h2\">{`ObjectManager`}</inlineCode></h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\ObjectManager`}</inlineCode>{` is the class responsible for instantiating objects in the application.\nAdobe Commerce and Magento Open Source prohibit depending on and directly using the `}<inlineCode parentName=\"p\">{`ObjectManager`}</inlineCode>{` in your code.`}</p>\n    <p>{`Factories are an `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/exception\"\n      }}>{`exception`}</a>{` to this rule because they require the `}<inlineCode parentName=\"p\">{`ObjectManager`}</inlineCode>{` to instantiate specific models.`}</p>\n    <p>{`The following example illustrates the relationship between a simple factory and the `}<inlineCode parentName=\"p\">{`ObjectManager`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright Â© Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\\\Framework\\\\App\\\\Config;\n\nuse Magento\\\\Framework\\\\ObjectManagerInterface;\nuse Magento\\\\Framework\\\\Simplexml\\\\Element;\nuse Magento\\\\Framework\\\\App\\\\Config\\\\Base;\n\nclass BaseFactory\n{\n    /**\n     * @var ObjectManagerInterface\n     */\n    protected $_objectManager;\n\n    /**\n     * @param ObjectManagerInterface $objectManager\n     */\n    public function __construct(ObjectManagerInterface $objectManager)\n    {\n        $this->_objectManager = $objectManager;\n    }\n\n    /**\n     * Create config model\n     *\n     * @param string|Element $sourceData\n     * @return Base\n     */\n    public function create($sourceData = null): Base\n    {\n        return $this->_objectManager->create(Base::class, ['sourceData' => $sourceData]);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-factories\"\n    }}>{`Writing factories`}</h2>\n    <p>{`Unless you require specific behavior for your factory classes, you do not need to explicitly define them because they are an `}<a parentName=\"p\" {...{\n        \"href\": \"code-generation.md\"\n      }}>{`automatically generated`}</a>{` class type.\nWhen you reference a factory in a class constructor, Magento's `}<a parentName=\"p\" {...{\n        \"href\": \"object-manager/index.md\"\n      }}>{`object manager`}</a>{` generates the factory class if it does not exist.`}</p>\n    <p>{`Factories follow the naming convention `}<inlineCode parentName=\"p\">{`<class-type>Factory`}</inlineCode>{` where `}<inlineCode parentName=\"p\">{`<class-type>`}</inlineCode>{` is the name of the class the factory instantiates.`}</p>\n    <p>{`For example the automatically generated `}<inlineCode parentName=\"p\">{`Magento\\\\Cms\\\\Model\\\\BlockFactory`}</inlineCode>{` class is a factory that instantiates the class `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Cms/Model/Block.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Cms\\\\Model\\\\Block`}</inlineCode></a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"using-factories\"\n    }}>{`Using factories`}</h2>\n    <p>{`You can get the singleton instance of a factory for a specific model using `}<a parentName=\"p\" {...{\n        \"href\": \"dependency-injection.md\"\n      }}>{`dependency injection`}</a>{`.`}</p>\n    <p>{`The following example shows a class getting the `}<inlineCode parentName=\"p\">{`BlockFactory`}</inlineCode>{` instance through the constructor:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`function __construct ( \\\\Magento\\\\Cms\\\\Model\\\\BlockFactory $blockFactory) {\n    $this->blockFactory = $blockFactory;\n}\n`}</code></pre>\n    <p>{`Calling the `}<inlineCode parentName=\"p\">{`create()`}</inlineCode>{` method on a factory gives you an instance of its specific class:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$block = $this->blockFactory->create();\n`}</code></pre>\n    <p>{`For classes that require parameters, the automatically generated `}<inlineCode parentName=\"p\">{`create()`}</inlineCode>{` function accepts an array of parameters that it passes on to the `}<inlineCode parentName=\"p\">{`ObjectManager`}</inlineCode>{` to create the target class.`}</p>\n    <p>{`The example below shows the construction of a `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Framework\\\\FlagFactory`}</inlineCode>{` object by passing in an array of parameters to a factory:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$flag = $this->flagFactory->create([\n  'data' =>  ['flag_code' => 'something']\n]);\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Flag`}</inlineCode>{` class has a `}<inlineCode parentName=\"p\">{`$data`}</inlineCode>{` constructor parameter which corresponds to the data key in the `}<inlineCode parentName=\"p\">{`create`}</inlineCode>{` array above.`}</p>\n    <h3 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h3>\n    <p>{`Factories are smart enough to resolve dependencies and allow you to get the correct instance of an interface as defined in your module's `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`.`}</p>\n    <p>{`For example, in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/CatalogInventory\"\n      }}><inlineCode parentName=\"a\">{`CatalogInventory`}</inlineCode></a>{` module, the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file contains the following entry:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<preference for=\"Magento\\\\CatalogInventory\\\\Api\\\\Data\\\\StockItemInterface\" type=\"Magento\\\\CatalogInventory\\\\Model\\\\Stock\\\\Item\" />\n`}</code></pre>\n    <p>{`It instructs the application to use the specific `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/CatalogInventory/Model/Stock/Item.php\"\n      }}><inlineCode parentName=\"a\">{`Item`}</inlineCode></a>{` class wherever the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/CatalogInventory/Api/Data/StockItemInterface.php\"\n      }}><inlineCode parentName=\"a\">{`StockItemInterface`}</inlineCode></a>{` is used.\nWhen a class in that `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/module\"\n      }}>{`module`}</a>{` includes the factory `}<inlineCode parentName=\"p\">{`StockItemInterfaceFactory`}</inlineCode>{` as a dependency, the application generates a factory that is capable of creating the specific `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{` objects.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}