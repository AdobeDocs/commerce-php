{"version":3,"file":"component---src-pages-developer-cli-commands-create-new-md-c3bbe0f89a36759c812c.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/developer/cli-commands/create-new.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"overview-of-adding-cli-commands-cli-add-over\"\n    }}>{`Overview of adding CLI commands {#cli-add-over}`}</h2>\n    <p>{`Adobe Commerce and Magento Open Source enables your component to add commands to our `}<a parentName=\"p\" {...{\n        \"href\": \"https://symfony.com/doc/current/components/console.html\"\n      }}>{`Symfony-like command-line interface (CLI)`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"about-the-magento-cli\"\n    }}>{`About the Magento CLI`}</h3>\n    <p>{`Commerce has one command-line interface that performs both installation and configuration tasks: `}<inlineCode parentName=\"p\">{`<magento_root>/bin/magento`}</inlineCode>{`. The new interface performs multiple tasks, including:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Installing Commerce (and related tasks such as creating or updating the database schema, creating the deployment configuration, and so on).`}</li>\n      <li parentName=\"ul\">{`Clearing the cache.`}</li>\n      <li parentName=\"ul\">{`Managing indexes, including reindexing.`}</li>\n      <li parentName=\"ul\">{`Creating translation dictionaries and translation packages.`}</li>\n      <li parentName=\"ul\">{`Generating non-existent classes such as factories and interceptors for plug-ins, generating the dependency injection configuration for the object manager.`}</li>\n      <li parentName=\"ul\">{`Deploying static view files.`}</li>\n      <li parentName=\"ul\">{`Creating CSS from Less.`}</li>\n    </ul>\n    <p>{`Other benefits:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A single command (`}<inlineCode parentName=\"li\">{`<magento_root>/bin/magento list`}</inlineCode>{`) lists all available installation and configuration commands.`}</li>\n      <li parentName=\"ul\">{`Consistent user interface based on Symfony.`}</li>\n      <li parentName=\"ul\">{`The CLI is extensible so third party developers can \"plug in\" to it. This has the additional benefit of eliminating users' learning curve.`}</li>\n      <li parentName=\"ul\">{`Commands for disabled modules do not display.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h3>\n    <p>{`Before you begin, make sure you understand the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`All Magento command-line interface (CLI) commands rely on the application and must have access to its context, dependency injections, plug-ins, and so on.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`All CLI commands should be implemented in the scope of your `}<a parentName=\"p\" {...{\n            \"href\": \"https://glossary.magento.com/module\"\n          }}>{`module`}</a>{` and should depend on the module's status.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Your command can use the Object Manager and dependency injection features; for example, it can use `}<a parentName=\"p\" {...{\n            \"href\": \"../components/dependency-injection.md#constructor-injection\"\n          }}>{`constructor dependency injection`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Your command should have an unique `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`, defined in the `}<inlineCode parentName=\"p\">{`configure()`}</inlineCode>{` method of the Command class:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-php\"\n          }}>{`protected function configure()\n{\n   $this->setName('my:first:command');\n   $this->setDescription('This is my first console command.');\n\n   parent::configure();\n}\n...\n`}</code></pre>\n        <p parentName=\"li\">{`or in the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-xml\"\n          }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\">\n   ...\n   <type name=\"Magento\\\\CommandExample\\\\Console\\\\Command\\\\SomeCommand\">\n      <arguments>\n         <!-- configure the command name via constructor $name argument -->\n         <argument name=\"name\" xsi:type=\"string\">my:first:command</argument>\n      </arguments>\n   </type>\n   ...\n</config>\n`}</code></pre>\n        <p parentName=\"li\">{`or in the `}<inlineCode parentName=\"p\">{`__construct`}</inlineCode>{` method (declaration is similar to `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`):`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-php\"\n          }}>{`public function __construct()\n{\n    parent::__construct('my:first:command');\n}\n`}</code></pre>\n        <p parentName=\"li\">{`Otherwise the `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/symfony/console/blob/master/Application.php#L470\"\n          }}>{`Symfony`}</a>{` framework will return an `}<inlineCode parentName=\"p\">{`The command defined in \"<Command class>\" cannot have an empty name.`}</inlineCode>{` error.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"add-cli-commands-using-dependency-injection-cli-sample\"\n    }}>{`Add CLI commands using dependency injection {#cli-sample}`}</h2>\n    <p>{`The sample modules provide a demonstration of many programming techniques, including adding a CLI command using `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/dependency-injection\"\n      }}>{`dependency injection`}</a>{`. Look at the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2-samples/tree/master/sample-module-command\"\n      }}><inlineCode parentName=\"a\">{`sample-module-command`}</inlineCode></a>{` for an example. The module's `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2-samples/blob/master/sample-module-command/README.md\"\n      }}>{`README.md`}</a>{` discusses how to install it.`}</p>\n    <p>{`Following is a summary of the process:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a Command class (the recommended location is `}<inlineCode parentName=\"p\">{`<your component root dir>/Console/Command`}</inlineCode>{`).`}</p>\n        <p parentName=\"li\">{`See `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Store/Console/Command/StoreListCommand.php\"\n          }}><inlineCode parentName=\"a\">{`<Magento_Store_module_dir>/Console/Command/StoreListCommand.php`}</inlineCode></a>{` for example.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-php\"\n          }}>{`<?php\n    namespace Magento\\\\CommandExample\\\\Console\\\\Command;\n\n    use Symfony\\\\Component\\\\Console\\\\Command\\\\Command;\n    use Symfony\\\\Component\\\\Console\\\\Input\\\\InputInterface;\n    use Symfony\\\\Component\\\\Console\\\\Input\\\\InputOption;\n    use Symfony\\\\Component\\\\Console\\\\Output\\\\OutputInterface;\n\n    /**\n     * Class SomeCommand\n     */\n    class SomeCommand extends Command\n    {\n        const NAME = 'name';\n\n        /**\n         * @inheritDoc\n         */\n        protected function configure()\n        {\n            $this->setName('my:first:command');\n            $this->setDescription('This is my first console command.');\n            $this->addOption(\n                self::NAME,\n                null,\n                InputOption::VALUE_REQUIRED,\n                'Name'\n            );\n\n            parent::configure();\n        }\n\n        /**\n         * Execute the command\n         *\n         * @param InputInterface $input\n         * @param OutputInterface $output\n         *\n         * @return null|int\n         */\n        protected function execute(InputInterface $input, OutputInterface $output)\n        {\n            if ($name = $input->getOption(self::NAME)) {\n                $output->writeln('<info>Provided name is \\`' . $name . '\\`</info>');\n            }\n\n            $output->writeln('<info>Success Message.</info>');\n            $output->writeln('<error>An error encountered.</error>');\n            $output->writeln('<comment>Some Comment.</comment>');\n        }\n    }\n`}</code></pre>\n        <p parentName=\"li\">{`Style the output text by using `}<inlineCode parentName=\"p\">{`<error>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<info>`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`<comment>`}</inlineCode>{` tags. See `}<a parentName=\"p\" {...{\n            \"href\": \"https://symfony.com/doc/current/console/coloring.html\"\n          }}>{`Symfony`}</a>{` documentation for more information about styling.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Declare your Command class in `}<inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\Console\\\\CommandListInterface`}</inlineCode>{` and configure the command name using dependency injection (`}<inlineCode parentName=\"p\">{`<your component root dir>/etc/di.xml`}</inlineCode>{`):`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-xml\"\n          }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\">\n    ...\n    <type name=\"Magento\\\\Framework\\\\Console\\\\CommandListInterface\">\n        <arguments>\n            <argument name=\"commands\" xsi:type=\"array\">\n                <item name=\"commandexample_somecommand\" xsi:type=\"object\">Magento\\\\CommandExample\\\\Console\\\\Command\\\\SomeCommand</item>\n            </argument>\n        </arguments>\n    </type>\n    ...\n</config>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Clean the `}<a parentName=\"p\" {...{\n            \"href\": \"https://glossary.magento.com/cache\"\n          }}>{`cache`}</a>{`:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento cache:clean\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Regenerate the code:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento setup:di:compile\n`}</code></pre>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"result\"\n    }}>{`Result`}</h3>\n    <p>{`As a result, the new command `}<inlineCode parentName=\"p\">{`my:first:command`}</inlineCode>{` that accepts a `}<inlineCode parentName=\"p\">{`--name`}</inlineCode>{` parameter is ready to use.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento my:first:command --name 'John'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}