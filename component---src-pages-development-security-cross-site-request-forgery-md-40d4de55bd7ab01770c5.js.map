{"version":3,"file":"component---src-pages-development-security-cross-site-request-forgery-md-40d4de55bd7ab01770c5.js","mappings":"qRAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,mCACH,sCACL,kBAAK,4OAA0O,uBAAYC,WAAW,KAAM,UAAuB,ySACnS,kBAAK,mPACL,eACE,GAAM,4BACH,6BACL,kBAAK,8JAEL,kBAAK,4NAA0N,uBAAYA,WAAW,KAAM,+BAA4C,+EAA6E,eAAIA,WAAW,KAAM,QAAa,wCAAsC,uBAAYA,WAAW,KAAM,4DAAyE,oVAAkV,eAAIA,WAAW,KAAM,OAAY,MACt5B,kBAAK,gEAA8D,uBAAYA,WAAW,KAAM,0BAAuC,gHAA8G,uBAAYA,WAAW,KAAM,YAAyB,sCAAoC,uBAAYA,WAAW,KAAM,2CAAwD,iBACpa,eACE,GAAM,cACH,eACL,kBAAK,6TAA2T,uBAAYA,WAAW,KAAM,+DAA4E,0GAG5a,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/security/cross-site-request-forgery.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"cross-site-request-forgery-csrf\"\n    }}>{`Cross-site request forgery (CSRF)`}</h1>\n    <p>{`CSRF is an attack that tricks a user's browser into executing actions on a web application in which the user is currently authenticated. This attack can be achieved in multiple ways by crafting a form, or a resource reference, like `}<inlineCode parentName=\"p\">{`<img/>`}</inlineCode>{` \"src\" attribute, that will trigger a browser to send the request to the targeted website where a user may already be authenticated and posses the authentication cookies. The target website will consider this request genuine and will execute the action, like transferring money to an account.`}</p>\n    <p>{`The most effective way of protecting against these attacks is with CSRF tokens. These tokens are generated server-side and inserted into forms. When receiving a form, the server verifies that a valid CSRF token is included in the request.`}</p>\n    <h2 {...{\n      \"id\": \"built-in-csrf-protection\"\n    }}>{`Built-in CSRF protection`}</h2>\n    <p>{`There are anti-CSRF measures, like CSRF tokens, built into the framework. Only minimum action is\nrequired from developers to make these mechanisms work.`}</p>\n    <p>{`The framework cannot be sure which controller is intended to change state and thus needs to be protected. A developer must inform the framework whether a controller needs protection by implementing one, or multiple, `}<inlineCode parentName=\"p\">{`Http<Method>ActionInterface`}</inlineCode>{` interfaces. In most scenarios, controllers that accept forms would expect `}<em parentName=\"p\">{`POST`}</em>{` requests and must be marked by the `}<inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\App\\\\Action\\\\HttpPostActionInterface`}</inlineCode>{` interface. These are marker-interfaces that require no additional implementation. If a controller implements at least one of them, the framework will deny requests with HTTP methods that do not correspond to one of the interfaces. The CSRF protection mechanism will become active for controllers that expect any HTTP method other than `}<em parentName=\"p\">{`GET`}</em>{`.`}</p>\n    <p>{`CSRF tokens will be added to all forms automatically by the `}<inlineCode parentName=\"p\">{`lib/web/mage/common.js`}</inlineCode>{` file. If the file is disabled, you can manually add the CSRF token to a form by getting it from the global `}<inlineCode parentName=\"p\">{`FORM_KEY`}</inlineCode>{` variable on JS side, or by using `}<inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\Data\\\\Form\\\\FormKey`}</inlineCode>{` on backend.`}</p>\n    <h3 {...{\n      \"id\": \"exceptions\"\n    }}>{`Exceptions`}</h3>\n    <p>{`There may be some cases when a controller expects POST requests, or any other non-GET HTTP method, but those requests are not supposed to be protected from CSRF. For example, a webhook that expect a request from another service. In such cases, you can disable CSRF protection for a controller by implementing the `}<inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\App\\\\CsrfAwareActionInterface interface`}</inlineCode>{`. By doing so, you can also customize failed CSRF challenge exceptions or modify the validation logic.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}