{"version":3,"file":"component---src-pages-development-payments-integrations-vault-vault-di-md-f7a3d7dcf534d8f836a2.js","mappings":"+RASaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,SAAC,IAAD,CAAMA,QAAQ,UACd,eACE,GAAM,0BACH,2BACL,kBAAK,6IACL,eACE,GAAM,4BACH,6BACL,kBAAK,4DAA0D,cAAGC,WAAW,IACzE,KAAQ,0DACL,gBAAoB,wCAAsC,cAAGA,WAAW,IAC3E,KAAQ,+FACP,uBAAYA,WAAW,KAAM,yCAAyD,2CAAyC,cAAGA,WAAW,IAC9I,KAAQ,wGACP,uBAAYA,WAAW,KAAM,iDAAiE,MACnG,kBAAK,qEACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,+iBASP,kBAAK,wCAAsC,cAAGA,WAAW,IACrD,KAAQ,+CACL,yBAA6B,iCAA+B,uBAAYA,WAAW,KAAM,iBAA8B,qHAC9H,eACE,GAAM,uCACH,wCACL,kBAAK,0DAAwD,uBAAYA,WAAW,KAAM,uBAAoC,mBAAiB,cAAGA,WAAW,IACzJ,KAAQ,gDACL,0BAA8B,MACrC,kBAAK,0DACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,wOAUP,eACE,GAAM,mCACH,oCACL,kBAAK,wGAAsG,cAAGA,WAAW,IACrH,KAAQ,sCACL,gBAAoB,MAC3B,kBAAK,+CAA6C,cAAGA,WAAW,IAC5D,KAAQ,uGACL,yBAA6B,MACpC,kBAAK,yFACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,s2BAWP,kBAAK,uFAAqF,cAAGA,WAAW,IACpG,KAAQ,yCACL,oBAAwB,SAAO,cAAGA,WAAW,IAChD,KAAQ,0CACL,qBAAyB,MAChC,kBAAK,iFAA+E,uBAAYA,WAAW,KAAM,aAA0B,qCAC3I,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,+aAUP,eACE,GAAM,uBACH,wBACL,kBAAK,iLACL,kBAAK,6DACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,yPAMP,kBAAK,0JACL,kBAAK,2DACL,oBACE,eAAIA,WAAW,MAAO,mBAAiB,uBAAYA,WAAW,MAAO,sBAAmC,+BAE1G,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,wRAQP,oBACE,eAAIA,WAAW,MAAO,kDAExB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,gmBAeP,kBAAK,6KACL,kBAAK,yJAGR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/vault/vault-di.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"vault-di-configuration\"\n    }}>{`Vault DI configuration`}</h1>\n    <p>{`This section describes how to configure vault payment method and create payment actions, like authorize, and sale (authorize & capture).`}</p>\n    <h2 {...{\n      \"id\": \"add-vault-payment-facade\"\n    }}>{`Add vault payment facade`}</h2>\n    <p>{`To add a payment facade for the vault payment, create a `}<a parentName=\"p\" {...{\n        \"href\": \"../../build/dependency-injection-file.md#virtual-types\"\n      }}>{`virtual type`}</a>{`. In the most cases, it will extend `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Model/Method/Vault.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Vault\\\\Model\\\\Method\\\\Vault`}</inlineCode></a>{` that is the default implementation of `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Model/VaultPaymentInterface.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Vault\\\\Model\\\\VaultPaymentInterface`}</inlineCode></a>{`:`}</p>\n    <p>{`Example of the vault payment facade configuration for Braintree:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeCreditCardVaultFacade\" type=\"Magento\\\\Vault\\\\Model\\\\Method\\\\Vault\">\n    <arguments>\n        <argument name=\"config\" xsi:type=\"object\">BraintreeVaultPaymentConfig</argument>\n        <argument name=\"valueHandlerPool\" xsi:type=\"object\">BraintreeVaultPaymentValueHandlerPool</argument>\n        <argument name=\"vaultProvider\" xsi:type=\"object\">BraintreeFacade</argument>\n        <argument name=\"code\" xsi:type=\"const\">Magento\\\\Braintree\\\\Model\\\\Ui\\\\ConfigProvider::CC_VAULT_CODE</argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`This virtual type is similar to the `}<a parentName=\"p\" {...{\n        \"href\": \"../base-integration/facade-configuration.md\"\n      }}>{`payment method facade`}</a>{`. The main difference is the `}<inlineCode parentName=\"p\">{`vaultProvider`}</inlineCode>{` argument. As the Vault payment in the general case is a proxy, the specific payment provider must be specified.`}</p>\n    <h2 {...{\n      \"id\": \"extend-payment-method-configuration\"\n    }}>{`Extend payment method configuration`}</h2>\n    <p>{`To enable vault usage for the payment method, set the `}<inlineCode parentName=\"p\">{`can_authorize_vault`}</inlineCode>{` option in the `}<a parentName=\"p\" {...{\n        \"href\": \"../base-integration/payment-option-config.md\"\n      }}>{`method's configuration`}</a>{`.`}</p>\n    <p>{`Following is an example from Braintree configuration:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<payment>\n    <braintree>\n        <model>BraintreeFacade</model>\n        <title>Credit Card (Braintree)</title>\n        ...\n        <can_authorize_vault>1</can_authorize_vault>\n        ...\n    </braintree>\n</payment>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"add-a-gateway-command-for-vault\"\n    }}>{`Add a gateway command for vault`}</h2>\n    <p>{`For payment actions, you need to create gateway commands for vault, and update the payment provider `}<a parentName=\"p\" {...{\n        \"href\": \"../payment-gateway/command-pool.md\"\n      }}>{`command pool`}</a>{`.`}</p>\n    <p>{`You can find all available commands in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Model/VaultPaymentInterface.php\"\n      }}>{`VaultPaymentInterface`}</a>{`.`}</p>\n    <p>{`Example: a gateway command for the authorize action is added for the Braintree vault`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeVaultAuthorizeCommand\" type=\"Magento\\\\Payment\\\\Gateway\\\\Command\\\\GatewayCommand\">\n    <arguments>\n        <argument name=\"requestBuilder\" xsi:type=\"object\">BraintreeVaultAuthorizeRequest</argument>\n        <argument name=\"transferFactory\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\Http\\\\TransferFactory</argument>\n        <argument name=\"client\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\Http\\\\Client\\\\TransactionSale</argument>\n        <argument name=\"handler\" xsi:type=\"object\">BraintreeVaultResponseHandler</argument>\n        <argument name=\"validator\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\Validator\\\\ResponseValidator</argument>\n        <argument name=\"errorMessageMapper\" xsi:type=\"object\">Magento\\\\Braintree\\\\Gateway\\\\ErrorMapper\\\\VirtualErrorMessageMapper</argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`This command is similar to the payment provider authorize command. But it uses own `}<a parentName=\"p\" {...{\n        \"href\": \"../payment-gateway/request-builder.md\"\n      }}>{`request builders`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"../payment-gateway/response-handler.md\"\n      }}>{`response handlers`}</a>{`.`}</p>\n    <p>{`The following sample from Braintree configuration illustrates how to add the `}<inlineCode parentName=\"p\">{`authorize`}</inlineCode>{` payment action to command pool:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeCommandPool\" type=\"Magento\\\\Payment\\\\Gateway\\\\Command\\\\CommandPool\">\n    <arguments>\n        <argument name=\"commands\" xsi:type=\"array\">\n            <item name=\"authorize\" xsi:type=\"string\">BraintreeAuthorizeCommand</item>\n            ...\n            <item name=\"vault_authorize\" xsi:type=\"string\">BraintreeVaultAuthorizeCommand</item>\n        </argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"add-command-manager\"\n    }}>{`Add command manager`}</h2>\n    <p>{`You also need to create a command manager for vault. It is configured with the payment integration command pool and allows performing payment commands in any place of code.`}</p>\n    <p>{`Example of adding a command manager for Braintree vault:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeCommandManager\" type=\"Magento\\\\Payment\\\\Gateway\\\\Command\\\\CommandManager\">\n    <arguments>\n        <argument name=\"commandPool\" xsi:type=\"object\">BraintreeCommandPool</argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`Command manager must be added to the command manager pool. This pool is available for vault instance and enables performing payment provider actions.`}</p>\n    <p>{`There are two ways to add command manager to the pool:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Add to default `}<inlineCode parentName=\"li\">{`CommandManagerPool`}</inlineCode>{` implementation. Example:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<type name=\"Magento\\\\Payment\\\\Gateway\\\\Command\\\\CommandManagerPool\">\n    <arguments>\n        <argument name=\"executors\" xsi:type=\"array\">\n            <item name=\"braintree\" xsi:type=\"string\">BraintreeCommandManager</item>\n        </argument>\n    </arguments>\n</type>\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Create custom command manager pool. Example:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"BraintreeCcVaultCommandManagerPool\" type=\"Magento\\\\Payment\\\\Gateway\\\\Command\\\\CommandManagerPool\">\n    <arguments>\n        <argument name=\"executors\" xsi:type=\"array\">\n            <item name=\"braintree\" xsi:type=\"string\">BraintreeCommandManager</item>\n        </argument>\n    </arguments>\n</virtualType>\n\n<virtualType name=\"BraintreeCreditCardVaultFacade\" type=\"Magento\\\\Vault\\\\Model\\\\Method\\\\Vault\">\n    <arguments>\n        ...\n        <argument name=\"commandManagerPool\" xsi:type=\"object\">BraintreeCcVaultCommandManagerPool</argument>\n    </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`In the first case, this pool can be used in any module to perform vault payment commands. In the second case, only specific vault payment integration can use this pool.`}</p>\n    <p>{`You can use the samples as templates for your command manager configuration. You only need to change the Braintree-related names to your custom ones.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}