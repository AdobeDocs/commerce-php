{"version":3,"file":"component---src-pages-development-build-schema-validation-md-d155ed6dc8d1417d4084.js","mappings":"oRAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,yBACH,0BACL,kBAAK,0DACL,kBAAK,yBAAuB,cAAGC,WAAW,IACtC,KAAQ,uDACL,0BAA8B,kDACrC,kBAAK,8CAA4C,uBAAYA,WAAW,KAAM,eAA4B,wDAC1G,oBACE,eAAIA,WAAW,MAAO,eACtB,eAAIA,WAAW,MAAO,mBAExB,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,uHACL,eACE,GAAM,cACH,eACL,kBAAK,wFACL,mBAAG,uBAAYC,WAAW,KAAM,uDAChC,kBAAK,UACL,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,eAA4B,2BAC9E,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,UAAuB,sCACzE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,gBAA6B,mHAAiH,cAAGA,WAAW,KAC1M,KAAQ,6BACL,oBAAwB,WAC/B,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,qBAAkC,sCAAuC,IAAK,kBAElI,eACE,GAAM,iBACH,kBACL,kBAAK,2FACL,mBAAG,uBAAYA,WAAW,KAAM,4DAChC,kBAAK,UACL,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,eAA4B,2BAC9E,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,aAA0B,mHAAiH,uBAAYA,WAAW,MAAO,0BAC3N,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,oCAAiD,yCAA0C,IAAK,kBAEpJ,eACE,GAAM,sCACH,uCACL,kBAAK,qEACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,oFAIP,kBAAK,yGAAuG,uBAAYA,WAAW,KAAM,qCAAkD,MAC3L,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,oHAEP,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,0IAGR,CAEDF,EAAWM,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/build/schema-validation.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"urn-schema-validation\"\n    }}>{`URN schema validation`}</h1>\n    <p>{`Each module can contain XSD files for XML validation.`}</p>\n    <p>{`The application uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Uniform_Resource_Name\"\n      }}>{`Uniform Resource Names`}</a>{` (URNs) to reference XML schema declarations.`}</p>\n    <p>{`The application supported URNs begin with `}<inlineCode parentName=\"p\">{`urn:magento`}</inlineCode>{`. The application supports two XSD reference types:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Module XSD`}</li>\n      <li parentName=\"ul\">{`Framework XSD`}</li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You cannot change the XSD for any XML files provided with the Adobe Commerce and Magento Open Source applications.`}</p>\n    <h3 {...{\n      \"id\": \"module-xsd\"\n    }}>{`Module XSD`}</h3>\n    <p>{`The syntax for the module XSD is a colon separated declaration. An example follows:`}</p>\n    <p><inlineCode parentName=\"p\">{`urn:magento:module:Magento_Flow:flows/content.xsd`}</inlineCode></p>\n    <p>{`where`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`urn:magento`}</inlineCode>{` is the URN identifier`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`module`}</inlineCode>{` is the reference type identifier`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Magento_Flow`}</inlineCode>{` is the name of the module. This must be exactly the same as the module specified by ComponentRegistrar in the `}<a parentName=\"li\" {...{\n          \"href\": \"component-registration.md\"\n        }}>{`registration.php`}</a>{` file.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`flows/content.xsd`}</inlineCode>{` is the relative path to the module`}{`’`}{`s directory.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"framework-xsd\"\n    }}>{`Framework XSD`}</h3>\n    <p>{`The syntax for the framework XSD is a colon separated declaration. An example follows:`}</p>\n    <p><inlineCode parentName=\"p\">{`urn:magento:framework:Api/etc/extension_attributes.xsd`}</inlineCode></p>\n    <p>{`where`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`urn:magento`}</inlineCode>{` is the URN identifier`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`framework`}</inlineCode>{` is the reference type identifier. You can also add additional framework libraries as separate components with `}<inlineCode parentName=\"li\">{`framework-<sub-name>`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Api/etc/extension_attributes.xsd`}</inlineCode>{` is the relative path to the framework`}{`’`}{`s directory.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"referencing-a-xsd-from-another-xsd\"\n    }}>{`Referencing a XSD from another XSD`}</h3>\n    <p>{`Use URN notation to reference schema from inside a XSD document:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`\n<xs:redefine schemaLocation=\"urn:magento:framework:Config/etc/view.xsd\">\n\n`}</code></pre>\n    <p>{`The URN resolution is invoked automatically by the libxml engine. Register the URN resolver by using `}<inlineCode parentName=\"p\">{`libxml_set_external_entity_loader`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`libxml_set_external_entity_loader(['Magento\\\\Framework\\\\Config\\\\Dom\\\\UrnResolver', 'registerEntityLoader']);\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The relative path to other XSDs cannot be used from inside the XSD file, because the entity loader fails to resolve the relative path.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}