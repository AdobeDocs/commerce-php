{"version":3,"file":"component---src-pages-coding-standards-js-md-81e47543f674c4b488b7.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/coding-standards/js.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"javascript-coding-standard\"\n    }}>{`JavaScript coding standard`}</h1>\n    <p>{`Use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento-coding-standard/blob/develop/eslint/.eslintrc-magento\"\n      }}>{`ESLint rules`}</a>{` to make sure your code adheres to the coding standards.\nDevelopers writing `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/javascript\"\n      }}>{`JavaScript`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/jquery\"\n      }}>{`jQuery`}</a>{` code for Adobe Commerce and Magento Open Source must adhere to these guidelines and follow the standards listed in this document.`}</p>\n    <p>{`Use `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.ietf.org/rfc/rfc2119.txt\"\n      }}>{`RFC 2119`}</a>{` to interpret the \"must,\" \"must not,\" \"required,\" \"shall,\" \"shall not,\" \"should,\" \"should not,\" \"recommended,\" \"may,\" and \"optional\" keywords.`}</p>\n    <p>{`Adobe Commerce and Magento Open Source uses the `}<a parentName=\"p\" {...{\n        \"href\": \"https://jquery.com/\"\n      }}>{`jQuery library`}</a>{` including standard and custom `}<a parentName=\"p\" {...{\n        \"href\": \"http://api.jqueryui.com/category/widgets\"\n      }}>{`jQuery widgets`}</a>{`.`}</p>\n    <p>{`For the jQuery widget coding standard, see `}<a parentName=\"p\" {...{\n        \"href\": \"jquery-widgets.md\"\n      }}>{`jQuery widget coding standard`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"eslint-code-analysis\"\n    }}>{`Eslint code analysis`}</h2>\n    <p>{`Use `}<a parentName=\"p\" {...{\n        \"href\": \"http://eslint.org/\"\n      }}>{`ESLint`}</a>{` to ensure the quality of your JavaScript code.`}</p>\n    <p>{`ESLint is a community-driven tool that detects errors and potential problems in JavaScript code.\nIt can use custom rules to enforce specific coding standards.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/magento/magento-coding-standard/blob/develop/eslint/.eslintrc-magento\"\n        }}>{`ESLint rules`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"additional-formatting-standards\"\n    }}>{`Additional formatting standards`}</h2>\n    <h3 {...{\n      \"id\": \"anonymous-function-calls\"\n    }}>{`Anonymous function calls`}</h3>\n    <p>{`When you declare an anonymous function as an argument in a function call, indent the body of the function by `}<em parentName=\"p\">{`four`}</em>{` spaces from the left edge of the statement or function `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/keyword\"\n      }}>{`keyword`}</a>{` to increase readability.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`myObject.myFunction(param1, function (a,b) {\n    //Function logic\n    return a > b;\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"end-of-file\"\n    }}>{`End of file`}</h3>\n    <p>{`The last line in a file must end with a single linefeed(LF) character(i.e. an empty line).`}</p>\n    <p>{`This reduces the quantity of the changed lines in a diff and makes code safer in file concatenation processes.`}</p>\n    <h3 {...{\n      \"id\": \"indentation\"\n    }}>{`Indentation`}</h3>\n    <p>{`Indentation in code uses four spaces.`}</p>\n    <p>{`Tabs are not allowed as indentation.`}</p>\n    <h4 {...{\n      \"id\": \"wrapped-lines\"\n    }}>{`Wrapped lines`}</h4>\n    <p>{`Indent wrapped lines two spaces or left-aligned to the expression above.`}</p>\n    <h3 {...{\n      \"id\": \"max-line-length\"\n    }}>{`Max line length`}</h3>\n    <p>{`The recommended max line length is 80 characters.`}</p>\n    <p>{`Source code lines must not exceed 120 characters.`}</p>\n    <p>{`Comment lines that contain an example command or a literal `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/url\"\n      }}>{`URL`}</a>{` longer than 120 characters may exceed the 120 character limit for ease of cutting and pasting.`}</p>\n    <p>{`Do not be concerned about header guards that exceed 120 characters.`}</p>\n    <h3 {...{\n      \"id\": \"line-termination\"\n    }}>{`Line termination`}</h3>\n    <p>{`Line termination follows the UNIX text file convention.`}</p>\n    <p>{`Lines must end with a single linefeed(LF) character represented as ordinal 10 or hexadecimal (`}<inlineCode parentName=\"p\">{`0x0A`}</inlineCode>{`).`}</p>\n    <p><em parentName=\"p\">{`Do not`}</em>{` use carriage the Mac OS convention of carriage returns(CR or `}<inlineCode parentName=\"p\">{`0x0D`}</inlineCode>{`) or the carriage return-linefeed combination(CRLF or `}<inlineCode parentName=\"p\">{`0x0D`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`0x0A`}</inlineCode>{`) standard for Windows OS.`}</p>\n    <h3 {...{\n      \"id\": \"multi-line-string-literals\"\n    }}>{`Multi-line string literals`}</h3>\n    <p>{`Use string concatenation for multi-line string literals:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var myString = 'JavaScript was originally developed in Netscape, by Brendan Eich. ' +\n    'Battling with Microsoft over the Internet, Netscape considered their client-server solution ' +\n    'as a distributed OS, running a portable version of Sun Microsystem&#8217;s Java. ' +\n    'Because Java was a competitor of C++ and aimed at professional programmers, ' +\n    'Netscape also wanted a lightweight interpreted language that would complement Java ' +\n    'by appealing to nonprofessional programmers, like Microsoft&#8217;s VB.[9] (see JavaScript and Java)';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"parentheses\"\n    }}>{`Parentheses`}</h3>\n    <p>{`Use sparingly and in general where required by the syntax and semantics.`}</p>\n    <p>{`Never use parentheses for:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Unary operators (e.g. `}<inlineCode parentName=\"li\">{`delete`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`typeof`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`void`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`After keywords such as `}<inlineCode parentName=\"li\">{`return`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`throw`}</inlineCode></li>\n      <li parentName=\"ul\">{`For `}<inlineCode parentName=\"li\">{`case`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`in`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`new`}</inlineCode>{`, and others keywords like them`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"blocks\"\n    }}>{`Blocks`}</h3>\n    <p>{`Use braces with all multiline blocks. May only omit braces if entire block can be written in one line and improves readability.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Wrong\nif (true)\n    blah();\n\nfunction () { return false; }\n\n// Correct\nif (true) return;\n\nif (true) {\n    return;\n}\n\nif (true) {\n    blah();\n}\n\nfunction () {\n    return false;\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"semicolons\"\n    }}>{`Semicolons`}</h3>\n    <p>{`Always put semicolons as statement terminators.`}</p>\n    <p>{`The following code examples show the dangers of missing semicolons:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Example 1: JavaScript Error\nMyClass.prototype.myMethod = function() {\n    return 42;\n}  // <-- Missing semicolon\n\n(function() {\n    // Some initialization code wrapped in a function to create a scope for locals.\n})();\n`}</code></pre>\n    <p>{`Since there is semicolon to end the first statement, the first function returns 42 and the script interprets 42 as a function.\nWhen the script tries to call 42 as a function with the second function as a parameter, an error occurs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Example 2: Trying to do one thing on Internet Explorer and another on Firefox.\nvar x = {\n    'i': 1,\n    'j': 2\n }  // <-- Missing semicolon\n\n[normalVersion, ffVersion][isIE]();\n`}</code></pre>\n    <p>{`A 'no such property in undefined' error appears during runtime when the script tries to call `}<inlineCode parentName=\"p\">{`x[ffVersion][isIE]()`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n// Example 3: Conditional execution a la bash\nvar THINGS_TO_EAT = [apples, oysters, sprayOnCheese]  // <-- Missing semicolon\n\n-1 == resultOfOperation() || die();\n\n`}</code></pre>\n    <p>{`The script calls `}<inlineCode parentName=\"p\">{`die`}</inlineCode>{` unless `}<inlineCode parentName=\"p\">{`resultOfOperation)_`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`NaN`}</inlineCode>{` and assigns `}<inlineCode parentName=\"p\">{`THING_TO_EAT`}</inlineCode>{` the result of `}<inlineCode parentName=\"p\">{`die()`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"explanation\"\n    }}>{`Explanation`}</h4>\n    <p>{`JavaScript requires statements to end with a semicolon, except when it thinks it can safely infer their existence.`}</p>\n    <p>{`In each of the examples above, a function declaration, or an object, or an array literal is used inside a statement.`}</p>\n    <p>{`The closing brackets are not enough to indicate the end of the statement.\nJavaScript never ends a statement if the next token is an infix or bracket operator.`}</p>\n    <h3 {...{\n      \"id\": \"strings\"\n    }}>{`Strings`}</h3>\n    <p>{`Use single quotes instead of double quotes for consistency.`}</p>\n    <p>{`This is helpful when creating strings that include HTML:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var msg = '<span class=\"text\">Hello World!</div>';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"additional-naming-convention-standards\"\n    }}>{`Additional naming convention standards`}</h2>\n    <h3 {...{\n      \"id\": \"general-naming-conventions\"\n    }}>{`General naming conventions`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Avoid underscores and numbers in names.`}</li>\n      <li parentName=\"ul\">{`Variables or methods should have names that accurately describe their purpose or behavior.`}</li>\n      <li parentName=\"ul\">{`Object methods or variables that are declared `}<inlineCode parentName=\"li\">{`private`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`protected`}</inlineCode>{` should start with an underscore(`}<inlineCode parentName=\"li\">{`_`}</inlineCode>{`).`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"functions-and-methods\"\n    }}>{`Functions and methods`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Class method names should start with an English verb in its infinitive form that describes the method.`}</li>\n      <li parentName=\"ul\">{`Names for accessors for instance or static variables should always have the `}<inlineCode parentName=\"li\">{`get`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`set`}</inlineCode>{` prefix.`}</li>\n      <li parentName=\"ul\">{`In `}<a parentName=\"li\" {...{\n          \"href\": \"https://glossary.magento.com/design-pattern\"\n        }}>{`design pattern`}</a>{` classes, implementation method names should contain the pattern name where practical to provide better behavior description.`}</li>\n      <li parentName=\"ul\">{`Methods that return status flags or Boolean values should have the `}<inlineCode parentName=\"li\">{`has`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`is`}</inlineCode>{` prefix.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"variables-and-properties\"\n    }}>{`Variables and properties`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Do not use short variable names such as `}<inlineCode parentName=\"li\">{`i`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` except in small loop contexts`}</li>\n      <li parentName=\"ul\">{`If a loop contains more than 20 lines of code, the index variables should have more descriptive names.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"additional-coding-construct-standards\"\n    }}>{`Additional coding construct standards`}</h2>\n    <h3 {...{\n      \"id\": \"binary-and-ternary-operators\"\n    }}>{`Binary and ternary operators`}</h3>\n    <p>{`Always put the operator on the preceding line to avoid implicit semi-colon insertion issues.`}</p>\n    <h3 {...{\n      \"id\": \"custom-tostring-method\"\n    }}>{`Custom `}<inlineCode parentName=\"h3\">{`toString()`}</inlineCode>{` method`}</h3>\n    <p>{`This method must always succeed without side effects.`}</p>\n    <h3 {...{\n      \"id\": \"function-declarations-within-blocks\"\n    }}>{`Function declarations within blocks`}</h3>\n    <p>{`Use a variable initialized with a function expression to define a function within a block.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Wrong\nif (x) {\n    function foo() {}\n}\n\n// Correct\nif (x) {\n    var foo = function() {}\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"exceptions-and-custom-exceptions\"\n    }}>{`Exceptions and custom exceptions`}</h3>\n    <p>{`You cannot avoid exceptions if you are doing something non-trivial (using an application development framework, and so on).`}</p>\n    <p>{`Without custom exceptions, returning error information from a function that also returns a value can be tricky, not to mention inelegant.\nBad solutions include passing in a reference type to hold error information or always returning Objects with a potential error member.`}</p>\n    <p>{`These basically amount to a primitive `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/exception\"\n      }}>{`exception`}</a>{` handling hack.\nFeel free to use custom exceptions when appropriate.`}</p>\n    <h3 {...{\n      \"id\": \"standard-features\"\n    }}>{`Standard features`}</h3>\n    <p>{`For maximum portability and compatibility, use standard features whenever possible.`}</p>\n    <p>{`For example, `}<inlineCode parentName=\"p\">{`string.charAt(3)`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`string[3]`}</inlineCode>{`, and element access with DOM functions instead of using an application-specific shorthand.`}</p>\n    <h3 {...{\n      \"id\": \"method-definitions\"\n    }}>{`Method definitions`}</h3>\n    <p>{`There are several ways to attach methods and properties to a constructor, but the preferred style is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`Foo.prototype.bar = function() {\n    // ...\n};\n`}</code></pre>\n    <p>{`Do not use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`Foo.prototype = {\n    bar: function() {\n        // ...\n    },\n    circle: function() {\n        // ...\n    }\n};\n\n`}</code></pre>\n    <p>{`Assignment operations to constructor prototypes creating temporal coupling and sometimes other unwanted side effects.`}</p>\n    <h3 {...{\n      \"id\": \"closures\"\n    }}>{`Closures`}</h3>\n    <p>{`A closure keeps a pointer to its enclosing scope, so attaching a closure to a DOM element can create a circular reference and thus, a memory leak.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Wrong\nfunction foo(element, a, b) {\n    element.onclick = function() {\n      // uses a and b\n    };\n}\n`}</code></pre>\n    <p>{`The function closure keeps references to elements \"a\" and \"b\" even if it never uses them.`}</p>\n    <p>{`Because elements also keep references to the closure, it is a cycle that will not be cleaned up by garbage collection.\nIn these situations, the code can be structured as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Correct\nfunction foo(element, a, b) {\n    element.onclick = bar(a, b);\n}\n\nfunction bar(a, b) {\n    return function() {\n      // uses a and b\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"additional-general-standards\"\n    }}>{`Additional general standards`}</h2>\n    <h3 {...{\n      \"id\": \"array-and-object-initializers\"\n    }}>{`Array and object initializers`}</h3>\n    <p>{`Single-line array and object initializers are allowed when they fit on a line as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`    var arr = [1, 2, 3];  // No space after [ or before ].\n    var obj = {a: 1, b: 2, c: 3};  // No space after { or before }.\n`}</code></pre>\n    <p>{`Long identifiers or values present problems for aligned initialization lists, so always prefer non-aligned initialization.`}</p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`Object.prototype = {\n    a: 0,\n    b: 1,\n    lengthyName: 2\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"associative-arrays\"\n    }}>{`Associative arrays`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`Object`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`Array`}</inlineCode>{` for associative arrays.`}</p>\n    <h3 {...{\n      \"id\": \"deferred-initialization\"\n    }}>{`Deferred initialization`}</h3>\n    <p>{`Use deferred initialization when it is not possible to initialize variables at the point of declaration.`}</p>\n    <h3 {...{\n      \"id\": \"explicit-scope\"\n    }}>{`Explicit scope`}</h3>\n    <p>{`Use explicit scope to increase code portability and clarity.`}</p>\n    <h3 {...{\n      \"id\": \"built-in-objects\"\n    }}>{`Built-in objects`}</h3>\n    <p>{`Modifying built-in like `}<inlineCode parentName=\"p\">{`Object.prototype`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Array.prototype`}</inlineCode>{` is strictly forbidden.`}</p>\n    <p>{`Modifying other built-ins like `}<inlineCode parentName=\"p\">{`Function.prototype`}</inlineCode>{` is less dangerous but leads to debugging issue in production.`}</p>\n    <h3 {...{\n      \"id\": \"variable-declarations\"\n    }}>{`Variable declarations`}</h3>\n    <p>{`Declare a variable with `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{` wherever possible to avoid overwriting existing global values.`}</p>\n    <p>{`Using only one var per scope promotes readability.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var foo = 'bar',\n    num = 1,\n    arr = [1, 2, 3];\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-rules\"\n    }}>{`Custom rules`}</h2>\n    <p>{`There is a set of custom Eslint rules to ensure code compatiblity with the latest versions of third-party libraries.`}</p>\n    <p>{`These custom rules are included using the `}<inlineCode parentName=\"p\">{`rulePaths`}</inlineCode>{` setting in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/dev/tools/grunt/configs/eslint.json\"\n      }}>{`Eslint Grunt configuration`}</a>{`.`}</p>\n    <p>{`The source code of the rules can be found in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/dev/tests/static/testsuite/Magento/Test/Js/_files/eslint\"\n      }}>{`Eslint custom rules folder`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}