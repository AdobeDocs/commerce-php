"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[1480],{2261:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return d},default:function(){return c}});var r,a=t(87462),o=t(63366),s=(t(15007),t(64983)),l=t(91515),m=["components"],d={},i=(r="InlineAlert",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",e)}),p={_frontmatter:d},u=l.Z;function c(e){var n=e.components,t=(0,o.Z)(e,m);return(0,s.mdx)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"request-processors-pool"},"Request processors pool"),(0,s.mdx)("p",null,"The request processors pool routes web API requests. It is located in the ",(0,s.mdx)("inlineCode",{parentName:"p"},"Magento_WebApi")," module: ",(0,s.mdx)("inlineCode",{parentName:"p"},"Magento\\Webapi\\Controller\\Rest\\RequestProcessorPool")),(0,s.mdx)("p",null,"Adobe Commerce and Magento Open Source define the following processors:"),(0,s.mdx)("table",null,(0,s.mdx)("thead",{parentName:"table"},(0,s.mdx)("tr",{parentName:"thead"},(0,s.mdx)("th",{parentName:"tr",align:null},"Processor name"),(0,s.mdx)("th",{parentName:"tr",align:null},"Class"),(0,s.mdx)("th",{parentName:"tr",align:null},"URL pattern"),(0,s.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,s.mdx)("tbody",{parentName:"table"},(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"sync")),(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"Magento\\Webapi\\Controller\\Rest\\SynchronousRequestProcessor")),(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"/^\\\\/V\\\\d+/")),(0,s.mdx)("td",{parentName:"tr",align:null},"Executes the corresponding service contract.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"syncSchema")),(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"Magento\\Webapi\\Controller\\Rest\\SchemaRequestProcessor")),(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"schema")),(0,s.mdx)("td",{parentName:"tr",align:null},"Delivers the schema needed for generating Swagger documentation.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"async")),(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"Magento\\WebapiAsync\\Controller\\Rest\\AsynchronousRequestProcessor")),(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"/^\\\\/async(\\\\/V.+)/")),(0,s.mdx)("td",{parentName:"tr",align:null},"Performs an asynchronous API request. It executes ",(0,s.mdx)("inlineCode",{parentName:"td"},"Magento\\AsynchronousOperations\\Model\\MassSchedule::publishMass"),", which places a single message in the queue.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"asyncSchema")),(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"Magento\\WebapiAsync\\Controller\\Rest\\AsynchronousSchemaRequestProcessor")),(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"async/schema")),(0,s.mdx)("td",{parentName:"tr",align:null},"Delivers the schema needed for generating Swagger documentation for asynchronous endpoints.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"asyncBulk")),(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"Magento\\WebapiAsync\\Controller\\Rest\\VirtualType\\AsynchronousBulkRequestProcessor")),(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"/^\\\\/async\\/bulk(\\\\/V.+)/")),(0,s.mdx)("td",{parentName:"tr",align:null},"Performs a bulk API request by executing ",(0,s.mdx)("inlineCode",{parentName:"td"},"Magento\\AsynchronousOperations\\Model\\MassSchedule::publishMass"),", which places multiple messages in the queue.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"asyncBulkSchema")),(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"Magento\\WebapiAsync\\Controller\\Rest\\VirtualType\\AsynchronousBulkSchemaRequestProcessor")),(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"async/bulk/schema")),(0,s.mdx)("td",{parentName:"tr",align:null},"Currently not used. Reserved for future use.")))),(0,s.mdx)(i,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,s.mdx)("p",null,(0,s.mdx)("inlineCode",{parentName:"p"},"async")," and ",(0,s.mdx)("inlineCode",{parentName:"p"},"asyncBulk")," share the same processor but have different URL patterns."),(0,s.mdx)("h2",{id:"create-a-new-processor"},"Create a new processor"),(0,s.mdx)("p",null,"To create a custom processor, you must perform the following tasks:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"Define the custom processor in ",(0,s.mdx)("inlineCode",{parentName:"li"},"webapi_rest/di.xml"),"."),(0,s.mdx)("li",{parentName:"ul"},"Create a processor class and implement the ",(0,s.mdx)("inlineCode",{parentName:"li"},"Magento\\Webapi\\Controller\\Rest\\RequestProcessorInterface")," interface."),(0,s.mdx)("li",{parentName:"ul"},"Define the processing rules in the ",(0,s.mdx)("inlineCode",{parentName:"li"},"canProcess")," method."),(0,s.mdx)("li",{parentName:"ul"},"Create the processor logic in the ",(0,s.mdx)("inlineCode",{parentName:"li"},"process")," method.")),(0,s.mdx)("h3",{id:"define-the-custom-processor"},"Define the custom processor"),(0,s.mdx)("p",null,"Processors must be defined in a module's ",(0,s.mdx)("inlineCode",{parentName:"p"},"webapi_rest/di.xml")," file. The following example shows the definition of the default ",(0,s.mdx)("inlineCode",{parentName:"p"},"sync")," processor:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-xml"},'<type name="Magento\\Webapi\\Controller\\Rest\\RequestProcessorPool">\n    <arguments>\n        <argument name="requestProcessors" xsi:type="array">\n            <item name="sync" xsi:type="object" sortOrder="100">Magento\\Webapi\\Controller\\Rest\\SynchronousRequestProcessor</item>\n        </argument>\n    </arguments>\n</type>\n')),(0,s.mdx)("h2",{id:"create-the-processor-class"},"Create the processor class"),(0,s.mdx)("p",null,"A custom processor must implement the ",(0,s.mdx)("inlineCode",{parentName:"p"},"Magento\\Webapi\\Controller\\Rest\\RequestProcessorInterface")," interface, as shown below:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},"<?php\n/**\n * Copyright Â© Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndeclare(strict_types=1);\n\nnamespace Magento\\Webapi\\Controller\\Rest;\n\n/**\n *  Request processor interface\n */\ninterface RequestProcessorInterface\n{\n    /**\n     * Executes the logic to process the request\n     *\n     * @param \\Magento\\Framework\\Webapi\\Rest\\Request $request\n     * @return void\n     * @throws \\Magento\\Framework\\Exception\\AuthorizationException\n     * @throws \\Magento\\Framework\\Exception\\InputException\n     * @throws \\Magento\\Framework\\Webapi\\Exception\n     */\n    public function process(\\Magento\\Framework\\Webapi\\Rest\\Request $request);\n\n    /**\n     * Method should return true for all the requests the current processor can process.\n     *\n     * Invoked in the loop for all registered request processors. The first one wins.\n     *\n     * @param \\Magento\\Framework\\Webapi\\Rest\\Request $request\n     * @return bool\n     */\n    public function canProcess(\\Magento\\Framework\\Webapi\\Rest\\Request $request);\n}\n")),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"canProcess(\\Magento\\Framework\\Webapi\\Rest\\Request $request)")," method defines whether the current request can be processed. Currently, all implemented processors match current request URLs with the defined patterns."),(0,s.mdx)("p",null,"For example, ",(0,s.mdx)("inlineCode",{parentName:"p"},"Magento\\WebapiAsync\\Controller\\Rest\\AsynchronousRequestProcessor")," processes asynchronous calls, such as ",(0,s.mdx)("inlineCode",{parentName:"p"},"<host>/rest/async/V1/products"),"."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},'const PROCESSOR_PATH = "/^\\\\/async(\\\\/V.+)/";\n\n.....\n\npublic function canProcess(\\Magento\\Framework\\Webapi\\Rest\\Request $request)\n{\n    if ($request->getHttpMethod() === \\Magento\\Framework\\Webapi\\Rest\\Request::HTTP_METHOD_GET) {\n        return false;\n    }\n\n    if (preg_match($this->processorPath, $request->getPathInfo()) === 1) {\n        return true;\n    }\n    return false;\n}\n\n.....\n')),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"process(\\Magento\\Framework\\Webapi\\Rest\\Request $request)")," method executes processor logic."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-developer-components-web-api-request-processor-pool-md-01f18da6b15d0a7d9b0c.js.map