"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[98053],{67765:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return m},default:function(){return p}});var t=a(87462),o=a(45987),i=(a(35776),a(3905)),r=a(91515);const s=["components"],m={},d={_frontmatter:m},c=r.Z;function p(e){let{components:n}=e,a=(0,o.Z)(e,s);return(0,i.mdx)(c,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"topics-in-asynchronous-api"},"Topics in asynchronous API"),(0,i.mdx)("p",null,'The message queue system uses "topic exchange" for managing messages. More information about topics can be found ',(0,i.mdx)("a",{parentName:"p",href:"https://www.rabbitmq.com/tutorials/tutorial-five-python.html"},"here"),"."),(0,i.mdx)("p",null,"Topics are usually defined in a ",(0,i.mdx)("inlineCode",{parentName:"p"},"communication.xml")," configuration file. See ",(0,i.mdx)("a",{parentName:"p",href:"configuration.md#communicationxml"},"Configure message queues")),(0,i.mdx)("h2",{id:"generating-of-communicationxml"},"Generating of communication.xml"),(0,i.mdx)("p",null,"A ",(0,i.mdx)("inlineCode",{parentName:"p"},"communication.xml")," is pre-generated automatically by the ",(0,i.mdx)("inlineCode",{parentName:"p"},"WebapiAsync")," module. This module also generates topic names for asynchronous processes. Generated files are processed by the ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\Magento\\WebapiAsync\\Code\\Generator\\Config\\RemoteServiceReader\\Communication")," class, which implements ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Framework\\Config\\ReaderInterface")," and is injected into ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Framework\\Communication\\Config\\CompositeReader")," as a constructor argument of the main ",(0,i.mdx)("inlineCode",{parentName:"p"},"di.xml")," file."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-xml"},'<type name="Magento\\Framework\\Communication\\Config\\CompositeReader">\n    <arguments>\n        <argument name="readers" xsi:type="array">\n            <item name="asyncServiceReader" xsi:type="array">\n                <item name="reader" xsi:type="object">Magento\\WebapiAsync\\Code\\Generator\\Config\\RemoteServiceReader\\Communication</item>\n                <item name="sortOrder" xsi:type="string">0</item>\n            </item>\n            <item name="xmlReader" xsi:type="array"> ... </item>\n            ...\n        </argument>\n    </arguments>\n</type>\n')),(0,i.mdx)("p",null,"Sort order is set to 0 by default. This allows developers to change some aspects of the generated configuration in configuration readers, such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"communication.xml"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"env.php"),"."),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Framework\\Communication\\Config\\CompositeReader::read()")," collects configuration records from defined readers and merges these records into a single configurataion."),(0,i.mdx)("p",null,"Because the generation of thge topics configuration is based on schema type, the generated ",(0,i.mdx)("inlineCode",{parentName:"p"},"<topic>")," XML is returned with ",(0,i.mdx)("inlineCode",{parentName:"p"},'"sync"=true'),". The ",(0,i.mdx)("inlineCode",{parentName:"p"},"response")," attribut is based on the service response definition. So the ",(0,i.mdx)("inlineCode",{parentName:"p"},"WebapiAsync")," module changes those settings to ",(0,i.mdx)("inlineCode",{parentName:"p"},'"sync"=false')," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"response")," is set to null. These changes will allow the application to execute topics asynchronously."),(0,i.mdx)("h2",{id:"topics-generation"},"Topics generation"),(0,i.mdx)("p",null,"Asynchronous and Bulk APIs are built on top of the standard Rest API. Topics for message processing fo asynchronous and bulk APIs are generated automatically, together with the ",(0,i.mdx)("inlineCode",{parentName:"p"},"communication.xml")," schema. This is done by ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\Magento\\WebapiAsync\\Model\\Config::getServices()"),". The current method is responsible for retrieving all service contracts defined in ",(0,i.mdx)("inlineCode",{parentName:"p"},"webapi.xml")," files and generates topic names for the corresponding asynchronous requests."),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"generateTopicNameFromService($serviceInterface, $serviceMethod, $httpMethod)")," is responsible for generating a topic name based on the service contract interface, the service contract method, and the HTTP method."),(0,i.mdx)("p",null,"As example, the route defined in ",(0,i.mdx)("inlineCode",{parentName:"p"},"webapi.xml"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-xml"},'<route url="/V1/products" method="POST">\n    <service class="Magento\\Catalog\\Api\\ProductRepositoryInterface" method="save"/>\n    <resources>\n        <resource ref="Magento_Catalog::products" />\n    </resources>\n</route>\n')),(0,i.mdx)("p",null,"will generate the following topic name:"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"async.magento.catalog.api.productrepositoryinterface.save.post"),"."),(0,i.mdx)("p",null,"It consists of following parts:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},'"async." as a prefix'),(0,i.mdx)("li",{parentName:"ul"},"lower cased service class"),(0,i.mdx)("li",{parentName:"ul"},"lower cased service method"),(0,i.mdx)("li",{parentName:"ul"},"lover cased http method")),(0,i.mdx)("p",null,"Unfortunately, there are no easy way to get a list of all generated topic names, but knowing this pattern, developers can find the required topic name and use it for executing service contracts in asynchronously."))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-development-components-message-queues-async-topics-md-f5fc95dd805c6efc462d.js.map