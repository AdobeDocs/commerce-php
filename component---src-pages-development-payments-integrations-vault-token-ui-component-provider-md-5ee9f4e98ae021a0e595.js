"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[46373],{14982:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return d},default:function(){return s}});var o=t(87462),a=t(63366),r=(t(15007),t(64983)),m=t(91515),p=t(1930),i=["components"],d={},l={_frontmatter:d},c=m.Z;function s(e){var n=e.components,t=(0,a.Z)(e,i);return(0,r.mdx)(c,(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)(p.default,{mdxType:"Docs"}),(0,r.mdx)("h1",{id:"token-ui-component-provider"},"Token UI component provider"),(0,r.mdx)("p",null,"This topic describes how to create custom vault payments UI components that are used to display stored tokens on ",(0,r.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/checkout"},"checkout")," page and order placing using vault."),(0,r.mdx)("h2",{id:"token-component-provider"},"Token component provider"),(0,r.mdx)("p",null,"The main logic for displaying tokens on checkout page is located in\n",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Model/Ui/TokensConfigProvider.php"},"Vault TokensConfigProvider"),". You just need to create a token component provider. It should implement the\n",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Model/Ui/TokenUiComponentProviderInterface.php"},"TokenUiComponentProviderInterface")," interface:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-php"},"interface TokenUiComponentProviderInterface\n{\n    const COMPONENT_DETAILS = 'details';\n    const COMPONENT_PUBLIC_HASH = 'publicHash';\n\n    /**\n     * @param PaymentTokenInterface $paymentToken\n     * @return TokenUiComponentInterface\n     */\n    public function getComponentForToken(PaymentTokenInterface $paymentToken);\n}\n")),(0,r.mdx)("p",null,"The basic implementation of the token ",(0,r.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/ui-component"},"UI component")," provider can be like following:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-php"},"class TokenUiComponentProvider implements TokenUiComponentProviderInterface\n{\n    /**\n     * Get UI component for token\n     * @param PaymentTokenInterface $paymentToken\n     * @return TokenUiComponentInterface\n     */\n    public function getComponentForToken(PaymentTokenInterface $paymentToken)\n    {\n        $jsonDetails = json_decode($paymentToken->getTokenDetails() ?: '{}', true);\n        $component = $this->componentFactory->create(\n            [\n                'config' => [\n                    'code' => ConfigProvider::CC_VAULT_CODE,\n                    TokenUiComponentProviderInterface::COMPONENT_DETAILS => $jsonDetails,\n                    TokenUiComponentProviderInterface::COMPONENT_PUBLIC_HASH => $paymentToken->getPublicHash()\n                ],\n                'name' => 'Magento_Braintree/js/view/payment/method-renderer/vault'\n            ]\n        );\n\n        return $component;\n    }\n}\n")),(0,r.mdx)("p",null,"This implementation allows to retrieve all available payment token details and specify the JS component for ",(0,r.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/storefront"},"storefront"),"."),(0,r.mdx)("p",null,"Having created the component provider, you need to add it to the list of available vault config providers in ",(0,r.mdx)("inlineCode",{parentName:"p"},"di.xml")," - the DI configuration file."),(0,r.mdx)("p",null,"In the following example the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Magento\\Braintree\\Model\\Ui\\TokenUiComponentProvider")," component provider is added to this list:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<type name="Magento\\Vault\\Model\\Ui\\TokensConfigProvider">\n    <arguments>\n        <argument name="tokenUiComponentProviders" xsi:type="array">\n            <item name="braintree" xsi:type="object">Magento\\Braintree\\Model\\Ui\\TokenUiComponentProvider</item>\n        </argument>\n    </arguments>\n</type>\n')),(0,r.mdx)("h2",{id:"javascript-component-for-vault"},"JavaScript component for vault"),(0,r.mdx)("p",null,"In your custom module directory, create the componentâ€™s ",(0,r.mdx)("inlineCode",{parentName:"p"},".js")," file. It must be located under the ",(0,r.mdx)("inlineCode",{parentName:"p"},"<your_module_dir>/view/frontend/web/js/view/")," directory."),(0,r.mdx)("p",null,"The component should extend ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/view/frontend/web/js/view/payment/method-renderer/vault.js"},"vault.js"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"define([\n    'Magento_Vault/js/view/payment/method-renderer/vault',\n], function (VaultComponent) {\n    'use strict';\n\n    return VaultComponent.extend({\n        defaults: {\n            template: 'Magento_Vault/payment/form'\n        }\n        ...\n    });\n});\n")))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-development-payments-integrations-vault-token-ui-component-provider-md-5ee9f4e98ae021a0e595.js.map