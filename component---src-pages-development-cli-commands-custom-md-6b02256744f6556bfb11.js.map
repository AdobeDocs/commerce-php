{"version":3,"file":"component---src-pages-development-cli-commands-custom-md-6b02256744f6556bfb11.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/development/cli-commands/custom.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"create-a-custom-command\"\n    }}>{`Create a custom command`}</h1>\n    <p>{`Adobe Commerce and Magento Open Source enables your component to add commands to our `}<a parentName=\"p\" {...{\n        \"href\": \"https://symfony.com/doc/current/components/console.html\"\n      }}>{`Symfony-like command-line interface (CLI)`}</a>{`.`}</p>\n    <p>{`Commerce has one command-line interface that performs both installation and configuration tasks: `}<inlineCode parentName=\"p\">{`<magento_root>/bin/magento`}</inlineCode>{`. The new interface performs multiple tasks, including:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Installing Commerce (and related tasks such as creating or updating the database schema, creating the deployment configuration, and so on).`}</li>\n      <li parentName=\"ul\">{`Clearing the cache.`}</li>\n      <li parentName=\"ul\">{`Managing indexes, including reindexing.`}</li>\n      <li parentName=\"ul\">{`Creating translation dictionaries and translation packages.`}</li>\n      <li parentName=\"ul\">{`Generating non-existent classes such as factories and interceptors for plug-ins, generating the dependency injection configuration for the object manager.`}</li>\n      <li parentName=\"ul\">{`Deploying static view files.`}</li>\n      <li parentName=\"ul\">{`Creating CSS from Less.`}</li>\n    </ul>\n    <p>{`Other benefits:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A single command (`}<inlineCode parentName=\"li\">{`<magento_root>/bin/magento list`}</inlineCode>{`) lists all available installation and configuration commands.`}</li>\n      <li parentName=\"ul\">{`Consistent user interface based on Symfony.`}</li>\n      <li parentName=\"ul\">{`The CLI is extensible so third party developers can \"plug in\" to it. This has the additional benefit of eliminating users' learning curve.`}</li>\n      <li parentName=\"ul\">{`Commands for disabled modules do not display.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`Before you begin, make sure you understand the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`All Magento command-line interface (CLI) commands rely on the application and must have access to its context, dependency injections, plug-ins, and so on.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`All CLI commands should be implemented in the scope of your module and should depend on the module's status.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Your command can use the Object Manager and dependency injection features; for example, it can use `}<a parentName=\"p\" {...{\n            \"href\": \"../components/dependency-injection.md#constructor-injection\"\n          }}>{`constructor dependency injection`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Your command should have an unique `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`, defined in the `}<inlineCode parentName=\"p\">{`configure()`}</inlineCode>{` method of the Command class:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-php\"\n          }}>{`protected function configure(): void\n{\n    $this->setName('my:first:command');\n    $this->setDescription('This is my first console command.');\n\n    parent::configure();\n}\n...\n`}</code></pre>\n        <p parentName=\"li\">{`or in the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-xml\"\n          }}>{`<?xml version=\"1.0\"?>\n<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\">\n    ...\n    <type name=\"Magento\\\\CommandExample\\\\Console\\\\Command\\\\SomeCommand\">\n        <arguments>\n            <!-- configure the command name via constructor $name argument -->\n            <argument name=\"name\" xsi:type=\"string\">my:first:command</argument>\n        </arguments>\n    </type>\n    ...\n</config>\n`}</code></pre>\n        <p parentName=\"li\">{` or in the `}<inlineCode parentName=\"p\">{`__construct`}</inlineCode>{` method (declaration is similar to `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`):`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-php\"\n          }}>{`public function __construct()\n{\n    parent::__construct('my:first:command');\n}\n`}</code></pre>\n        <p parentName=\"li\">{`Otherwise the `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/symfony/console/blob/master/Application.php#L470\"\n          }}>{`Symfony`}</a>{` framework will return an `}<inlineCode parentName=\"p\">{`The command defined in \"<Command class>\" cannot have an empty name.`}</inlineCode>{` error.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"add-cli-commands-using-dependency-injection\"\n    }}>{`Add CLI commands using dependency injection`}</h2>\n    <p>{`The sample modules provide a demonstration of many programming techniques, including adding a CLI command using dependency injection. Look at the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2-samples/tree/master/sample-module-command\"\n      }}><inlineCode parentName=\"a\">{`sample-module-command`}</inlineCode></a>{` for an example. The module's `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2-samples/blob/master/sample-module-command/README.md\"\n      }}>{`README.md`}</a>{` discusses how to install it.`}</p>\n    <p>{`Following is a summary of the process:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a Command class (the recommended location is `}<inlineCode parentName=\"p\">{`<your component root dir>/Console/Command`}</inlineCode>{`).`}</p>\n        <p parentName=\"li\">{`See `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Store/Console/Command/StoreListCommand.php\"\n          }}><inlineCode parentName=\"a\">{`<Magento_Store_module_dir>/Console/Command/StoreListCommand.php`}</inlineCode></a>{` for example.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-php\"\n          }}>{`<?php\n\ndeclare(strict_types=1);\n\nnamespace Magento\\\\CommandExample\\\\Console\\\\Command;\n\nuse Magento\\\\Framework\\\\Exception\\\\LocalizedException;\nuse Symfony\\\\Component\\\\Console\\\\Command\\\\Command;\nuse Symfony\\\\Component\\\\Console\\\\Input\\\\InputInterface;\nuse Symfony\\\\Component\\\\Console\\\\Input\\\\InputOption;\nuse Symfony\\\\Component\\\\Console\\\\Output\\\\OutputInterface;\n\nclass SomeCommand extends Command\n{\n    private const NAME = 'name';\n\n    protected function configure(): void\n    {\n        $this->setName('my:first:command');\n        $this->setDescription('This is my first console command.');\n        $this->addOption(\n            self::NAME,\n            null,\n            InputOption::VALUE_REQUIRED,\n            'Name'\n        );\n\n        parent::configure();\n    }\n\n    /**\n     * Execute the command\n     *\n     * @param InputInterface $input\n     * @param OutputInterface $output\n     *\n     * @return int\n     */\n     protected function execute(InputInterface $input, OutputInterface $output): int\n     {\n         $exitCode = 0;\n         \n         if ($name = $input->getOption(self::NAME)) {\n             $output->writeln('<info>Provided name is \\`' . $name . '\\`</info>');\n         }\n\n         $output->writeln('<info>Success message.</info>');\n         $output->writeln('<comment>Some comment.</comment>');\n\n         try {\n             if (rand(0, 1)) {\n                throw new LocalizedException(__('An error occurred.'));\n             }\n         } catch (LocalizedException $e) {\n             $output->writeln(sprintf(\n                 '<error>%s</error>',\n                 $e->getMessage()\n             ));\n             $exitCode = 1;\n         }\n         \n         return $exitCode;\n     }\n}\n`}</code></pre>\n        <p parentName=\"li\">{` Style the output text by using `}<inlineCode parentName=\"p\">{`<error>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<info>`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`<comment>`}</inlineCode>{` tags. See `}<a parentName=\"p\" {...{\n            \"href\": \"https://symfony.com/doc/current/console/coloring.html\"\n          }}>{`Symfony`}</a>{` documentation for more information about styling.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Declare your Command class in `}<inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\Console\\\\CommandListInterface`}</inlineCode>{` and configure the command name using dependency injection (`}<inlineCode parentName=\"p\">{`<your component root dir>/etc/di.xml`}</inlineCode>{`):`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-xml\"\n          }}>{`<?xml version=\"1.0\"?>\n<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\">\n    ...\n    <type name=\"Magento\\\\Framework\\\\Console\\\\CommandListInterface\">\n        <arguments>\n            <argument name=\"commands\" xsi:type=\"array\">\n                <item name=\"commandexample_somecommand\" xsi:type=\"object\">Magento\\\\CommandExample\\\\Console\\\\Command\\\\SomeCommand</item>\n            </argument>\n        </arguments>\n    </type>\n    ...\n</config>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Clean the cache:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento cache:clean\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Regenerate the code:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento setup:di:compile\n`}</code></pre>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"result\"\n    }}>{`Result`}</h3>\n    <p>{`As a result, the new command `}<inlineCode parentName=\"p\">{`my:first:command`}</inlineCode>{` that accepts a `}<inlineCode parentName=\"p\">{`--name`}</inlineCode>{` parameter is ready to use.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento my:first:command --name 'John'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}