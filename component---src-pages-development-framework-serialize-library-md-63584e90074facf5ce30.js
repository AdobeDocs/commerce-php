"use strict";(self.webpackChunkcommerce_php=self.webpackChunkcommerce_php||[]).push([[8372],{91400:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return d},default:function(){return h}});var i,r=n(87462),t=n(63366),o=(n(15007),n(64983)),s=n(91515),l=["components"],d={},m=(i="InlineAlert",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)}),p={_frontmatter:d},c=s.Z;function h(e){var a=e.components,n=(0,t.Z)(e,l);return(0,o.mdx)(c,(0,r.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"serialize-library"},"Serialize library"),(0,o.mdx)("p",null,"This ",(0,o.mdx)("a",{parentName:"p",href:"https://glossary.magento.com/library"},"library")," provides a secure way of serializing and unserializing strings, integers, floats, booleans, and arrays."),(0,o.mdx)("p",null,"Magento's Serialize library provides the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Magento\\Framework\\Serialize\\SerializerInterface")," and the Json and Serialize implementations for serializing data."),(0,o.mdx)("h2",{id:"serialization"},"Serialization"),(0,o.mdx)("p",null,"The main purpose of data serialization is to convert data into a string using ",(0,o.mdx)("inlineCode",{parentName:"p"},"serialize()")," to store in a database, a cache, or pass onto another layer in the application."),(0,o.mdx)("p",null,"The other half of this process uses the ",(0,o.mdx)("inlineCode",{parentName:"p"},"unserialize()")," function to reverse the process and convert a serialized string back into string, integer, float, boolean, or array data."),(0,o.mdx)(m,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"For security reasons, ",(0,o.mdx)("inlineCode",{parentName:"p"},"SerializerInterface")," implementations, such as the Json and Serialize classes, should not serialize and unserialize objects."),(0,o.mdx)("h2",{id:"implementations"},"Implementations"),(0,o.mdx)("h3",{id:"json-default"},"Json (default)"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Serialize/Serializer/Json.php"},(0,o.mdx)("inlineCode",{parentName:"a"},"Magento\\Framework\\Serialize\\Serializer\\Json"))," class serializes and unserializes data using the ",(0,o.mdx)("a",{parentName:"p",href:"http://www.json.org/"},"JSON")," format."),(0,o.mdx)("h3",{id:"jsonhextag"},"JsonHexTag"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Serialize/Serializer/JsonHexTag.php"},(0,o.mdx)("inlineCode",{parentName:"a"},"Magento\\Framework\\Serialize\\Serializer\\JsonHexTag"))," class serializes and unserializes data using the ",(0,o.mdx)("a",{parentName:"p",href:"http://www.json.org/"},"JSON")," format using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"JSON_HEX_TAG")," option enabled."),(0,o.mdx)("h3",{id:"base64json"},"Base64Json"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Serialize/Serializer/Base64Json.php"},(0,o.mdx)("inlineCode",{parentName:"a"},"Magento\\Framework\\Serialize\\Serializer\\Base64Json"))," class serializes and encodes in the base64 format, and decodes the base64 encoded string and unserializes data using the ",(0,o.mdx)("a",{parentName:"p",href:"http://www.json.org/"},"JSON")," format."),(0,o.mdx)("h3",{id:"serialize"},"Serialize"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Serialize/Serializer/Serialize.php"},(0,o.mdx)("inlineCode",{parentName:"a"},"Magento\\Framework\\Serialize\\Serializer\\Serialize"))," class is less secure than the Json implementation but provides better performance on large arrays."),(0,o.mdx)("h3",{id:"formdata"},"FormData"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Serialize/Serializer/FormData.php"},(0,o.mdx)("inlineCode",{parentName:"a"},"Magento\\Framework\\Serialize\\Serializer\\FormData"))," class unserializes the form data using the ",(0,o.mdx)("a",{parentName:"p",href:"http://www.json.org/"},"JSON")," format. This class does not serialize objects to a form data format."),(0,o.mdx)(m,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"Adobe discourages using the Serialize implementation directly because it can lead to security vulnerabilities. Always use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"SerializerInterface")," for serializing and unserializing."),(0,o.mdx)("h2",{id:"usage"},"Usage"),(0,o.mdx)("p",null,"Declare ",(0,o.mdx)("inlineCode",{parentName:"p"},"SerializerInterface")," as a ",(0,o.mdx)("a",{parentName:"p",href:"../components/dependency-injection.md"},"constructor dependency")," to get an instance of a serializer class."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php"},"use Magento\\Framework\\Serialize\\SerializerInterface;\n\n...\n\n/**\n * @var SerializerInterface\n */\nprivate $serializer;\n\n...\n\npublic function __construct(SerializerInterface $serializer) {\n  $this->serializer = $serializer;\n}\n")),(0,o.mdx)("p",null,"\\","\nThe following example shows how to use a serializer's ",(0,o.mdx)("inlineCode",{parentName:"p"},"serialize()")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"unserialize()")," functions to store and retrieve array data from a cache:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php"},"\n...\n\n/**\n * @var string\n */\nprivate $cacheId = 'mySerializedData';\n\n...\n\n/**\n * Save data to cache\n * @param array $data\n *\n * @return bool\n */\npublic function saveDataToCache($data)\n{\n  return $this->getCache()->save($this->serializer->serialize($data), $this->cacheId);\n}\n\n...\n\n/**\n * Load data from cache\n *\n * @return array\n */\npublic function loadDataFromCache()\n{\n  $data = $this->getCache()->load($this->cacheId);\n  if (false !== $data) {\n    $data = $this->serializer->unserialize($data);\n  }\n  return $data;\n}\n...\n")),(0,o.mdx)("h2",{id:"backward-compatibility-note"},"Backward compatibility note"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"SerializerInterface")," interface and its implementations only exist since Adobe Commerce and Magento Open Source version 2.2.\nBecause of this, it is not possible to use these classes in code that has to be compatible with Adobe Commerce and Magento Open Source 2.1 or 2.0."),(0,o.mdx)("p",null,"In code that is compatible with earlier versions of Adobe Commerce and Magento Open Source, constructor dependency injection can not be used to get an instance of ",(0,o.mdx)("inlineCode",{parentName:"p"},"SerializerInterface"),".\nInstead, a runtime check if the ",(0,o.mdx)("inlineCode",{parentName:"p"},"SerializerInterface")," definition exists can made, and if it does, it can be instantiated by directly accessing the object manager using a static method. Alternatively, a check against the Adobe Commerce and Magento Open Source version or the ",(0,o.mdx)("inlineCode",{parentName:"p"},"magento/framework")," Composer package version works too.\nIf the interface does not exist or an earlier version of Adobe Commerce and Magento Open Source is being executed, the appropriate native PHP serialization function has to be called, e.g. ",(0,o.mdx)("inlineCode",{parentName:"p"},"\\serialize()")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"\\json_encode()"),", depending on the usercase."),(0,o.mdx)("p",null,"Here is an example:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php"},"use Magento\\Framework\\Serialize\\SerializerInterface;\nuse Magento\\Framework\\App\\ObjectManager;\n\n...\n/**\n * @param mixed $data\n * @return string\n */\nprivate function serialize($data)\n{\n    if (class_exists(SerializerInterface::class)) {\n        $objectManager = ObjectManager::getInstance();\n        $serializer = $objectManager->create(SerializerInterface::class);\n        return $serializer->serialize($data);\n    }\n    return \\serialize($data);\n}\n...\n\n")))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-development-framework-serialize-library-md-63584e90074facf5ce30.js.map