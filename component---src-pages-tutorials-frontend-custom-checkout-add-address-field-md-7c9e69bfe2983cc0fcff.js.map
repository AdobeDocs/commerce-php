{"version":3,"file":"component---src-pages-tutorials-frontend-custom-checkout-add-address-field-md-7c9e69bfe2983cc0fcff.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/tutorials/frontend/custom-checkout/add-address-field.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-a-new-field-in-the-address-form\"\n    }}>{`Add a new field in the address form`}</h1>\n    <p>{`You can add new fields to default `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/checkout\"\n      }}>{`checkout`}</a>{` forms, such as shipping address or billing address forms. To illustrate this ability, this topic describes adding a field to the shipping address form.`}</p>\n    <p>{`To add your custom field to the checkout address form and access its value on the client side:`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-1-add-the-field-to-layout\"\n        }}>{`Add the field to layout`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-2-add-a-js-mixin-to-modify-data-submission\"\n        }}>{`Add a JS mixin to modify data submission`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-3-load-your-mixin\"\n        }}>{`Load your mixin`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-4-add-field-to-address-model\"\n        }}>{`Add the field to address model`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-5-access-the-value-of-the-custom-field-on-server-side\"\n        }}>{`Access the value of the custom field on server side`}</a>{`.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"step-1-add-the-field-to-layout\"\n    }}>{`Step 1: Add the field to layout`}</h2>\n    <p>{`Both shipping address and billing address forms are `}<a parentName=\"p\" {...{\n        \"href\": \"add-form.md#dynamically-defined-forms\"\n      }}>{`generated dynamically`}</a>{`. To modify their layouts, create a `}<a parentName=\"p\" {...{\n        \"href\": \"../../../development/components/plugins.md\"\n      }}>{`plugin`}</a>{` for the `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Checkout\\\\Block\\\\Checkout\\\\LayoutProcessor::process`}</inlineCode>{` method and declare it in the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file in your module.`}</p>\n    <p>{`The following code snippet enumerates sample logic for adding a field named `}<inlineCode parentName=\"p\">{`Custom Attribute`}</inlineCode>{` to the shipping address form:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`$customAttributeCode = 'custom_field';\n$customField = [\n    'component' => 'Magento_Ui/js/form/element/abstract',\n    'config' => [\n        // customScope is used to group elements within a single form (e.g. they can be validated separately)\n        'customScope' => 'shippingAddress.custom_attributes',\n        'customEntry' => null,\n        'template' => 'ui/form/field',\n        'elementTmpl' => 'ui/form/element/input',\n        'tooltip' => [\n            'description' => 'this is what the field is for',\n        ],\n    ],\n    'dataScope' => 'shippingAddress.custom_attributes' . '.' . $customAttributeCode,\n    'label' => 'Custom Attribute',\n    'provider' => 'checkoutProvider',\n    'sortOrder' => 0,\n    'validation' => [\n       'required-entry' => true\n    ],\n    'options' => [],\n    'filterBy' => null,\n    'customEntry' => null,\n    'visible' => true,\n    'value' => '' // value field is used to set a default value of the attribute\n];\n\n$jsLayout['components']['checkout']['children']['steps']['children']['shipping-step']['children']['shippingAddress']['children']['shipping-address-fieldset']['children'][$customAttributeCode] = $customField;\n`}</code></pre>\n    <p>{`Via the previous example, the field is added to the `}<inlineCode parentName=\"p\">{`customAttributes`}</inlineCode>{` property of `}<inlineCode parentName=\"p\">{`'Magento_Checkout/js/model/new-customer-address.js`}</inlineCode>{`, a JavaScript object that lists all predefined address attributes and matches the corresponding server-side interface `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Quote\\\\Api\\\\Data\\\\AddressInterface`}</inlineCode>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`customAttributes`}</inlineCode>{` property was designed to contain custom EAV address attributes and is related to the `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Quote\\\\Model\\\\Quote\\\\Address\\\\CustomAttributeListInterface::getAttributes`}</inlineCode>{` method. The sample code above will automatically handle local storage persistence on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/frontend\"\n      }}>{`frontend`}</a>{`.`}</p>\n    <p>{`Optionally, instead of adding a plugin, you can use a `}<a parentName=\"p\" {...{\n        \"href\": \"../../../development/components/dependency-injection.md\"\n      }}>{`dependency injection (DI)`}</a>{`. To use a DI, add the `}<inlineCode parentName=\"p\">{`LayoutProcessor`}</inlineCode>{`, which adds the custom field to the address form class, to the `}<inlineCode parentName=\"p\">{`<your_module_dir>/Block/Checkout/`}</inlineCode>{` directory. The class must implement the `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Checkout\\\\Block\\\\Checkout\\\\LayoutProcessorInterface`}</inlineCode>{` interface. Use the code sample above as an example of the `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Checkout\\\\Block\\\\Checkout\\\\LayoutProcessorInterface::process()`}</inlineCode>{` method implementation.`}</p>\n    <p>{`To add your `}<inlineCode parentName=\"p\">{`LayoutProcessor`}</inlineCode>{` class the corresponding pool of processors, specify the following (where `}<inlineCode parentName=\"p\">{`%unique_name%`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`%path\\\\to\\\\your\\\\LayoutProcessor%`}</inlineCode>{` must be replaced by your real values) in the `}<inlineCode parentName=\"p\">{`<your_module_dir>/etc/frontend/di.xml`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<type name=\"Magento\\\\Checkout\\\\Block\\\\Onepage\">\n        <arguments>\n            <argument name=\"layoutProcessors\" xsi:type=\"array\">\n                <item name=\"%unique_name%\" xsi:type=\"object\">%path\\\\to\\\\your\\\\LayoutProcessor%</item>\n            </argument>\n        </arguments>\n</type>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-2-add-a-js-mixin-to-modify-data-submission\"\n    }}>{`Step 2: Add a JS mixin to modify data submission`}</h2>\n    <p>{`Add a JS `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/mixin\"\n      }}>{`mixin`}</a>{`, to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/server-side\"\n      }}>{`server side`}</a>{`, to change the behavior of the component responsible for the data submission.`}</p>\n    <p>{`In your custom module, define a mixin as a separate AMD module that returns a callback function. Add the mixin file anywhere in the `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/web`}</inlineCode>{` directory. There are no strict requirements for the mixin file naming.`}</p>\n    <p>{`The following code sample is a sample mixin modifying the behavior of `}<inlineCode parentName=\"p\">{`Magento_Checkout/js/action/set-shipping-information`}</inlineCode>{`, the component responsible for data submission between shipping and billing checkout steps:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/*jshint browser:true jquery:true*/\n/*global alert*/\ndefine([\n    'jquery',\n    'mage/utils/wrapper',\n    'Magento_Checkout/js/model/quote'\n], function ($, wrapper, quote) {\n    'use strict';\n\n    return function (setShippingInformationAction) {\n\n        return wrapper.wrap(setShippingInformationAction, function (originalAction) {\n            var shippingAddress = quote.shippingAddress();\n            if (shippingAddress['extension_attributes'] === undefined) {\n                shippingAddress['extension_attributes'] = {};\n            }\n\n            var attribute = shippingAddress.customAttributes.find(\n                function (element) {\n                    return element.attribute_code === 'custom_field';\n                }\n            );\n\n            shippingAddress['extension_attributes']['custom_field'] = attribute.value;\n            // pass execution to original action ('Magento_Checkout/js/action/set-shipping-information')\n            return originalAction();\n        });\n    };\n});\n`}</code></pre>\n    <p>{`When adding a field to the billing address form, you must modify the behavior of the `}<inlineCode parentName=\"p\">{`Magento_Checkout/js/action/place-order`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Magento_Checkout/js/action/set-payment-information`}</inlineCode>{` component, depending on when do you need the custom field valued to be passed to the server side.`}</p>\n    <p>{`To see an example of a mixing that modifies one of these components, see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/CheckoutAgreements/view/frontend/web/js/model/place-order-mixin.js\"\n      }}>{`place-order-mixin.js`}</a>{` in the Magento_CheckoutAgreements `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/module\"\n      }}>{`module`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"step-3-load-your-mixin\"\n    }}>{`Step 3: Load your mixin`}</h2>\n    <p>{`Tell the application to load your mixin for the corresponding JS component by adding the `}<inlineCode parentName=\"p\">{`requirejs-config.js`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`<YourModule_dir>/view/frontend/`}</inlineCode>{` directory.`}</p>\n    <p>{`The following code sample shows an example utilizing the sample mixin added earlier:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`var config = {\n    config: {\n        mixins: {\n            'Magento_Checkout/js/action/set-shipping-information': {\n                '<YourNamespace_YourModule>/js/action/set-shipping-information-mixin': true\n            }\n        }\n    }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-4-add-field-to-address-model\"\n    }}>{`Step 4: Add field to address model`}</h2>\n    <p>{`To add the field to the address model on the server side, add the `}<inlineCode parentName=\"p\">{`extension_attributes.xml`}</inlineCode>{` file in the `}<inlineCode parentName=\"p\">{`<YourModule_dir>/etc/`}</inlineCode>{` directory.`}</p>\n    <p>{`The following code is an example of an `}<inlineCode parentName=\"p\">{`extension_attributes.xml`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<?xml version=\"1.0\"?>\n\n<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Api/etc/extension_attributes.xsd\">\n    <extension_attributes for=\"Magento\\\\Quote\\\\Api\\\\Data\\\\AddressInterface\">\n        <attribute code=\"custom_field\" type=\"string\" />\n    </extension_attributes>\n</config>\n`}</code></pre>\n    <p>{`Clear the `}<inlineCode parentName=\"p\">{`generated/code`}</inlineCode>{` directory when you run the `}<inlineCode parentName=\"p\">{`setup:di:compile`}</inlineCode>{` command. New getter and setter methods will be added in `}<inlineCode parentName=\"p\">{`generated/code/Magento/Quote/Api/Data/AddressExtension.php`}</inlineCode>{` file.`}</p>\n    <h2 {...{\n      \"id\": \"step-5-access-the-value-of-the-custom-field-on-server-side\"\n    }}>{`Step 5: Access the value of the custom field on server side`}</h2>\n    <p>{`If you completed all the steps described in the previous sections, the application generates the interface that includes your custom attribute and you can access your field value.`}</p>\n    <p>{`You can set/get these attributes values by creating an instance of the  `}<inlineCode parentName=\"p\">{`Magento/Quote/Api/Data/AddressInterface.php`}</inlineCode>{` interface.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\n// ... //\n\nuse Magento\\\\Checkout\\\\Api\\\\Data\\\\ShippingInformationInterface;\nuse Magento\\\\Framework\\\\View\\\\Element\\\\Template;\nuse Magento\\\\Framework\\\\View\\\\Element\\\\Template\\\\Context;\n\nclass MyBlock extends Template {\n\n    /**\n     * @var ShippingInformationInterface\n     */\n    private $_addressInformation;\n\n    /**\n     * @param Context $context\n     * @param ShippingInformationInterface $addressInformation\n     * @param array $data\n     */\n    public function __construct(\n        Context $context,\n        ShippingInformationInterface $addressInformation,\n        array $data = []\n    ) {\n        $this->_addressInformation = $addressInformation;\n        parent::__construct($context, $data);\n    }\n\n    /**\n     * Get custom Shipping Charge\n     *\n     * @return String\n     */\n    public function getShippingCharge()\n    {\n        $extAttributes = $this->_addressInformation->getExtensionAttributes();\n        return $extAttributes->getCustomField(); //get custom attribute data.\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-6-run-cli-commands\"\n    }}>{`Step 6: Run CLI commands`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Compile the code with:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento setup:di:compile\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Next, deploy static content:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento setup:static-content:deploy\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Then clean the cache:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento cache:clean\n`}</code></pre>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}