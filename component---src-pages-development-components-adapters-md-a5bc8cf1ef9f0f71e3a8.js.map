{"version":3,"file":"component---src-pages-development-components-adapters-md-a5bc8cf1ef9f0f71e3a8.js","mappings":"8QAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,YADR,aAGA,iDAAkC,cAAGC,WAAW,IAC5C,KAAQ,iDADsB,mBAAlC,sPAIA,eACE,GAAM,eADR,gBAGA,4CAA6B,cAAGA,WAAW,IACvC,KAAQ,wCADiB,WAA7B,iIAGmD,cAAGA,WAAW,IAC7D,KAAQ,oCADuC,OAHnD,8BAK8C,cAAGA,WAAW,IACxD,KAAQ,wCADkC,WAL9C,MAQA,6DAA8C,cAAGA,WAAW,IACxD,KAAQ,2BADkC,wBAA9C,yEAGA,eACE,GAAM,gBADR,iBAGA,iGAAkF,uBAAYA,WAAW,KAAvB,oBAAlF,yHACmD,uBAAYA,WAAW,KAAvB,WADnD,yHAGA,+LACA,eACE,GAAM,SADR,UAGA,eACE,GAAM,iCACL,uBAAYA,WAAW,MAAvB,qCACH,0BAAW,cAAGA,WAAW,IACrB,KAAQ,6FADD,YAAX,mCAEwD,uBAAYA,WAAW,KAAvB,0BAFxD,6EAGA,0BAAW,cAAGA,WAAW,IACrB,KAAQ,mHACP,uBAAYA,WAAW,KAAvB,qBAFL,+BAEoG,uBAAYA,WAAW,KAAvB,oBAFpG,uBAEuL,cAAGA,WAAW,IACjM,KAAQ,qHACP,uBAAYA,WAAW,KAAvB,WAJL,SAIoE,cAAGA,WAAW,IAC9E,KAAQ,qHACP,uBAAYA,WAAW,KAAvB,YANL,kCAOA,0BAAW,cAAGA,WAAW,IACrB,KAAQ,sCADD,WAAX,yBAE6C,cAAGA,WAAW,IACvD,KAAQ,8DADiC,UAF7C,qDAIwE,cAAGA,WAAW,IAClF,KAAQ,+DACP,uBAAYA,WAAW,KAAvB,kBANL,sEAOA,eACE,GAAM,0BACL,uBAAYA,WAAW,MAAvB,6BACH,0BAAW,cAAGA,WAAW,IACrB,KAAQ,sFACP,uBAAYA,WAAW,KAAvB,4BAFL,+HAGA,0BAAW,cAAGA,WAAW,IACrB,KAAQ,mHACP,uBAAYA,WAAW,KAAvB,qBAFL,wDAE6H,cAAGA,WAAW,IACvI,KAAQ,sGACP,uBAAYA,WAAW,KAAvB,QAJL,SAIiE,cAAGA,WAAW,IAC3E,KAAQ,8GACP,uBAAYA,WAAW,KAAvB,gBANL,2FAOA,eACE,GAAM,YADR,aAGA,uFAAwE,cAAGA,WAAW,IAClF,KAAQ,yCAD4D,YAAxE,MAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,8TAkBL,uEAAwD,uBAAYA,WAAW,KAAvB,oBAAxD,mBAAuI,cAAGA,WAAW,IACjJ,KAAQ,2CAD2H,gBAAvI,sCAE+D,cAAGA,WAAW,IACzE,KAAQ,qCADmD,QAF/D,MAKA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,0eAwBL,qMACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,6KAIL,iFAAkE,uBAAYA,WAAW,KAAvB,oBAAlE,mBAAiJ,cAAGA,WAAW,IAC3J,KAAQ,sCADqI,WAAjJ,0HAG6E,uBAAYA,WAAW,KAAvB,WAH7E,wCAIA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,4qBAoCL,oCAAqB,cAAGA,WAAW,IAC/B,KAAQ,qDADS,wBAArB,2BAE4D,uBAAYA,WAAW,KAAvB,UAF5D,kGAIA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,mYAiBTJ,EAAWK,gBAAiB","sources":["webpack://commerce-php/./src/pages/development/components/adapters.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"adapters\"\n    }}>{`Adapters`}</h1>\n    <p>{`Adapter classes follow the `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Adapter_pattern\"\n      }}>{`adapter pattern`}</a>{` and wrap around classes from third-party libraries.\nThese classes allow you to use functionality from third-party libraries in your code by converting the third-party class interfaces into an interface that is expected by your native code.`}</p>\n    <h2 {...{\n      \"id\": \"when-to-use\"\n    }}>{`When to use`}</h2>\n    <p>{`You should always use `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/adapter\"\n      }}>{`adapter`}</a>{` classes instead of directly using classes from third-party libraries.\nThis reduces the change impact on your code when the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/api\"\n      }}>{`API`}</a>{` changes in a third-party `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/library\"\n      }}>{`library`}</a>{`.`}</p>\n    <p>{`We recommend using adapter classes for `}<a parentName=\"p\" {...{\n        \"href\": \"dependency-injection.md\"\n      }}>{`dependency injection`}</a>{` to get access to the functionality provided by third-party classes.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-write\"\n    }}>{`How to write`}</h2>\n    <p>{`A common approach in developing an adapter is to create an interface named `}<inlineCode parentName=\"p\">{`AdapterInterface`}</inlineCode>{` to describe the functionality the third-party class provides.\nThis class is typically found in a directory labeled `}<inlineCode parentName=\"p\">{`Adapter`}</inlineCode>{`.\nClasses implementing this adapter interface use the third-party class directly to provide indirect functionality.`}</p>\n    <p>{`This approach allows you to update or substitute different implementations provided by other third-party classes without the need to update code that uses your adapter.`}</p>\n    <h2 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h2>\n    <h3 {...{\n      \"id\": \"magentoframeworkcodeminifier\"\n    }}><inlineCode parentName=\"h3\">{`Magento/Framework/Code/Minifier`}</inlineCode></h3>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Code/Minifier\"\n      }}>{`minifier`}</a>{` functionality provided by the `}<inlineCode parentName=\"p\">{`Magento/Framework/Code`}</inlineCode>{` library involves the use of third-party libraries for code compression.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Code/Minifier/AdapterInterface.php\"\n      }}><inlineCode parentName=\"a\">{`AdapterInterface`}</inlineCode></a>{` for this class contains a `}<inlineCode parentName=\"p\">{`minify($content)`}</inlineCode>{` function that the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Code/Minifier/Adapter/Css/CSSmin.php\"\n      }}><inlineCode parentName=\"a\">{`CSSmin`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Code/Minifier/Adapter/Js/JShrink.php\"\n      }}><inlineCode parentName=\"a\">{`JShrink`}</inlineCode></a>{` implementation class define.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tedious/JShrink\"\n      }}>{`jshrink`}</a>{`(tedivm/jshrink) and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tubalmartin/YUI-CSS-compressor-PHP-port\"\n      }}>{`cssmin`}</a>{`(tubalmartin/cssmin) libraries registered in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/composer.json\"\n      }}><inlineCode parentName=\"a\">{`composer.json`}</inlineCode></a>{` file provide the functionalities for the implementation classes.`}</p>\n    <h3 {...{\n      \"id\": \"magentoframeworkimage\"\n    }}><inlineCode parentName=\"h3\">{`Magento/Framework/Image`}</inlineCode></h3>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Image\"\n      }}><inlineCode parentName=\"a\">{`Magento/Framework/Image`}</inlineCode></a>{` library uses adapters to access functionality provided by GD(php-gd2) and ImageMagick(php-imagick) third-party libraries.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Image/Adapter/AdapterInterface.php\"\n      }}><inlineCode parentName=\"a\">{`AdapterInterface`}</inlineCode></a>{` class defines the available functionality, and the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Image/Adapter/Gd2.php\"\n      }}><inlineCode parentName=\"a\">{`Gd2`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Image/Adapter/ImageMagick.php\"\n      }}><inlineCode parentName=\"a\">{`ImageMagick`}</inlineCode></a>{` adapter classes provides the concrete implementation using the third-party libraries.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`The code below describes an interface for an adapter that parses `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/markdown\"\n      }}>{`markdown`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * Interface for markdown library adapters\n */\nnamespace MyCompany\\\\MyModule\\\\Markdown\\\\Parser\\\\Adapter;\n\ninterface AdapterInterface\n{\n    /**\n     * Converts markdown text into another format\n     *\n     * @param string $text\n     * @return string\n     */\n    public function parse($text);\n}\n`}</code></pre>\n    <p>{`The code below is an implementation class of the `}<inlineCode parentName=\"p\">{`AdapterInterface`}</inlineCode>{` that uses the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/michelf/php-markdown\"\n      }}>{`php-markdown`}</a>{` library to convert markdown into `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/html\"\n      }}>{`HTML`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`namespace MyCompany\\\\MyModule\\\\Markdown\\\\Parser\\\\Adapter\\\\PhpMarkdown;\n\nuse \\\\Michelf\\\\Markdown;\nuse MyCompany\\\\MyModule\\\\Markdown\\\\Parser\\\\Adapter\\\\AdapterInterface;\n\n/**\n * Adapter for php-markdown library\n */\nclass PhpMarkdown implements AdapterInterface\n{\n    /**\n     * Convert markdown into HTML\n     *\n     * @param string $text\n     * @return string\n     */\n    public function parse($text)\n    {\n        return Markdown::defaultTransform($text);\n    }\n}\n`}</code></pre>\n    <p>{`To configure the ObjectManager to use the PhpMarkdown implementation when the AdapterInterface class is requested as a dependency, add the following code in your di.xml file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<preference for=\"MyCompany\\\\MyModule\\\\Markdown\\\\Parser\\\\Adapter\\\\AdapterInterface\" type=\"MyCompany\\\\MyModule\\\\Markdown\\\\Parser\\\\Adapter\\\\PhpMarkdown\\\\PhpMarkdown\" />\n`}</code></pre>\n    <p>{`The code below is an alternate implementation class of the `}<inlineCode parentName=\"p\">{`AdapterInterface`}</inlineCode>{` that uses the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kzykhys/Ciconia\"\n      }}>{`Ciconia`}</a>{` library to parse markdown into HTML.\nThis code differs from the previous implementations in that an instance of the `}<inlineCode parentName=\"p\">{`Ciconia`}</inlineCode>{` class is a constructor dependency.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`namespace MyCompany\\\\MyModule\\\\Markdown\\\\Parser\\\\Adapter\\\\Ciconia;\nuse Ciconia\\\\Ciconia;\nuse MyCompany\\\\MyModule\\\\Markdown\\\\Parser\\\\Adapter\\\\AdapterInterface;\n\n/**\n * Adapter for the Ciconia library\n */\nclass CiconiaParser implements AdapterInterface\n{\n    /**\n     * @var Ciconia\n     */\n     protected $parser;\n\n    /**\n     * @param Ciconia\n     */\n    public function __construct(Ciconia $parser)\n    {\n        $this->parser = $parser;\n    }\n\n    /**\n     * Convert markdown into HTML\n     *\n     * @param string $text\n     * @return string\n     */\n    public function parse($text)\n    {\n        return $this->parser->render($text);\n    }\n}\n`}</code></pre>\n    <p>{`The following `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/dependency-injection\"\n      }}>{`dependency injection`}</a>{` entries belong in the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file.\nThey describe to the ObjectManager how to create the third-party and adapter classes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"defaultCiconia\" type=\"Ciconia\\\\Ciconia\" shared=\"false\">\n   <arguments>\n       <argument name=\"renderer\" xsi:type=\"null\"/>\n   </arguments>\n</virtualType>\n<type name=\"MyCompany\\\\MyModule\\\\Markdown\\\\Parser\\\\Adapter\\\\Ciconia\\\\CiconiaParser\">\n   <arguments>\n       <argument name=\"parser\" xsi:type=\"object\">defaultCiconia</argument>\n   </arguments>\n</type>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}