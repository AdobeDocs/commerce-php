{"version":3,"file":"component---src-pages-development-payments-integrations-vault-token-ui-component-provider-md-ddabd12fb319c4277fc3.js","mappings":"gSASaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,SAAC,IAAD,CAAMA,QAAQ,UACd,eACE,GAAM,+BACH,gCACL,kBAAK,kKACL,eACE,GAAM,4BACH,6BACL,kBAAK,yEACP,cAAGC,WAAW,IACR,KAAQ,yGACL,8BAAkC,mFAC3C,cAAGA,WAAW,IACR,KAAQ,sHACL,qCAAyC,gBAChD,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,qVAYP,kBAAK,uFACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,66BAyBP,kBAAK,4HACL,kBAAK,iHAA+G,uBAAYA,WAAW,KAAM,UAAuB,kCACxK,kBAAK,iCAA+B,uBAAYA,WAAW,KAAM,2DAAwE,+CACzI,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,iUAQP,eACE,GAAM,kCACH,mCACL,kBAAK,4DAA0D,uBAAYA,WAAW,KAAM,OAAoB,wCAAsC,uBAAYA,WAAW,KAAM,gDAA6D,gBAChP,kBAAK,gCAA8B,cAAGA,WAAW,IAC7C,KAAQ,kIACL,YAAgB,MACvB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBACV,mRAeV,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/payments-integrations/vault/token-ui-component-provider.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/_includes/braintree-note.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Docs mdxType=\"Docs\" />\n    <h1 {...{\n      \"id\": \"token-ui-component-provider\"\n    }}>{`Token UI component provider`}</h1>\n    <p>{`This topic describes how to create custom vault payments UI components that are used to display stored tokens on checkout page and order placing using vault.`}</p>\n    <h2 {...{\n      \"id\": \"token-component-provider\"\n    }}>{`Token component provider`}</h2>\n    <p>{`The main logic for displaying tokens on checkout page is located in\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Model/Ui/TokensConfigProvider.php\"\n      }}>{`Vault TokensConfigProvider`}</a>{`. You just need to create a token component provider. It should implement the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/Model/Ui/TokenUiComponentProviderInterface.php\"\n      }}>{`TokenUiComponentProviderInterface`}</a>{` interface:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`interface TokenUiComponentProviderInterface\n{\n    const COMPONENT_DETAILS = 'details';\n    const COMPONENT_PUBLIC_HASH = 'publicHash';\n\n    /**\n     * @param PaymentTokenInterface $paymentToken\n     * @return TokenUiComponentInterface\n     */\n    public function getComponentForToken(PaymentTokenInterface $paymentToken);\n}\n`}</code></pre>\n    <p>{`The basic implementation of the token UI component provider can be like following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class TokenUiComponentProvider implements TokenUiComponentProviderInterface\n{\n    /**\n     * Get UI component for token\n     * @param PaymentTokenInterface $paymentToken\n     * @return TokenUiComponentInterface\n     */\n    public function getComponentForToken(PaymentTokenInterface $paymentToken)\n    {\n        $jsonDetails = json_decode($paymentToken->getTokenDetails() ?: '{}', true);\n        $component = $this->componentFactory->create(\n            [\n                'config' => [\n                    'code' => ConfigProvider::CC_VAULT_CODE,\n                    TokenUiComponentProviderInterface::COMPONENT_DETAILS => $jsonDetails,\n                    TokenUiComponentProviderInterface::COMPONENT_PUBLIC_HASH => $paymentToken->getPublicHash()\n                ],\n                'name' => 'Magento_Braintree/js/view/payment/method-renderer/vault'\n            ]\n        );\n\n        return $component;\n    }\n}\n`}</code></pre>\n    <p>{`This implementation allows to retrieve all available payment token details and specify the JS component for storefront.`}</p>\n    <p>{`Having created the component provider, you need to add it to the list of available vault config providers in `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` - the DI configuration file.`}</p>\n    <p>{`In the following example the `}<inlineCode parentName=\"p\">{`Magento\\\\Braintree\\\\Model\\\\Ui\\\\TokenUiComponentProvider`}</inlineCode>{` component provider is added to this list:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<type name=\"Magento\\\\Vault\\\\Model\\\\Ui\\\\TokensConfigProvider\">\n    <arguments>\n        <argument name=\"tokenUiComponentProviders\" xsi:type=\"array\">\n            <item name=\"braintree\" xsi:type=\"object\">Magento\\\\Braintree\\\\Model\\\\Ui\\\\TokenUiComponentProvider</item>\n        </argument>\n    </arguments>\n</type>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"javascript-component-for-vault\"\n    }}>{`JavaScript component for vault`}</h2>\n    <p>{`In your custom module directory, create the component's `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file. It must be located under the `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/web/js/view/`}</inlineCode>{` directory.`}</p>\n    <p>{`The component should extend `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/tree/2.4/app/code/Magento/Vault/view/frontend/web/js/view/payment/method-renderer/vault.js\"\n      }}>{`vault.js`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`define([\n    'Magento_Vault/js/view/payment/method-renderer/vault',\n], function (VaultComponent) {\n    'use strict';\n\n    return VaultComponent.extend({\n        defaults: {\n            template: 'Magento_Vault/payment/form'\n        }\n        ...\n    });\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}