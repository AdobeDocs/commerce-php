{"version":3,"file":"component---src-pages-developer-framework-serialize-library-md-e13cd8418bbfc9c46884.js","mappings":"qMAUsBA,E,wEAFTC,EAAe,GAOtBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,YADR,aAGA,2BAAY,cAAGC,WAAW,IACtB,KAAQ,wCADA,WAAZ,6GAGA,+DAAgD,uBAAYA,WAAW,KAAvB,sDAAhD,sEACA,eACE,GAAM,iBADR,kBAGA,oGAAqF,uBAAYA,WAAW,KAAvB,eAArF,qFACA,8DAA+C,uBAAYA,WAAW,KAAvB,iBAA/C,+HACA,SAACV,EAAD,CAAaW,QAAQ,UAAUC,MAAM,OAAOH,QAAQ,iBACpD,4CAA6B,uBAAYC,WAAW,KAAvB,uBAA7B,4GACA,eACE,GAAM,mBADR,oBAGA,eACE,GAAM,gBADR,mBAGA,0BAAW,cAAGA,WAAW,IACrB,KAAQ,8GACP,uBAAYA,WAAW,KAAvB,oDAFL,sDAE0J,cAAGA,WAAW,IACpK,KAAQ,wBAD8I,QAF1J,aAKA,eACE,GAAM,cADR,eAGA,0BAAW,cAAGA,WAAW,IACrB,KAAQ,oHACP,uBAAYA,WAAW,KAAvB,0DAFL,sDAEgK,cAAGA,WAAW,IAC1K,KAAQ,wBADoJ,QAFhK,sBAIuC,uBAAYA,WAAW,KAAvB,gBAJvC,qBAKA,eACE,GAAM,cADR,eAGA,0BAAW,cAAGA,WAAW,IACrB,KAAQ,oHACP,uBAAYA,WAAW,KAAvB,0DAFL,8HAEwO,cAAGA,WAAW,IAClP,KAAQ,wBAD4N,QAFxO,aAKA,eACE,GAAM,aADR,cAGA,0BAAW,cAAGA,WAAW,IACrB,KAAQ,mHACP,uBAAYA,WAAW,KAAvB,yDAFL,wGAGA,eACE,GAAM,YADR,aAGA,0BAAW,cAAGA,WAAW,IACrB,KAAQ,kHACP,uBAAYA,WAAW,KAAvB,wDAFL,gDAEwJ,cAAGA,WAAW,IAClK,KAAQ,wBAD4I,QAFxJ,0EAKA,SAACV,EAAD,CAAaW,QAAQ,UAAUC,MAAM,OAAOH,QAAQ,iBACpD,oJAAqI,uBAAYC,WAAW,KAAvB,uBAArI,wCACA,eACE,GAAM,SADR,UAGA,8BAAe,uBAAYA,WAAW,KAAvB,uBAAf,UAAwF,cAAGA,WAAW,IAClG,KAAQ,yCAD4E,0BAAxF,+CAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,qPAiBL,mFACoD,uBAAYA,WAAW,KAAvB,eADpD,SACoH,uBAAYA,WAAW,KAAvB,iBADpH,8DAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,ujBAwCL,eACE,GAAM,+BADR,gCAGA,0BAAW,uBAAYA,WAAW,KAAvB,uBAAX,gQAEA,yLAA0K,uBAAYA,WAAW,KAAvB,uBAA1K,uCAC8B,uBAAYA,WAAW,KAAvB,uBAD9B,iOAC8T,uBAAYA,WAAW,KAAvB,qBAD9T,sOAE0L,uBAAYA,WAAW,KAAvB,iBAF1L,QAE2P,uBAAYA,WAAW,KAAvB,mBAF3P,iCAGA,0CACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,qeA0BTH,EAAWM,gBAAiB","sources":["webpack://commerce-php/./src/pages/developer/framework/serialize-library.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`This `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/library\"\n      }}>{`library`}</a>{` provides a secure way of serializing and unserializing strings, integers, floats, booleans, and arrays.`}</p>\n    <p>{`Magento's Serialize library provides the `}<inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\Serialize\\\\SerializerInterface`}</inlineCode>{` and the Json and Serialize implementations for serializing data.`}</p>\n    <h2 {...{\n      \"id\": \"serialization\"\n    }}>{`Serialization`}</h2>\n    <p>{`The main purpose of data serialization is to convert data into a string using `}<inlineCode parentName=\"p\">{`serialize()`}</inlineCode>{` to store in a database, a cache, or pass onto another layer in the application.`}</p>\n    <p>{`The other half of this process uses the `}<inlineCode parentName=\"p\">{`unserialize()`}</inlineCode>{` function to reverse the process and convert a serialized string back into string, integer, float, boolean, or array data.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`For security reasons, `}<inlineCode parentName=\"p\">{`SerializerInterface`}</inlineCode>{` implementations, such as the Json and Serialize classes, should not serialize and unserialize objects.`}</p>\n    <h2 {...{\n      \"id\": \"implementations\"\n    }}>{`Implementations`}</h2>\n    <h3 {...{\n      \"id\": \"json-default\"\n    }}>{`Json (default)`}</h3>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Serialize/Serializer/Json.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Framework\\\\Serialize\\\\Serializer\\\\Json`}</inlineCode></a>{` class serializes and unserializes data using the `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.json.org/\"\n      }}>{`JSON`}</a>{` format.`}</p>\n    <h3 {...{\n      \"id\": \"jsonhextag\"\n    }}>{`JsonHexTag`}</h3>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Serialize/Serializer/JsonHexTag.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Framework\\\\Serialize\\\\Serializer\\\\JsonHexTag`}</inlineCode></a>{` class serializes and unserializes data using the `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.json.org/\"\n      }}>{`JSON`}</a>{` format using the `}<inlineCode parentName=\"p\">{`JSON_HEX_TAG`}</inlineCode>{` option enabled.`}</p>\n    <h3 {...{\n      \"id\": \"base64json\"\n    }}>{`Base64Json`}</h3>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Serialize/Serializer/Base64Json.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Framework\\\\Serialize\\\\Serializer\\\\Base64Json`}</inlineCode></a>{` class serializes and encodes in the base64 format, and decodes the base64 encoded string and unserializes data using the `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.json.org/\"\n      }}>{`JSON`}</a>{` format.`}</p>\n    <h3 {...{\n      \"id\": \"serialize\"\n    }}>{`Serialize`}</h3>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Serialize/Serializer/Serialize.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Framework\\\\Serialize\\\\Serializer\\\\Serialize`}</inlineCode></a>{` class is less secure than the Json implementation but provides better performance on large arrays.`}</p>\n    <h3 {...{\n      \"id\": \"formdata\"\n    }}>{`FormData`}</h3>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Serialize/Serializer/FormData.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Framework\\\\Serialize\\\\Serializer\\\\FormData`}</inlineCode></a>{` class unserializes the form data using the `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.json.org/\"\n      }}>{`JSON`}</a>{` format. This class does not serialize objects to a form data format.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Adobe discourages using the Serialize implementation directly because it can lead to security vulnerabilities. Always use the `}<inlineCode parentName=\"p\">{`SerializerInterface`}</inlineCode>{` for serializing and unserializing.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Declare `}<inlineCode parentName=\"p\">{`SerializerInterface`}</inlineCode>{` as a `}<a parentName=\"p\" {...{\n        \"href\": \"../components/dependency-injection.md\"\n      }}>{`constructor dependency`}</a>{` to get an instance of a serializer class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use Magento\\\\Framework\\\\Serialize\\\\SerializerInterface;\n\n...\n\n/**\n * @var SerializerInterface\n */\nprivate $serializer;\n\n...\n\npublic function __construct(SerializerInterface $serializer) {\n  $this->serializer = $serializer;\n}\n`}</code></pre>\n    <p>{`\\\\`}{`\nThe following example shows how to use a serializer's `}<inlineCode parentName=\"p\">{`serialize()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`unserialize()`}</inlineCode>{` functions to store and retrieve array data from a cache:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\n...\n\n/**\n * @var string\n */\nprivate $cacheId = 'mySerializedData';\n\n...\n\n/**\n * Save data to cache\n * @param array $data\n *\n * @return bool\n */\npublic function saveDataToCache($data)\n{\n  return $this->getCache()->save($this->serializer->serialize($data), $this->cacheId);\n}\n\n...\n\n/**\n * Load data from cache\n *\n * @return array\n */\npublic function loadDataFromCache()\n{\n  $data = $this->getCache()->load($this->cacheId);\n  if (false !== $data) {\n    $data = $this->serializer->unserialize($data);\n  }\n  return $data;\n}\n...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"backward-compatibility-note\"\n    }}>{`Backward Compatibility Note`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SerializerInterface`}</inlineCode>{` interface and its implementations only exist since Adobe Commerce and Magento Open Source version 2.2.\nBecause of this, it is not possible to use these classes in code that has to be compatible with Adobe Commerce and Magento Open Source 2.1 or 2.0.`}</p>\n    <p>{`In code that is compatible with earlier versions of Adobe Commerce and Magento Open Source, constructor dependency injection can not be used to get an instance of `}<inlineCode parentName=\"p\">{`SerializerInterface`}</inlineCode>{`.\nInstead, a runtime check if the `}<inlineCode parentName=\"p\">{`SerializerInterface`}</inlineCode>{` definition exists can made, and if it does, it can be instantiated by directly accessing the object manager using a static method. Alternatively, a check against the Adobe Commerce and Magento Open Source version or the `}<inlineCode parentName=\"p\">{`magento/framework`}</inlineCode>{` Composer package version works too.\nIf the interface does not exist or an earlier version of Adobe Commerce and Magento Open Source is being executed, the appropriate native PHP serialization function has to be called, e.g. `}<inlineCode parentName=\"p\">{`\\\\serialize()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`\\\\json_encode()`}</inlineCode>{`, depending on the usercase.`}</p>\n    <p>{`Here is an example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use Magento\\\\Framework\\\\Serialize\\\\SerializerInterface;\nuse Magento\\\\Framework\\\\App\\\\ObjectManager;\n\n...\n/**\n * @param mixed $data\n * @return string\n */\nprivate function serialize($data)\n{\n    if (class_exists(SerializerInterface::class)) {\n        $objectManager = ObjectManager::getInstance();\n        $serializer = $objectManager->create(SerializerInterface::class);\n        return $serializer->serialize($data);\n    }\n    return \\\\serialize($data);\n}\n...\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}