{"version":3,"file":"component---src-pages-development-cli-commands-naming-guidelines-md-cafa563f9caaf36b1c35.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/development/cli-commands/naming-guidelines.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"command-naming-guidelines\"\n    }}>{`Command naming guidelines`}</h1>\n    <p>{`As an extension developer, you can now create and distribute your own commands for Adobe Commerce and Magento Open Source applications. But as for any implementation, it's also important to follow some general conventions to keep your commands consistent with commands from other developers. Being consistent in this way reduces the user's learning curve.`}</p>\n    <p>{`This topic discusses our recommended naming conventions.`}</p>\n    <h2 {...{\n      \"id\": \"name\"\n    }}>{`Name`}</h2>\n    <p>{`A command `}<em parentName=\"p\">{`name`}</em>{` is a part of the command, which defines behavior of the command on the very high level. In the command it goes right after the command's name.\nFor example, in `}<inlineCode parentName=\"p\">{`bin/magento setup:upgrade`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`bin/magento`}</inlineCode>{` is the command's name and `}<inlineCode parentName=\"p\">{`setup:upgrade`}</inlineCode>{` is the name of the command.`}</p>\n    <p>{`If you have an application installation handy, enter the following to display the current list of commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento list\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"format\"\n    }}>{`Format`}</h3>\n    <p>{`The format for command names is `}<inlineCode parentName=\"p\">{`group:[subject:]action`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"group\"\n    }}>{`group`}</h4>\n    <p><inlineCode parentName=\"p\">{`group`}</inlineCode>{` represents a group of related commands. Commands in a group display in a list, which in turn makes it easier for the user to find the desired command. To find a group name for a command, imagine an subject area where it can be used. The subject area can be any of the following:`}</p>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`Domain`}</em>{` area (for example, `}<inlineCode parentName=\"li\">{`module`}</inlineCode>{` for actions with modules, `}<inlineCode parentName=\"li\">{`info`}</inlineCode>{` for commands that provide some information)`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`Workflow`}</em>{` area (for example, `}<inlineCode parentName=\"li\">{`admin`}</inlineCode>{` for commands that can be used by an administrator, `}<inlineCode parentName=\"li\">{`dev`}</inlineCode>{` for a developer)`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"subject\"\n    }}>{`subject`}</h4>\n    <p><inlineCode parentName=\"p\">{`subject`}</inlineCode>{` is a subject for the action. The subject is optional, but it can be useful for defining sets of commands that work with the same object. If a subject is represented by a compound word, use a dash or hyphen character to separate the words.`}</p>\n    <h4 {...{\n      \"id\": \"action\"\n    }}>{`action`}</h4>\n    <p><inlineCode parentName=\"p\">{`action`}</inlineCode>{` is an action the command does.`}</p>\n    <h4 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`// general commands: just a group and an action\nbin/magento setup:install\nbin/magento module:status\n\n// set of commands with a subject\nbin/magento setup:config:set\nbin/magento setup:config:delete\nbin/magento setup:db-schema:upgrade\nbin/magento setup:db-data:upgrade\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n`db-schema` and `db-data` are examples of compound words.\n    <h2 {...{\n      \"id\": \"options-and-arguments\"\n    }}>{`Options and arguments`}</h2>\n    <p>{`Options and arguments follow the command name and modify the command's behavior.`}</p>\n    <p>{`For example, in `}<inlineCode parentName=\"p\">{`bin/magento module:disable --force Magento_Catalog`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`--force`}</inlineCode>{` `}<em parentName=\"p\">{`option`}</em>{` and the `}<inlineCode parentName=\"p\">{`Magento_Catalog`}</inlineCode>{` `}<em parentName=\"p\">{`argument`}</em>{` bypass the restrictions and specify a particular module to be disabled; in this case, regardless of dependencies on other modules.`}</p>\n    <p>{`Options and arguments create different user experiences. As a developer, you can choose which type of input is better for your particular case.`}</p>\n    <h3 {...{\n      \"id\": \"arguments\"\n    }}>{`Arguments`}</h3>\n    <p>{`Arguments are values passed by the user in a specified order. The argument name is not visible to the user.`}</p>\n    <h4 {...{\n      \"id\": \"format-1\"\n    }}>{`Format`}</h4>\n    <p>{`The format for command arguments is a single word or a compound word separated with a dash or hyphen character.`}</p>\n    <h4 {...{\n      \"id\": \"examples-1\"\n    }}>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{` bin/magento dev:theme:create frontend vendor themename\n`}</code></pre>\n    <p>{`where:`}</p>\n    <p><inlineCode parentName=\"p\">{`frontend`}</inlineCode>{` is a subject area argument`}</p>\n    <p><inlineCode parentName=\"p\">{`vendor`}</inlineCode>{` is a vendor argument`}</p>\n    <p><inlineCode parentName=\"p\">{`themename`}</inlineCode>{` is a theme name argument`}</p>\n    <p>{`Use arguments when you need required data from the user. We recommend as few arguments as possible (no more then three) so the user will not confuse their order.`}</p>\n    <p>{`To make it simpler for the user, we recommend the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Run the CLI multiple times for providing multiple similar values instead of running it once with 20 values`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use default values for required arguments where possible.`}</p>\n        <p parentName=\"li\">{`You can then use options instead of arguments to minimize the amount of required data the user must enter.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Replace arguments with options: options are named, so the user can provide them in any order. This requires additional data validation (by default, all options are optional).`}</p>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"options\"\n    }}>{`Options`}</h3>\n    <p>{`Options are name-value pairs. The sequence of entered values doesn't matter.`}</p>\n    <p>{`An option can have a value or no value. An option that does not require a value represents a flag (`}<inlineCode parentName=\"p\">{`yes`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`no`}</inlineCode>{`).`}</p>\n    <p>{`An option can also have a one-letter shortcut as an alternative to its full name. Enable shortcuts for often-used options or if it's easy to determine what the shortcut means. Usually it makes sense to enable shortcuts for options similar to the ones used in widely-used commands (for example, `}<inlineCode parentName=\"p\">{`-f`}</inlineCode>{` for `}<inlineCode parentName=\"p\">{`--force`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`-v`}</inlineCode>{` for `}<inlineCode parentName=\"p\">{`--verbose`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`-h`}</inlineCode>{` for `}<inlineCode parentName=\"p\">{`--help`}</inlineCode>{`).`}</p>\n    <h4 {...{\n      \"id\": \"format-2\"\n    }}>{`Format`}</h4>\n    <p>{`The format for command options is a single word or a compound word separated with a dash or hyphen character.`}</p>\n    <h4 {...{\n      \"id\": \"examples-2\"\n    }}>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento dev:theme:create --parent=Magento/luma frontend arg1 arg2\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento dev:theme:create -p=Magento/luma frontend vendor themename\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento dev:theme:create --extend-from=Magento/luma frontend vendor themename\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento module:disable -f Magento_Cms\n`}</code></pre>\n    <p>{`Where:`}</p>\n    <p><inlineCode parentName=\"p\">{`--parent`}</inlineCode>{` is an option that specifies a parent theme`}</p>\n    <p><inlineCode parentName=\"p\">{`-p`}</inlineCode>{` is a shortcut for `}<inlineCode parentName=\"p\">{`--parent`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`-f`}</inlineCode>{` is a shortcut for a non-value option `}<inlineCode parentName=\"p\">{`--force`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`arg1`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`arg2`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`frontend`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`vendor`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`themename`}</inlineCode>{` are arguments (see `}<a parentName=\"p\" {...{\n        \"href\": \"#options-and-arguments\"\n      }}>{`Command options and arguments`}</a>{`).`}</p>\n    <p>{`Use options for:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Optional data`}</li>\n      <li parentName=\"ul\">{`Required data that has a default value`}</li>\n    </ul>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`// correct\nbin/magento dev:theme:create --extend-from=Magento/luma frontend Foo bar\nbin/magento module:disable --force Magento_Catalog\nbin/magento module:disable -f Magento_Catalog\n\n//incorrect\nbin/magento module:disable --force=1 Magento_Catalog\nbin/magento module:disable -f=yes Magento_Catalog\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"recommendations\"\n    }}>{`Recommendations`}</h2>\n    <p>{`To avoid naming your command the same as another command, we recommend:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Looking at other extensions in the Commerce Marketplace before you choose a name for your commands. By planning ahead, you can avoid naming collisions entirely.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Restricting command names to start with a unique name, such as a vendor name. The usability of the command depends on what you choose for a vendor name.`}</p>\n        <p parentName=\"li\">{`For example, `}<inlineCode parentName=\"p\">{`myname:dev:theme:create`}</inlineCode>{` is not obvious and is hard to remember.`}</p>\n        <p parentName=\"li\">{`The vendor name doesn't have to start the command name; it could be in the middle. This way, related commands are grouped together.`}</p>\n        <p parentName=\"li\">{`Examples:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-terminal\"\n          }}>{`dev:myname:theme:create\ndev:myname:theme:delete\n`}</code></pre>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}