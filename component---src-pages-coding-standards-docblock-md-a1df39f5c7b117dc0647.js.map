{"version":3,"file":"component---src-pages-coding-standards-docblock-md-a1df39f5c7b117dc0647.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/coding-standards/docblock.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"docblock-standard\"\n    }}>{`DocBlock standard`}</h1>\n    <p>{`This standard defines the requirements and conventions for adding inline code documentation, known as `}<em parentName=\"p\">{`DocBlock`}</em>{`s.`}</p>\n    <p>{`Some parts of the code might not comply with this standard, but we are working to improve this.`}</p>\n    <p>{`Following these standards is optional for third-party developers, but doing so helps to create consistent, clean, and easy to read inline documentation.`}</p>\n    <p>{`Use `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.ietf.org/rfc/rfc2119.txt\"\n      }}>{`RFC 2119`}</a>{` to interpret the \"MUST,\" \"MUST NOT,\" \"REQUIRED,\" \"SHALL,\" \"SHALL NOT,\" \"SHOULD,\" \"SHOULD NOT,\" \"RECOMMENDED,\" \"MAY,\" and \"OPTIONAL keywords.\"`}</p>\n    <h2 {...{\n      \"id\": \"scope-of-the-standard\"\n    }}>{`Scope of the standard`}</h2>\n    <p>{`The goal of this standard is to unify usage of code DocBlocks for all files, not specific to a particular language.`}</p>\n    <p>{`The following is assumed by default:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Formatting according to the `}<a parentName=\"li\" {...{\n          \"href\": \"https://docs.phpdoc.org/latest/guide/references/phpdoc/basic-syntax.html#basic-syntax\"\n        }}>{`phpDocumentor`}</a>{` standard`}</li>\n      <li parentName=\"ul\">{`Requirements apply for all files regardless of programming language, but a DocBlock standard for the particular language may override it.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"general-principles\"\n    }}>{`General principles`}</h2>\n    <p>{`The documentation should follow two simple principles:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Be as short as possible.`}</li>\n      <li parentName=\"ol\">{`Include all necessary information without duplication.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"short-documentation\"\n    }}>{`Short documentation`}</h3>\n    <p>{`The documentation should be as short as possible, while including all necessary details.`}</p>\n    <p>{`Below are ways of improving code to help simplify documentation:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Make code self-explanatory.`}</li>\n      <li parentName=\"ul\">{`Put all possible information in the names of classes, methods, and variables. (e.g. use `}<inlineCode parentName=\"li\">{`$timeInSec`}</inlineCode>{` instead of `}<inlineCode parentName=\"li\">{`$time`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`Break down a method into smaller methods with descriptive names.\nFor example:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`    public function getPrice()\n    {\n        $price = 0;\n        $price += $this->getBasePrice();\n        $price -= $this->getDiscount();\n        return $price;\n    }\n\n    private function getBasePrice()\n    {\n        // calculate base price\n    }\n\n    private function getDiscount()\n    {\n        if (it is discount time) {\n            return 10;\n        }\n\n        return 0;\n    }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"include-all-necessary-details\"\n    }}>{`Include all necessary details`}</h3>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Identify the details a developer needs to work with your code.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Ignore the implementation details (i.e. private methods/properties and method bodies) and focus on what the public interface signature provides.\nIf possible, improve the interface to provide more information.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add any remaining information that a developer may need to the DocBlock.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"files\"\n    }}>{`Files`}</h2>\n    <p>{`Each source code file must have a DocBlock header with a short description of the file.\nAfter the short description, there can be a long description.`}</p>\n    <p>{`Both short and long descriptions (for file headers and herein) must be separated from other elements using one empty line (implied empty line in terms of DocBlock syntax, where any line within DocBlock starts from `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{`.`}</p>\n    <p>{`If the description or short description happens to be the first one after the DocBlock opening tag (`}<inlineCode parentName=\"p\">{`/**`}</inlineCode>{`) or last one before the closing tag (`}<inlineCode parentName=\"p\">{`*/`}</inlineCode>{`), it should not be separated with an empty line.`}</p>\n    <p><strong parentName=\"p\">{`DocBlock Header in a PHP-file:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * Short description...\n *\n * Long description\n * Broken down into several lines\n *\n * License notice...\n */\n`}</code></pre>\n    <p><strong parentName=\"p\">{`DocBlock Header in an XML-file:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<!--\n/**\n * Short description...\n *\n * Long description\n * Broken down into several lines\n *\n * License notice...\n */\n-->\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"license-notice-and-copyright\"\n    }}>{`License Notice and Copyright`}</h3>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`This section is applicable to core files only. Please follow it if you are a contributing developer.`}</p>\n    <p>{`Any file in the source should have a header with license and copyright notice.\nExceptions are files with formats that do not support commenting.`}</p>\n    <p>{`License notice and copyright MUST be declared at the very beginning of the file.\nIf the file contains a structural element (for example, a class), the description for the element should be declared as a separate DocBlock.`}</p>\n    <p>{`Use the following templates for the license notice and copyright blocks:`}</p>\n    <p><strong parentName=\"p\">{`Template for PHP files:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\\\Framework\\\\Api;\n\n/**\n * Provides metadata about an attribute.\n *\n * @api\n */\ninterface MetadataObjectInterface\n{\n   ...\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Template for `}<a parentName=\"strong\" {...{\n          \"href\": \"https://glossary.magento.com/xml\"\n        }}>{`XML`}</a>{` Files:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<?xml version=\"1.0\"?>\n<!--\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n-->\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Template for JS Files:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"code-structural-elements\"\n    }}>{`Code structural elements`}</h2>\n    <p>{`A structural element is defined in `}<a parentName=\"p\" {...{\n        \"href\": \"http://phpdoc.org/\"\n      }}>{`phpDocumentor`}</a>{` as part of the imperative source code, such as PHP or JavaScript, or procedural SQL.\nFor example:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`namespace`}</li>\n      <li parentName=\"ul\">{`class`}</li>\n      <li parentName=\"ul\">{`interface`}</li>\n      <li parentName=\"ul\">{`function`}</li>\n      <li parentName=\"ul\">{`property`}</li>\n      <li parentName=\"ul\">{`method`}</li>\n    </ul>\n    <p>{`If the source code file has one and only one standalone structural element, as may be required by language-specific coding standard, the file DocBlock is to be reused for this element.`}</p>\n    <p>{`Therefore, classes that are declared in dedicated files must have either no DocBlock or exactly one DocBlock, which refers to the class and file at the same time.`}</p>\n    <p><strong parentName=\"p\">{`DocBlock for a Class:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * Autoloader with class map capability\n *\n * ...\n */\nclass Autoload\n{\n`}</code></pre>\n    <p>{`While declaring classes or functions, if there must be another file with source code included, the inclusion construct must not be before file header and it must not separate the element DocBlock from the element.\nThere are two solutions possible:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Have the file header DocBlock separately, then inclusion construct, then a DocBlock for the element with duplicated short description.`}</li>\n      <li parentName=\"ul\">{`Include it after declaring the element (it is possible in PHP and will not cause issues before execution).`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`DocBlock with Included Script File:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * Magento integration Magento test framework (MTF) bootstrap\n *\n * ...\n */\n\nrequire __DIR__ . '/../bootstrap.php';\n\nnamespace Magento\\\\Test;\n\n/**\n * Magento integration Magento test framework (MTF) bootstrap\n */\nclass Bootstrap\n{\n`}</code></pre>\n    <p><strong parentName=\"p\">{`DocBlock with Included Class File:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\\\Framework\\\\Profiler\\\\Adapter;\n\nuse Magento\\\\Framework\\\\Profiler\\\\AdapterAbstract;\n\n/**\n * Profiler CSV adapter\n *\n * ...\n */\nclass Csv extends AdapterAbstract\n{\n// ...\n    public function setFile($file)\n    {\n        if (!isValidFile($file)) {\n            throw new \\\\ArgumentException('A valid file name is expected.');\n        }\n        // ...\n    }\n}\n\nrequire_once __DIR__ . '/../../functions.php';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"classes-and-interfaces\"\n    }}>{`Classes and interfaces`}</h3>\n    <p>{`Classes and interfaces should have a short description with a human-readable description of the class.\nIf the short description adds no additional information beyond what the type name already supplies, the\nshort description must be omitted.`}</p>\n    <p><strong parentName=\"p\">{`Good:`}</strong></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Handler for PHP errors/warnings/notices that converts them to exceptions.\nclass ErrorHandler { ... }`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Bad:`}</strong></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Error Handler\nclass ErrorHandler { ... }`}</p>\n    </blockquote>\n    <p>{`If possible, add use cases which suggests where developers can or cannot use the class.`}</p>\n    <h3 {...{\n      \"id\": \"short-name-form\"\n    }}>{`Short name form`}</h3>\n    <p>{`It is encouraged to use the short form of the name to encourage readability and consistency with the type hint.\nThe only `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/exception\"\n      }}>{`exception`}</a>{` is in the `}<inlineCode parentName=\"p\">{`Service/DTO`}</inlineCode>{` classes due to tooling requirements.`}</p>\n    <p><strong parentName=\"p\">{`Example of a Method DocBlock:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use Magento\\\\Logger;\nuse Magento\\\\Math\\\\Random;\nuse Magento\\\\Stdlib\\\\DateTime as StdlibDateTime;\n\n/**\n * @var Logger\n */\nprivate $logger;\n\n/**\n * Description of method here.\n *\n * @param Random         $mathRandom\n * @param StdlibDateTime $dateTime\n * @param int            $number\n */\nprivate function doSomething(Random $mathRandom, StdlibDateTime $dateTime, $number)\n{\n\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"class-attributes\"\n    }}>{`Class attributes`}</h3>\n    <p>{`Class attributes must have a type declaration using `}<inlineCode parentName=\"p\">{`@var`}</inlineCode>{` tag.`}</p>\n    <p><strong parentName=\"p\">{`Example of Class Attribute:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento;\n\nclass Profiler\n{\n    /**\n     * @var Profiler\n     */\n    protected static $instance = null;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"functions-and-methods\"\n    }}>{`Functions and methods`}</h3>\n    <p>{`In general, a typed method signature must be preferred over PHPDoc annotations whenever possible.`}</p>\n    <p>{`Functions and methods should have:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A short description that adds meaningful information beyond the method name.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If the purpose of the method is not obvious, a long description that explains the motivation behind the implementation.\nThe comment must describe why method is implemented and not how.\nFor example:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`If a workaround or hack is implemented, explain why it is necessary and include any other details necessary to understand the algorithm.`}</li>\n          <li parentName=\"ul\">{`For non-obvious implementations where the implementation logic is complicated or does not correspond to the Technical Vision or other known best practices,     include an explanation in the doc block's description.\nAn implementation is non-obvious if another developer has questions about it.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The declaration of all arguments (if any) using the `}<inlineCode parentName=\"p\">{`@param`}</inlineCode>{` tag, unless the argument type is indicated in the method signature.`}</p>\n        <p parentName=\"li\">{`All `}<inlineCode parentName=\"p\">{`@param`}</inlineCode>{` annotations must include the appropriate argument type. If any argument requires a `}<inlineCode parentName=\"p\">{`@param`}</inlineCode>{` annotation, all arguments must be listed (all or none). `}<inlineCode parentName=\"p\">{`@param`}</inlineCode>{` annotations must be in the same order as the method arguments.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The declaration of the return type using the `}<inlineCode parentName=\"p\">{`@return`}</inlineCode>{` tag must only be added if the method return type signature does not supply all necessary information (see below for more information on return types).`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A declaration of possible exceptions using the `}<inlineCode parentName=\"p\">{`@throws`}</inlineCode>{` tag, if the actual body of function triggers an exception.\nAll occurrences of `}<inlineCode parentName=\"p\">{`@throws`}</inlineCode>{` in a DocBlock must be after `}<inlineCode parentName=\"p\">{`@param`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`@return`}</inlineCode>{` annotations.`}</p>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`Exceptions to these rules:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Testing methods in Unit tests may have doc blocks to describe the purpose of the test, such as referencing Github issues.`}</li>\n      <li parentName=\"ul\">{`Test method annotations may include data providers and other testing annotations.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"things-to-include\"\n    }}>{`Things to include`}</h4>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`An explanation of input arguments and return values if it is not obvious from their name and type.`}</p>\n        <p parentName=\"li\">{`This is applicable in the following cases:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`There is more than one possible input/output type.`}</p>\n            <p parentName=\"li\">{`For example: `}<inlineCode parentName=\"p\">{`@return Config|null`}</inlineCode>{`.\nThe DocBlock should explain what situations will return `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`.`}</p>\n            <p parentName=\"li\">{`Another example: `}<inlineCode parentName=\"p\">{`@param FileInterface|null`}</inlineCode>{`.\nThe DocBlock should explain what happens when the value of the parameter is `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`.`}</p>\n            <p parentName=\"li\">{`Ideally, implementations such as these should be avoided:`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The input/output type is a simple type and the format is not clear from the name.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The input/output is an array with a specific structure.`}</p>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The intent of the method along with when or where it can be used.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If an exception is thrown by a method, explain the cause or situation.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If the input is confusing or complicated, add examples of the method's usage in client code or examples of the argument.`}</p>\n      </li>\n    </ul>\n    <h4 {...{\n      \"id\": \"things-to-avoid\"\n    }}>{`Things to avoid`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Copying the algorithm. The algorithm must be self-explanatory and understood by reviewing the code and unit tests.`}</li>\n      <li parentName=\"ul\">{`Information that is out of date or has the potential to become out of date.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example of a Method DocBlock:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * Merge the config XML files\n *\n * @param  array $configFiles\n * @return void\n * @throws \\\\Magento\\\\Exception if a non-existing or invalid XML file passed\n */\nprotected function merge($configFiles)\n{\n    $domConfig = new \\\\Magento\\\\Config\\\\Dom($this->_getInitialXml(), $this->_getIdAttributes());\n    foreach ($configFiles as $file) {\n        if (!file_exists($file)) {\n            throw new \\\\Magento\\\\Exception(\"File does not exist: {$file}\");\n        }\n        $domConfig->merge(file_get_contents($file));\n        if (!$domConfig->validate($this->getSchemaFile(), $errors)) {\n            $message = \"Invalid XML file: {$file}\\\\n\";\n            /** @var libXMLError $error */\n            foreach ($errors as $error) {\n                $message .= \"{$error->message} Line: {$error->line}\\\\n\";\n            }\n            throw new \\\\Magento\\\\Exception($message);\n        }\n    }\n    $this->_dom = $domConfig->getDom();\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"divergence-in-throws-tag\"\n    }}>{`Divergence in @throws tag`}</h4>\n    <p>{`In general, use the `}<inlineCode parentName=\"p\">{`@throws`}</inlineCode>{` tag when the code uses `}<em parentName=\"p\">{`throw`}</em>{`:`}</p>\n    <p><strong parentName=\"p\">{`Example of Throwing Exception Explicitly:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * Set an arbitrary value to specified element\n *\n * @param  string $elementId\n * @param  string $attribute\n * @param  int|string|float|bool|object|null  $value\n * @return self\n * @throws \\\\InvalidArgumentException\n */\npublic function setAttribute($elementId, $attribute, $value)\n{\n    $this->_assertElementExists($elementId);\n    switch ($attribute) {\n        case self::PARENT: // break is intentionally omitted\n        case self::CHILDREN:\n        case self::GROUPS:\n            throw new \\\\InvalidArgumentException(\"Attribute '{$attribute}' is reserved and cannot be set.\");\n            break;\n        default:\n            $this->_elements[$elementId][$attribute] = $value;\n            break;\n    }\n    return $this;\n}\n`}</code></pre>\n    <p>{`In this case, if an exception is thrown in a sub-routine, then `}<inlineCode parentName=\"p\">{`@throws`}</inlineCode>{` must not be used in the parent method.`}</p>\n    <p>{`However, if the only purpose of the referred sub-routine is to throw a specific exception – then `}<inlineCode parentName=\"p\">{`@throws`}</inlineCode>{` must be used in the parent method.\nFor example:`}</p>\n    <p><strong parentName=\"p\">{`Throwing Exception Implicitly:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`    /**\n     * Perform login process\n     *\n     * @param string $username\n     * @param string $password\n     * @return void\n     * @throws \\\\Magento\\\\Framework\\\\Exception\\\\AuthenticationException\n     */\n    public function login($username, $password)\n    {\n        if (empty($username) || empty($password)) {\n            self::throwException(\n                __(\n                    'The account sign-in was incorrect or your account is disabled temporarily. '\n                    . 'Please wait and try again later.'\n                )\n            );\n        }\n\n        try {\n            $this->_initCredentialStorage();\n            $this->getCredentialStorage()->login($username, $password);\n            if ($this->getCredentialStorage()->getId()) {\n                $this->getAuthStorage()->setUser($this->getCredentialStorage());\n                $this->getAuthStorage()->processLogin();\n\n                $this->_eventManager->dispatch(\n                    'backend_auth_user_login_success',\n                    ['user' => $this->getCredentialStorage()]\n                );\n            }\n\n            if (!$this->getAuthStorage()->getUser()) {\n                self::throwException(\n                    __(\n                        'The account sign-in was incorrect or your account is disabled temporarily. '\n                        . 'Please wait and try again later.'\n                    )\n                );\n            }\n        } catch (PluginAuthenticationException $e) {\n            $this->_eventManager->dispatch(\n                'backend_auth_user_login_failed',\n                ['user_name' => $username, 'exception' => $e]\n            );\n            throw $e;\n        } catch (\\\\Magento\\\\Framework\\\\Exception\\\\LocalizedException $e) {\n            $this->_eventManager->dispatch(\n                'backend_auth_user_login_failed',\n                ['user_name' => $username, 'exception' => $e]\n            );\n            self::throwException(\n                __(\n                    $e->getMessage()? : 'The account sign-in was incorrect or your account is disabled temporarily. '\n                        . 'Please wait and try again later.'\n                )\n            );\n        }\n    }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"return-tag\"\n    }}>{`@return tag`}</h4>\n    <p>{`In general, method return type signatures should be prefered over `}<inlineCode parentName=\"p\">{`@return`}</inlineCode>{` type annotations.\nIf that is not possible due to ambiguous return types or backward compatibility constraints, the `}<inlineCode parentName=\"p\">{`@return`}</inlineCode>{` type annotation must be used.\nIf there is no explicit return statement in a method or function or a return statement without a value, a `}<inlineCode parentName=\"p\">{`void`}</inlineCode>{` return type must be declared in the method signature. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`function setName(string $name): void\n{\n   $this->name = $name;\n}\n`}</code></pre>\n    <p>{`If the method returns itself, the method signature return type must be `}<inlineCode parentName=\"p\">{`self`}</inlineCode>{`. Here is an example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`function withField(string $fieldName): self\n{\n   $this->fields[] = $fieldName;\n   return $this;\n}\n`}</code></pre>\n    <p>{`If for backward compatibility reasons, no return type can be added to the method signature, a `}<inlineCode parentName=\"p\">{`@return $this`}</inlineCode>{` annotation must be used.`}</p>\n    <h3 {...{\n      \"id\": \"constants\"\n    }}>{`Constants`}</h3>\n    <p>{`Constants may have a short description.\nIf the short description adds no additional information beyond what the constant name already supplies, the\nshort description must be omitted.`}</p>\n    <p>{`For example, a global constant:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * Directory separator shorthand, intended to make code more readable.\n */\ndefine('DS', DIRECTORY_SEPARATOR);\n`}</code></pre>\n    <p>{`Or constants in a class:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class Profiler\n{\n    /**\n     * Separator literal to assemble timer identifier from timer names\n     */\n    const NESTING_SEPARATOR = '->';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"docblock-templates\"\n    }}>{`DocBlock templates`}</h3>\n    <p>{`A DocBlock template is a DocBlock that starts from `}<inlineCode parentName=\"p\">{`/**#@+*/`}</inlineCode>{` and ends with `}<inlineCode parentName=\"p\">{`/**#@-*/`}</inlineCode>{`.\nTemplates are no longer supported by PHPDocumentor. Therefore, they MUST NOT be used.`}</p>\n    <p>{`It is encouraged to replace existing DocBlock templates with regular DocBlock comments when the file is being modified.`}</p>\n    <h2 {...{\n      \"id\": \"structure-of-documentation-space\"\n    }}>{`Structure of documentation space`}</h2>\n    <p><inlineCode parentName=\"p\">{`@author`}</inlineCode>{` ,`}<inlineCode parentName=\"p\">{`@category`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`@package`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`@subpackage`}</inlineCode>{` MUST NOT be used.\nDocumentation is organized with the use of namespaces.`}</p>\n    <h2 {...{\n      \"id\": \"other-docblock-tags\"\n    }}>{`Other DocBlock tags`}</h2>\n    <h3 {...{\n      \"id\": \"inheritdoc-tag\"\n    }}>{`@inheritdoc tag`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`@inheritdoc`}</inlineCode>{` tag SHOULD NOT be used.\nIf a child class method requires a long description to explain its purpose, it may use `}<inlineCode parentName=\"p\">{`@inheritdoc`}</inlineCode>{` to indicate the new description is intended as an addition to the parent method description.\nIn general, such method overrides are a `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Code_smell\"\n      }}>{`code smell`}</a>{` and should be used as an incentive to make the code more self-documenting if possible.`}</p>\n    <p><strong parentName=\"p\">{`DocBlock for the Interface:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * Interface for mutable value object for integer values\n */\ninterface MutableInterface\n{\n    /**\n     * Returns 0, if no value is available\n     */\n    public function getVal(): int;\n\n    /**\n     * Sets 0 in case a non-integer value is passed\n     *\n     * @param int|string|bool|float|null $value\n     */\n    public function setVal($value): void;\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`DocBlock for the implementation:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * Limited mutable value object for integer values\n */\nclass LimitedMutableClass implements MutableInterface\n{\n    /**\n     * Returns integer value\n     */\n    public function getVal(): int\n    {\n        ...\n    }\n\n    /**\n     * Sets 0 in case a non-integer value is passed\n     *\n     * @param int|string|bool|float|null $value\n     */\n    public function setVal($value): void\n    {\n        ...\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"api-tag\"\n    }}>{`@api tag`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`@api`}</inlineCode>{` tag indicates the code is part of the public API and is subject to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/contributor/guides/code-contributions/backward-compatibility-policy/\"\n      }}>{`Backward Compatibility Policy`}</a>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`@api`}</inlineCode>{` tag can be applied to a constant, a method, or to the entire class/interface.\nIf the `}<inlineCode parentName=\"p\">{`@api`}</inlineCode>{` tag is applied at the file level, then all methods within the file are part of the public `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/api\"\n      }}>{`API`}</a>{`.\nYou do not need to annotate each method individually.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"http://semver.org/\"\n      }}>{`Semantic Versioning 2.0.0`}</a>{` for information about changing and updating code while maintaining backward compatibility.`}</p>\n    <h3 {...{\n      \"id\": \"deprecated-tag\"\n    }}>{`@deprecated tag`}</h3>\n    <p>{`A deprecated class or method is one that has been superseded and may cease to exist in the future.\nIt will be retained to provide backward compatibility until the next major component release.`}</p>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`@deprecated`}</inlineCode>{` tag to indicate that an element is to be deprecated.`}</p>\n    <p>{`You must explain why you added `}<inlineCode parentName=\"p\">{`@deprecated`}</inlineCode>{` tag.\nYou MUST use the `}<inlineCode parentName=\"p\">{`@see`}</inlineCode>{` tag with references to the new implementation when code is deprecated and there is a new alternative.`}</p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * Get some object\n *\n * @deprecated Added to not break backward compatibility of the constructor signature\n *             by injecting the new dependency directly.\n *             The method can be removed in a future major release, when constructor signature can be changed\n * @return SomeObjectInterface\n */\nprotected function getSomeObject()\n{\n    ...\n}\n\n/**\n * Set price\n *\n * @deprecated Non-scoped price is not supported anymore\n * @see setScopedPrice()\n * @return void\n */\npublic function setPrice($price)\n{\n    ...\n}\n\n/**\n * Set price for specified scope\n *\n * @return void\n */\npublic function setScopedPrice($price, $scopeType, $scopeId)\n{\n    ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"var-inline-tag\"\n    }}>{`@var inline tag`}</h3>\n    <p>{`For the purpose of automatic type hinting in an IDE, an inline notation of `}<inlineCode parentName=\"p\">{`@var`}</inlineCode>{` tag can be used wherever the IDE is unable to resolve variable type.\nThis tag declares variables that will emerge in following lines of code:`}</p>\n    <p><strong parentName=\"p\">{`Inline Type Hinting:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/** @var libXMLError $error */\nforeach ($errors as $error) {\n`}</code></pre>\n    <p>{`Some IDEs understand a different notation, where the type is specified after variable name.\nThis notation is also valid:`}</p>\n    <p><strong parentName=\"p\">{`Inline Type Hinting Variation:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/** @var $error libXMLError */\nforeach ($errors as $error) {\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"see-tag\"\n    }}>{`@see tag`}</h3>\n    <p>{`Besides the normal way of using `}<inlineCode parentName=\"p\">{`@see`}</inlineCode>{` tags as `}<a parentName=\"p\" {...{\n        \"href\": \"https://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_tags.see.pkg.html\"\n      }}>{`recommended by phpDocumentor`}</a>{`, it may be used as an addition to `}<inlineCode parentName=\"p\">{`@var`}</inlineCode>{`, when the `}<inlineCode parentName=\"p\">{`@var`}</inlineCode>{` is already used in this comment.`}</p>\n    <p>{`Specifically, this is possible when a PHP file is composed from multiple file includes. As a result, variables may contain objects of different types depending on context:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * @var $this ClassOne\n * @see ClassTwo\n * @see FooInterface\n */\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"method-tag\"\n    }}>{`@method tag`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`@method`}</inlineCode>{` allows a class to know which ‘magic’ methods are callable.`}</p>\n    <p>{`Syntax:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`@method [[static] return type] [name]([[type] [parameter]<, ...>]) [<description>]\n`}</code></pre>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://manual.phpdoc.org/HTMLSmartyConverter/PHP/phpDocumentor/tutorial_tags.method.pkg.html\"\n      }}>{`PHP documentation`}</a>{` for more information about the `}<inlineCode parentName=\"p\">{`@method`}</inlineCode>{` tag.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\\\Catalog\\\\Model\\\\Product;\n\nuse Magento\\\\Framework\\\\Model\\\\AbstractModel;\n\n/**\n * Image operations\n *\n * @method string getFile()\n * @method string getLabel()\n * @method string getPosition()\n */\nclass Image extends AbstractModel\n{\n    //.....\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"link-tag\"\n    }}>{`@link tag`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`@link`}</inlineCode>{` tag indicates a custom relation between the associated Structural Elements and a website, identified by an absolute URI.`}</p>\n    <p>{`Syntax:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`@link [URI] [<description>]\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"other-tags\"\n    }}>{`Other tags`}</h3>\n    <p>{`Any other valid DocBlock tags may be specified, if the author deems it necessary, but only if they bring valuable non-obvious information.`}</p>\n    <h2 {...{\n      \"id\": \"formatting-conventions\"\n    }}>{`Formatting conventions`}</h2>\n    <h3 {...{\n      \"id\": \"padding-tags\"\n    }}>{`Padding tags`}</h3>\n    <p>{`If there are two or more tags together in one DocBlock, their values may be padded, so that they could be visually aligned.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * ...\n *\n * @param  string $argument\n * @return bool\n * @link   http://example.com\n */\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"formatting-consistency\"\n    }}>{`Formatting consistency`}</h3>\n    <p>{`In a given DocBlock, the formatting style must be consistent.`}</p>\n    <p>{`For example, padding for visual alignment can be done in two ways:`}</p>\n    <p><strong parentName=\"p\">{`Correct – align everything:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * ...\n *\n * @param  string   $parentId\n * @param  string   $childId\n * @param  int|null $position\n * @return int\n * @see    _insertChild() for position explanation\n */\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Also correct – do not align anything:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * ...\n *\n * @param string $parentId\n * @param string $childId\n * @param int|null $position\n * @return int\n * @see _insertChild() for position explanation\n */\npublic function reorderChild($parentId, $childId, $position)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Incorrect – align only partially:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * ...\n *\n * @param  string   $parentId\n * @param  string   $childId\n * @param  int|null $position\n * @return int\n * @see _insertChild() for position explanation\n */\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}