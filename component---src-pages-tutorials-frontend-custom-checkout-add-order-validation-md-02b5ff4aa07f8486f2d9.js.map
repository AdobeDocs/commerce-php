{"version":3,"file":"component---src-pages-tutorials-frontend-custom-checkout-add-order-validation-md-02b5ff4aa07f8486f2d9.js","mappings":"qRAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,iDACH,kDACL,kBAAK,0LAAwL,mBAAQC,WAAW,KAAM,eAAwB,+EAC9O,kBAAK,4FACL,oBACE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,gCACL,wBAA4B,MACnC,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,gDACL,wCAA4C,MACnD,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,yDACL,iDAAqD,OAE9D,eACE,GAAM,+BACH,iCACL,kBAAK,kPAAgP,cAAGA,WAAW,IAC/P,KAAQ,sDACL,UAAc,YAAU,uBAAYA,WAAW,KAAM,oBAAiC,wBAAsB,uBAAYA,WAAW,KAAM,MAAmB,0CAAwC,uBAAYA,WAAW,KAAM,eAA4B,mEACpQ,kBAAK,8CAA4C,uBAAYA,WAAW,KAAM,OAAoB,iEAA+D,uBAAYA,WAAW,KAAM,gDAA6D,gBAC3P,kBAAK,2CAAyC,uBAAYA,WAAW,KAAM,OAAoB,6CAA2C,uBAAYA,WAAW,KAAM,cAA2B,aAClM,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eACV,yeAkBP,eACE,GAAM,+CACH,iDACL,kBAAK,mGAAiG,uBAAYA,WAAW,KAAM,+CAA4D,4BAA0B,uBAAYA,WAAW,KAAM,wBAAqC,sCAC3R,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eACV,oXAaP,eACE,GAAM,wDACH,0DACL,kBAAK,kDAAgD,uBAAYA,WAAW,KAAM,mEAAgF,WAClK,kBAAK,qCACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,qoEAsCP,eACE,GAAM,gDACH,kDACL,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,2FACL,oBACE,eAAIC,WAAW,OACb,cAAGA,WAAW,MAAO,2BACrB,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,gDAGT,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,iBACrB,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBACV,gCAMd,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/tutorials/frontend/custom-checkout/add-order-validation.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-custom-validations-before-order-placement\"\n    }}>{`Add custom validations before order placement`}</h1>\n    <p>{`This topic describes how to add custom validations to be performed before the order is placed during checkout. Namely, the validations which are performed after a shopper clicks the `}<strong parentName=\"p\">{`Place Order`}</strong>{` button. Writing the validation logic itself is not covered in this topic.`}</p>\n    <p>{`To add custom validations before the order placement action, you must do the following:`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-1-create-the-validator\"\n        }}>{`Create the validator`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-2-add-validator-to-the-validators-pool\"\n        }}>{`Add validator to the validators pool`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-3-declare-the-validation-in-the-checkout-layout\"\n        }}>{`Declare the validation in the checkout layout`}</a>{`.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"step-1-create-the-validator\"\n    }}>{`Step 1: Create the validator`}</h2>\n    <p>{`For the sake of compatibility, upgradability and easy maintenance, do not edit the default application code, add your customizations in a separate module. For your checkout customization to be applied correctly, your custom module should `}<a parentName=\"p\" {...{\n        \"href\": \"../../../development/build/composer-integration.md\"\n      }}>{`depend`}</a>{` on the `}<inlineCode parentName=\"p\">{`Magento_Checkout`}</inlineCode>{` module. Do not use `}<inlineCode parentName=\"p\">{`Ui`}</inlineCode>{` for your custom module name, because `}<inlineCode parentName=\"p\">{`%Vendor%_Ui`}</inlineCode>{` notation, required when specifying paths, might cause issues.`}</p>\n    <p>{`In your custom module directory, create a `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file implementing the validator. It should be located under `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/web/js/model`}</inlineCode>{` directory.`}</p>\n    <p>{`Following is a sample of the validator `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file. It must necessarily implement the `}<inlineCode parentName=\"p\">{`validate()`}</inlineCode>{` method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`define(\n    ['mage/translate', 'Magento_Ui/js/model/messageList'],\n    function ($t, messageList) {\n        'use strict';\n        return {\n            validate: function () {\n                const isValid = false; //Put your validation logic here\n\n                if (!isValid) {\n                    messageList.addErrorMessage({ message: $t('a possible failure message ...  ') });\n                }\n\n                return isValid;\n            }\n        }\n    }\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-2-add-validator-to-the-validators-pool\"\n    }}>{`Step 2: Add validator to the validators pool`}</h2>\n    <p>{`Your custom validator must be added to the pool of \"additional validators\". To do this, in the `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/web/js/view`}</inlineCode>{` directory create a new `}<inlineCode parentName=\"p\">{`<your-validation>.js`}</inlineCode>{` file with the following content:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`define(\n    [\n        'uiComponent',\n        'Magento_Checkout/js/model/payment/additional-validators',\n        '<your_module>/js/model/your-validator'\n    ],\n    function (Component, additionalValidators, yourValidator) {\n        'use strict';\n        additionalValidators.registerValidator(yourValidator);\n        return Component.extend({});\n    }\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-3-declare-the-validation-in-the-checkout-layout\"\n    }}>{`Step 3: Declare the validation in the checkout layout`}</h2>\n    <p>{`In your custom module directory, create a new `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/layout/checkout_index_index.xml`}</inlineCode>{` file.`}</p>\n    <p>{`In this file, add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <body>\n<referenceBlock name=\"checkout.root\">\n    <arguments>\n        <argument name=\"jsLayout\" xsi:type=\"array\">\n            <item name=\"components\" xsi:type=\"array\">\n                <item name=\"checkout\" xsi:type=\"array\">\n                    <item name=\"children\" xsi:type=\"array\">\n                        <item name=\"steps\" xsi:type=\"array\">\n                            <item name=\"children\" xsi:type=\"array\">\n                                <item name=\"billing-step\" xsi:type=\"array\">\n                                    <item name=\"children\" xsi:type=\"array\">\n                                        <item name=\"payment\" xsi:type=\"array\">\n                                            <item name=\"children\" xsi:type=\"array\">\n                                                <item name=\"additional-payment-validators\" xsi:type=\"array\">\n                                                    <item name=\"children\" xsi:type=\"array\">\n                                                        <!-- Declare your validation. START -->\n                                                        <item name=\"your-validator\" xsi:type=\"array\">\n                                                            <item name=\"component\" xsi:type=\"string\">%your_module_dir%/js/view/%your-validation%</item>\n                                                        </item>\n                                                        <!-- Declare your validation. END -->\n                                                    </item>\n                                                </item>\n                                            </item>\n                                        </item>\n                                    </item>\n                                </item>\n                            </item>\n                        </item>\n                    </item>\n                </item>\n            </item>\n        </argument>\n    </arguments>\n</referenceBlock>\n    </body>\n</page>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-4-deploy-static-content-and-clean-cache\"\n    }}>{`Step 4: Deploy static content and clean cache`}</h2>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`These commands are for production mode. They are not necessary when in developer mode.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Deploy static content:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento setup:static-content:deploy\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Clean cache:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento cache:clean\n`}</code></pre>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}