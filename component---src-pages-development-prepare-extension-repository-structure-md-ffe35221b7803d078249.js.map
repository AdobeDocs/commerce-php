{"version":3,"file":"component---src-pages-development-prepare-extension-repository-structure-md-ffe35221b7803d078249.js","mappings":"8QAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,kCADR,mCAGA,qHACA,oBACE,eAAIC,WAAW,MAAf,sBACA,eAAIA,WAAW,MAAf,QAA4B,eAAIA,WAAW,MAAf,kBAA5B,sDACA,eAAIA,WAAW,MAAf,uCACA,eAAIA,WAAW,MAAf,iCACA,eAAIA,WAAW,MAAf,oDAEF,eACE,GAAM,qBADR,sBAGA,yEAA0D,uBAAYA,WAAW,KAAvB,sBAA1D,kBACA,mBAAG,eAAIA,WAAW,KAAf,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,0EAML,mBAAG,eAAIA,WAAW,KAAf,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,6CAKL,eACE,GAAM,qCADR,sCAGA,4LAA6K,eAAIA,WAAW,KAAf,sBAA7K,MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,qGAQL,eACE,GAAM,sCADR,uCAGA,6LACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,6GAQL,kFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,0DAML,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,gEAML,eACE,GAAM,gCADR,iCAGA,0EAA2D,uBAAYA,WAAW,KAAvB,oBAA3D,wBAA+I,uBAAYA,WAAW,KAAvB,eAA/I,4FACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,oMAkBL,eACE,GAAM,eADR,gBAGA,uDAAwC,uBAAYA,WAAW,KAAvB,QAAxC,qDACA,yFAA0E,uBAAYA,WAAW,KAAvB,YAA1E,gBACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,2QAkBR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/prepare/extension-repository-structure.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"extension-repository-structure\"\n    }}>{`Extension repository structure`}</h1>\n    <p>{`For module, theme, and language pack component repositories, we recommend five best practices:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Flatter hierarchy`}</li>\n      <li parentName=\"ul\">{`One `}<em parentName=\"li\">{`extension type`}</em>{` (module, theme, or language pack) per repository`}</li>\n      <li parentName=\"ul\">{`Multiple components per repository`}</li>\n      <li parentName=\"ul\">{`One component per repository`}</li>\n      <li parentName=\"ul\">{`One functional test suite per module component`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"flatter-hierarchy\"\n    }}>{`Flatter hierarchy`}</h2>\n    <p>{`Your repository structure should no longer include `}<inlineCode parentName=\"p\">{`app/code/<Vendor>/`}</inlineCode>{` directories.`}</p>\n    <p><em parentName=\"p\">{`Before:`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root\\\\>\n└── app/code/<Vendor>/\n    └── <Module1>\n`}</code></pre>\n    <p><em parentName=\"p\">{`After:`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root>/\n└── <Module1>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"one-extension-type-per-repository\"\n    }}>{`One extension type per repository`}</h2>\n    <p>{`You cannot mix extension types (modules, themes, and language packs) in the same extension repository. Each component type must have its own repository. For example, `}<em parentName=\"p\">{`you cannot do this`}</em>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`// This is not supported\n<extension_repo_root>\n├── <Module1>\n├── <theme1>\n└── <language1>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"multiple-components-per-repository\"\n    }}>{`Multiple components per repository`}</h2>\n    <p>{`If your extension is complex and requires several components, you can keep those components in the same repository to make the extension easy to package and maintain:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root>\n├── <Module1>\n├── <Module2>\n├── <Module1SampleData>\n└── <Module2SampleData>\n`}</code></pre>\n    <p>{`You can do the same for theme and language pack extensions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root>/\n├── <theme1>\n└── <theme2>\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root>/\n├── <language1>\n└── <language2>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"one-component-per-repository\"\n    }}>{`One component per repository`}</h2>\n    <p>{`If your extension requires only one component, your `}<inlineCode parentName=\"p\">{`<component_root>`}</inlineCode>{` directory and your `}<inlineCode parentName=\"p\">{`<repo_root>`}</inlineCode>{` directory will be the same to reduce unnecessary hierarchy in the directory structure:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<MyModule_repo_root>\n├── Api\n├── Block\n├── Controller\n├── Console\n├── etc\n├── Helper\n├── i18n\n├── Model\n├── Plugin\n├── Test\n├── view\n├── composer.json\n├── LICENSE.txt\n└── ...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"test-suites\"\n    }}>{`Test Suites`}</h2>\n    <p>{`Function tests can be added to a `}<inlineCode parentName=\"p\">{`Test`}</inlineCode>{` directory within each module of your extension.`}</p>\n    <p>{`Note: Currently, only Unit and MFTF tests can be run from within a `}<inlineCode parentName=\"p\">{`<Module>`}</inlineCode>{` directory.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root>\n├── <Module1>\n│   ├── ...\n│   ├── Test\n│   │   ├── Unit\n│   │   ├── Integration\n│   │   └── Mftf\n│   │       ├── TestSuite\n│   │       └── composer.json\n│   └── ...\n├── <Module2>\n├── <Module1SampleData>\n└── <Module2SampleData>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}