{"version":3,"file":"component---src-pages-development-package-component-md-47874f72ec6dccdd30fe.js","mappings":"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","sources":["webpack://commerce-php/./src/pages/development/package/component.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/_includes/composer-types.md';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"package-a-component\"\n    }}>{`Package a component`}</h1>\n    <p>{`The Adobe Commerce and Magento Open Source applications use Composer packages to distribute, install, and upgrade components in an application instance.`}</p>\n    <p>{`To package a component, you must:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create a Composer file (`}<inlineCode parentName=\"li\">{`composer.json`}</inlineCode>{`).`}</li>\n      <li parentName=\"ul\">{`Register the component using `}<inlineCode parentName=\"li\">{`registration.php`}</inlineCode></li>\n      <li parentName=\"ul\">{`Package and publish your component.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"create-a-composer-file\"\n    }}>{`Create a Composer file`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` file defines the name, requirements, version, and other basic information about the component. This file must be placed in the root directory of the module.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://getcomposer.org/doc/04-schema.md\"\n      }}>{`Composer's generic schema`}</a>{`, with the following restrictions:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Element`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A fully-qualified component name, in the format `}<inlineCode parentName=\"td\">{`<vendor-name>/<component-name>`}</inlineCode>{`. All letters must be in lowercase. Use dashes in the `}<inlineCode parentName=\"td\">{`<component-name>`}</inlineCode>{` to separate words. Themes must use the format `}<inlineCode parentName=\"td\">{`<vendor-name>/theme-<area>-<theme-name>`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`For modules, this value must be set to `}<inlineCode parentName=\"td\">{`magento2-module`}</inlineCode>{`. Other possible types are `}<inlineCode parentName=\"td\">{`metapackage`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`magento2-theme`}</inlineCode>{`, and `}<inlineCode parentName=\"td\">{`magento2-language`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`autoload`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Specify necessary information to be loaded, such as `}<a parentName=\"td\" {...{\n              \"href\": \"../build/component-registration.md\"\n            }}>{`registration.php`}</a>{`. For more information, see `}<a parentName=\"td\" {...{\n              \"href\": \"https://getcomposer.org/doc/01-basic-usage.md#autoloading\"\n            }}>{`Autoloading`}</a>{` from Composer.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The Commerce Marketplace does not support the Composer `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`dist`}</inlineCode>{` properties. All extensions distributed via the Marketplace are installed from the Commerce package repository. If your `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` contains `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`dist`}</inlineCode>{` properties, it will cause failures in the EQP automation.`}</p>\n\n    <Docs mdxType=\"Docs\" />\n    <h3 {...{\n      \"id\": \"using-metapackages\"\n    }}>{`Using metapackages`}</h3>\n    <p>{`Metapackages allow you to group an extension that consists of multiple packages into a cohesive unit. This works exactly as described in standard `}<a parentName=\"p\" {...{\n        \"href\": \"https://getcomposer.org/doc/04-schema.md#type\"\n      }}>{`composer.json documentation`}</a>{`. If you have an extension that uses more than one package you must use a metapackage as the `}<em parentName=\"p\">{`root package`}</em>{`. Otherwise you should not use metapackage. A metapackage that you submit to Commerce Marketplace should be a .zip file containing only the metapackage `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` file.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`We recommend metapackages refer to specific component versions. Do not use wildcards to represent version ranges.`}</p>\n    <h4 {...{\n      \"id\": \"metapackage-example\"\n    }}>{`Metapackage example`}</h4>\n    <p>{`The following example is a `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` for a metapackage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\n{\n    \"name\": \"magento/product-community-edition\",\n    \"description\": \"A sample metapackage\",\n    \"version\": \"2.0.0\",\n    \"type\": \"metapackage\",\n    \"require\": {\n        \"php\": \"~7.2.0||~7.3.0\",\n        \"zendframework/zend-stdlib\": \"~2.4.6\",\n        \"zendframework/zend-code\": \"~2.4.6\",\n        \"zendframework/zend-server\": \"~2.4.6\",\n        \"zendframework/zend-soap\": \"~2.4.6\",\n        \"zendframework/zend-uri\": \"~2.4.6\",\n        \"zendframework/zend-validator\": \"~2.4.6\",\n        \"zendframework/zend-crypt\": \"~2.4.6\",\n        \"zendframework/zend-console\": \"~2.4.6\",\n        \"zendframework/zend-modulemanager\": \"~2.4.6\",\n        \"zendframework/zend-mvc\": \"~2.4.6\",\n        \"zendframework/zend-text\": \"~2.4.6\",\n        \"zendframework/zend-i18n\": \"~2.4.6\",\n        \"ext-ctype\": \"*\",\n        \"ext-gd\": \"*\",\n        \"ext-spl\": \"*\",\n        \"ext-dom\": \"*\",\n        \"ext-simplexml\": \"*\",\n        \"ext-mcrypt\": \"*\",\n        \"ext-hash\": \"*\",\n        \"ext-curl\": \"*\",\n        \"ext-iconv\": \"*\",\n        \"ext-intl\": \"*\",\n        \"ext-xsl\": \"*\",\n        \"ext-mbstring\": \"*\",\n        \"ext-openssl\": \"*\"\n        },\n    \"license\": [\n        \"OSL-3.0\",\n        \"AFL-3.0\"\n    ]\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"sample-composerjson-file\"\n    }}>{`Sample composer.json file`}</h3>\n    <p>{`The following example is a `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` file for a module:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"name\": \"magento/sample-module-newpage\",\n  \"description\": \"A module that creates a new page\",\n  \"type\": \"magento2-module\",\n  \"version\": \"1.0.0\",\n  \"license\": [\n    \"OSL-3.0\",\n    \"AFL-3.0\"\n  ],\n  \"require\": {\n    \"php\": \"~7.2.0||~7.3.0\",\n    \"magento/framework\": \"~100.0.4\"\n  },\n  \"autoload\": {\n    \"files\": [ \"registration.php\" ],\n    \"psr-4\": {\n      \"Magento\\\\\\\\SampleNewPage\\\\\\\\\": \"\"\n    }\n  }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"package-and-publish-your-extension\"\n    }}>{`Package and publish your extension`}</h2>\n    <p>{`Create a package of your extension by performing a zip operation on the directory with your extension (excluding unnecessary directories). For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`zip -r vendor-name_package-name-1.0.0.zip package-path/ -x 'package-path/.git/*'\n`}</code></pre>\n    <p>{`Use alphanumeric characters for the package filename with dashes to separate words. Do not use whitespaces.`}</p>\n    <p>{`The application can retrieve your extension package from any valid GitHub URL.`}</p>\n    {\n      /* After you have created the module's `composer.json` file in the root directory of the module, Composer can recognize your package as compatible with its deployment strategy. Such packages can be published to a code repository (GitHub, SVN, etc.), packagist.org, or on your own private package repository. */\n    }\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Third-party repositories are supported.`}</p>\n    <h3 {...{\n      \"id\": \"hosting-on-github-and-packagist\"\n    }}>{`Hosting on GitHub and Packagist`}</h3>\n    <p>{`Prerequisite: Git must be set up on your machine.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Navigate to your component directory, with the `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` file in the root, and make it a new Git repository. See the `}<a parentName=\"p\" {...{\n            \"href\": \"https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/\"\n          }}>{`GitHub documentation`}</a>{` for details.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`When you have committed and pushed your component to your GitHub repository, you can either:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Use `}<a parentName=\"p\" {...{\n                \"href\": \"https://getcomposer.org/doc/05-repositories.md#vcs\"\n              }}>{`Composer to refer to it directly`}</a>{`, or`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Use the following steps to refer to the package through Packagist.`}</p>\n            <ol parentName=\"li\">\n              <li parentName=\"ol\">{`Register an account at `}<a parentName=\"li\" {...{\n                  \"href\": \"https://packagist.org/\"\n                }}>{`packagist.org`}</a>{`.`}</li>\n              <li parentName=\"ol\">{`Click the Submit Package button and paste your GitHub repository link. Packagist automatically gathers the information from the component's `}<inlineCode parentName=\"li\">{`composer.json`}</inlineCode>{` file and link it to the GitHub repository, allowing you to reference the package as `}<inlineCode parentName=\"li\">{`vendor/module`}</inlineCode>{` without any additional repository information, because this is required solely using GitHub.`}</li>\n            </ol>\n          </li>\n        </ul>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"hosting-on-a-private-repository\"\n    }}>{`Hosting on a private repository`}</h3>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`A private repository can be used for development or private code but installation must be done with a command line interface (you can install a package that specifies a private repository only with a command line installation).`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Set up your own Composer packaging repository using a system such as `}<a parentName=\"p\" {...{\n            \"href\": \"https://getcomposer.org/doc/articles/handling-private-packages-with-satis.md\"\n          }}>{`Satis`}</a>{` or `}<a parentName=\"p\" {...{\n            \"href\": \"https://packagist.com/\"\n          }}>{`Private Packagist`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create the package in a way similar to the described above.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Submit/register the package on your own repository. For example, it can be hosted as a reference to a code repository or submitted as a zip-archive.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`To use the private packaging repository in a project, add the following to your `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` file:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-json\"\n          }}>{`{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": [repository url here]\n        }\n    ]\n}\n`}</code></pre>\n      </li>\n    </ol>\n    <p>{`All packages on the private repository can now be referenced within the `}<inlineCode parentName=\"p\">{`require`}</inlineCode>{` field.`}</p>\n    <p>{`Refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://packagist.com/features/private-vcs-packages\"\n      }}>{`official documentation`}</a>{` for more details on how to configure your project to use Private Packagist.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}