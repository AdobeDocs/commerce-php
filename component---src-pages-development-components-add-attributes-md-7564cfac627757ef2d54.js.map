{"version":3,"file":"component---src-pages-development-components-add-attributes-md-7564cfac627757ef2d54.js","mappings":"oRAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,wCACH,yCACL,kBAAK,6OAA2O,uBAAYC,WAAW,KAAM,4BAAyC,SAAO,uBAAYA,WAAW,KAAM,4BAAyC,wDACnY,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,qHACL,kBAAK,2PAEL,eACE,GAAM,oBACH,qBACL,qBAAK,iBAAMC,WAAW,MAClB,UAAa,gBACV,sQAOP,eACE,GAAM,yBACH,2BACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,qkBAeP,eACE,GAAM,oCACH,qCACL,kBAAK,gJACwC,uBAAYA,WAAW,KAAM,QAAqB,MAAI,uBAAYA,WAAW,KAAM,OAAoB,SAAO,uBAAYA,WAAW,KAAM,WAAwB,MAChN,kBAAK,oJAGL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,qqBAuBP,kBAAK,qFACL,oBACE,eAAIA,WAAW,MAAO,uEACtB,eAAIA,WAAW,MAAO,oCACtB,eAAIA,WAAW,MAAO,2EAExB,kBAAK,aAAW,uBAAYA,WAAW,KAAM,gBAA6B,mBAAiB,uBAAYA,WAAW,KAAM,YAAyB,MACjJ,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,u2BA2BP,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,sEAAoE,uBAAYC,WAAW,KAAM,oBAAiC,iBAAe,uBAAYA,WAAW,KAAM,iEAA8E,UAAQ,cAAGA,WAAW,IACnR,KAAQ,qGACL,2DAA+D,yCACtE,kBAAK,kBAAgB,uBAAYA,WAAW,KAAM,aAA0B,mEAC5E,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,khCA2BP,kBAAK,0GAAwG,uBAAYA,WAAW,KAAM,QAAqB,mFAAiF,uBAAYA,WAAW,KAAM,QAAqB,4FAA0F,uBAAYA,WAAW,KAAM,+BAA4C,sDACrc,kBAAK,iIACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,8nCA6CP,kBAAK,sCAAoC,uBAAYA,WAAW,KAAM,oBAAiC,MACvG,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,uWAMP,eACE,GAAM,kCACH,mCACL,kBAAK,yEAAuE,uBAAYA,WAAW,KAAM,QAAqB,4BAC9H,kBAAK,mEACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,yZAOP,kBAAK,mNAAiN,uBAAYA,WAAW,KAAM,0BAAuC,gHAC1R,kBAAK,+BACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,8XAMP,kBAAK,oLACL,kBAAK,oCACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,oVAMP,kBAAK,kJAAgJ,uBAAYA,WAAW,KAAM,MAAmB,sDACrM,kBAAK,wBAAsB,uBAAYA,WAAW,KAAM,MAAmB,+CAC3E,kBAAK,0DACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,6UAUP,kBAAK,+BACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,mVAWP,kBAAK,gDACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eACV,wMAWV,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/development/components/add-attributes.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-extension-attributes-to-entities\"\n    }}>{`Add extension attributes to entities`}</h1>\n    <p>{`Third-party developers cannot change the API data interfaces defined in the Adobe Commerce and Magento Open Source code. However, most of these entities have a feature called extension attributes. Check the interface for the methods `}<inlineCode parentName=\"p\">{`getExtensionAttributes()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`setExtensionAttributes()`}</inlineCode>{` to determine if they are available for the entity.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`We will demonstrate how to add extension attributes to a Product entity, Product Repository and Web Api example.`}</p>\n    <p>{`In order to retrieve a product or a list of products from the API, you need to make an API request to the appropriate service (the Product Repository in this case).\nThe response to these requests will return objects with the following structure:`}</p>\n    <h2 {...{\n      \"id\": \"product-response\"\n    }}>{`Product response`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<product>\n    <id>1</id>\n    <sku>some-sku</sku>\n    <custom_attributes><!-- Custom Attributes Data --></custom_attributes>\n    <extension_attributes><!-- Here should we add extension attributes data --></extension_attributes>\n</product>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"product-list-response\"\n    }}>{`Product list response:`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<products>\n    <item>\n        <id>1</id>\n        <sku>some-sku</sku>\n        <custom_attributes><!-- Custom Attributes Data --></custom_attributes>\n        <extension_attributes><!-- Here should we add extension attributes data --></extension_attributes>\n    </item>\n    <item>\n        <id>2</id>\n        <sku>some-sku-2</sku>\n        <custom_attributes><!-- Custom Attributes Data --></custom_attributes>\n        <extension_attributes><!-- Here should we add extension attributes data --></extension_attributes>\n    </item>\n</products>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"add-plugin-to-product-repository\"\n    }}>{`Add plugin to product repository`}</h2>\n    <p>{`In order to add extension attributes, we need to use an after plugin on Product Repository.\nThe plugin should be declared for the methods: `}<inlineCode parentName=\"p\">{`save`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`getList`}</inlineCode>{`.`}</p>\n    <p>{`We can add scalar and non-scalar extension attributes.\nScalar is a simple attribute.\nNon-scalar attributes can be represented by Data Object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright &copy; Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nuse Magento\\\\Catalog\\\\Api\\\\ProductRepositoryInterface;\nuse Magento\\\\Catalog\\\\Api\\\\Data\\\\ProductInterface;\n\npublic function afterGet\n(\n    ProductRepositoryInterface $subject,\n    ProductInterface $entity\n) {\n    $ourCustomData = $this->customDataRepository->get($entity->getId());\n\n    $extensionAttributes = $entity->getExtensionAttributes(); /** get current extension attributes from entity **/\n    $extensionAttributes->setOurCustomData($ourCustomData);\n    $entity->setExtensionAttributes($extensionAttributes);\n\n    return $entity;\n}\n`}</code></pre>\n    <p>{`This is the simplest way to add extension attributes without causing a conflict:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`We get the entity's extension attributes, if they are already set.`}</li>\n      <li parentName=\"ul\">{`We add our extension attribute.`}</li>\n      <li parentName=\"ul\">{`Finally set the extension attribute on the entity with ours included.`}</li>\n    </ul>\n    <p>{`Function `}<inlineCode parentName=\"p\">{`afterGetList`}</inlineCode>{` is similar to `}<inlineCode parentName=\"p\">{`afterGet`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright &copy; Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nuse Magento\\\\Catalog\\\\Api\\\\ProductRepositoryInterface;\nuse Magento\\\\Catalog\\\\Api\\\\Data\\\\ProductSearchResultsInterface;\n\npublic function afterGetList(\n    ProductRepositoryInterface $subject,\n    ProductSearchResultsInterface $searchResults\n) : ProductSearchResultsInterface {\n    $products = [];\n    foreach ($searchResults->getItems() as $entity) {\n        $ourCustomData = $this->customDataRepository->get($entity->getId());\n\n        $extensionAttributes = $entity->getExtensionAttributes();\n        $extensionAttributes->setOurCustomData($ourCustomData);\n        $entity->setExtensionAttributes($extensionAttributes);\n\n        $products[] = $entity;\n    }\n    $searchResults->setItems($products);\n    return $searchResults;\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`To add extension attributes to an entity without plugins, use the `}<inlineCode parentName=\"p\">{`extensionActions`}</inlineCode>{` argument of `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Framework\\\\EntityManager\\\\Operation\\\\ExtensionPool`}</inlineCode>{`. See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/Model/ProductRepository.php\"\n      }}>{`\\\\Magento\\\\Catalog\\\\Model\\\\ProductRepository::getList()`}</a>{` as an example of an implementation.`}</p>\n    <p>{`Likewise, the `}<inlineCode parentName=\"p\">{`afterSave`}</inlineCode>{` plugin should manipulate the entity data before returning it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright &copy; Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nuse Magento\\\\Catalog\\\\Api\\\\Data\\\\ProductInterface;\nuse Magento\\\\Catalog\\\\Api\\\\ProductRepositoryInterface;\n\npublic function afterSave\n(\n    ProductRepositoryInterface $subject,\n    ProductInterface $result, /** result from the save call **/\n    ProductInterface $entity  /** original parameter to the call **/\n    /** other parameter not required **/\n) {\n    $extensionAttributes = $entity->getExtensionAttributes(); /** get original extension attributes from entity **/\n    $ourCustomData = $extensionAttributes->getOurCustomData();\n    $this->customDataRepository->save($ourCustomData);\n\n    $resultAttributes = $result->getExtensionAttributes(); /** get extension attributes as they exist after save **/\n    $resultAttributes->setOurCustomData($ourCustomData); /** update the extension attributes with correct data **/\n    $result->setExtensionAttributes($resultAttributes);\n\n    return $result;\n}\n`}</code></pre>\n    <p>{`But if some entity doesn't have implementation to fetch extension attributes, we will always retrieve `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` and each time when we fetch extension attributes we need to check if they are `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`. If so, then we need to create them. To avoid such code duplication, we need to create `}<inlineCode parentName=\"p\">{`afterGetExtensionAttributes`}</inlineCode>{` plugin for our entity with extension attributes.`}</p>\n    <p>{`Let's assume the product entity doesn't have any implementation of extension attributes, so our plugin might look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright &copy; Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nuse Magento\\\\Catalog\\\\Api\\\\Data\\\\ProductExtensionInterface;\nuse Magento\\\\Catalog\\\\Api\\\\Data\\\\ProductInterface;\nuse Magento\\\\Catalog\\\\Api\\\\Data\\\\ProductExtensionFactory;\n\nclass ProductAttributesLoad\n{\n    /**\n     * @var ProductExtensionFactory\n     */\n    private $extensionFactory;\n\n    /**\n     * @param ProductExtensionFactory $extensionFactory\n     */\n    public function __construct(ProductExtensionFactory $extensionFactory)\n    {\n        $this->extensionFactory = $extensionFactory;\n    }\n\n    /**\n     * Loads product entity extension attributes\n     *\n     * @param ProductInterface $entity\n     * @param ProductExtensionInterface|null $extension\n     * @return ProductExtensionInterface\n     */\n    public function afterGetExtensionAttributes(\n        ProductInterface $entity,\n        ProductExtensionInterface $extension = null\n    ) {\n        if ($extension === null) {\n            $extension = $this->extensionFactory->create();\n        }\n\n        return $extension;\n    }\n}\n\n`}</code></pre>\n    <p>{`Now we need to bind our plugin to `}<inlineCode parentName=\"p\">{`ProductInterface`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\">\n    <type name=\"Magento\\\\Catalog\\\\Api\\\\Data\\\\ProductInterface\">\n        <plugin name=\"ProductExtensionAttributeOperations\" type=\"Magento\\\\Catalog\\\\Plugin\\\\ProductAttributesLoad\"/>\n    </type>\n</config>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"configure-extension-attributes\"\n    }}>{`Configure extension attributes`}</h2>\n    <p>{`The file that holds these extension attributes must reside under the `}<inlineCode parentName=\"p\">{`/etc`}</inlineCode>{` folder of your module.`}</p>\n    <p>{`For scalar attributes, we can use the following configuration:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Api/etc/extension_attributes.xsd\">\n    <extension_attributes for=\"Magento\\\\Catalog\\\\Api\\\\Data\\\\ProductInterface\">\n        <attribute code=\"first_custom_attribute\" type=\"int\" />\n        <attribute code=\"second_custom_attribute\" type=\"string\" />\n    </extension_attributes>\n</config>\n`}</code></pre>\n    <p>{`Here, the scalar attributes indicate the simple form of attribute representation, such as an integer or a string. Specify the class or interface of the extension attributes inside the \"for\" attribute of the `}<inlineCode parentName=\"p\">{`<extension_attributes>`}</inlineCode>{` tag. In this case, it is the ProductInterface. The attribute is specified with a unique code and its type.`}</p>\n    <p>{`For non-scalar attributes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Api/etc/extension_attributes.xsd\">\n    <extension_attributes for=\"Magento\\\\Catalog\\\\Api\\\\Data\\\\ProductInterface\">\n        <attribute code=\"our_custom_data\" type=\"Magento\\\\SomeModule\\\\Api\\\\Data\\\\CustomDataInterface\" />\n    </extension_attributes>\n</config>\n`}</code></pre>\n    <p>{`Here, the non-scalar attributes indicate data objects such as the instance of a class. In the above example, the CustomDataInterface object is added as an extension attribute.`}</p>\n    <p>{`For array extension attributes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Api/etc/extension_attributes.xsd\">\n    <extension_attributes for=\"Magento\\\\Catalog\\\\Api\\\\Data\\\\ProductInterface\">\n        <attribute code=\"some_custom_data\" type=\"string[]\" />\n    </extension_attributes>\n</config>\n`}</code></pre>\n    <p>{`The array extension attributes are just an extension of the scalar attributes where a range of values can be represented as an attribute. The `}<inlineCode parentName=\"p\">{`[]`}</inlineCode>{` symbol indicates the attribute type is an array.`}</p>\n    <p>{`The array indicator `}<inlineCode parentName=\"p\">{`[]`}</inlineCode>{` can also be appended to non-scalar types.`}</p>\n    <p>{`In first - scalar - case we will get the next result:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<product>\n    <id>1</id>\n    <sku>some-sku</sku>\n    <custom_attributes><!-- Custom Attributes Data --></custom_attributes>\n    <extension_attributes>\n        <first_custom_attribute>1</first_custom_attribute>\n        <second_custom_attribute>foo</second_custom_attribute>\n    </extension_attributes>\n</product>\n`}</code></pre>\n    <p>{`In second, non-scalar one:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<product>\n    <id>1</id>\n    <sku>some-sku</sku>\n    <custom_attributes><!-- Custom Attributes Data --></custom_attributes>\n    <extension_attributes>\n        <our_custom_data>\n            <!-- fields defined in CustomDataInterface are here -->\n        </our_custom_data>\n    </extension_attributes>\n</product>\n`}</code></pre>\n    <p>{`In third, array one (in JSON for a change):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  \"id\": 1,\n  \"sku\": \"some-sku\",\n  \"custom_attributes\": { /* ... custom attribute data ... */ },\n  \"extension_attributes\": {\n    \"some_custom_data\": [\"value1\", \"value2\", \"value3\"]\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}