{"version":3,"file":"component---src-pages-tutorials-frontend-custom-checkout-add-template-md-ab2c293734bb0c48f909.js","mappings":"oRAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,0CACH,2CACL,kBAAK,0PACL,kBAAK,2EACL,kBAAK,gEACL,oBACE,eAAIC,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,qDACL,wFAA4F,MACnG,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,8CACL,wDAA4D,MACnE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,0CACL,kCAAsC,OAE/C,eACE,GAAM,iBACH,kBACL,mBAAG,cAAGA,WAAW,IACb,KAAQ,qGACL,4BAAgC,uDACvC,kBAAK,4PAA0P,cAAGA,WAAW,IACzQ,KAAQ,sDACL,UAAc,qCACrB,kBAAK,eAAa,uBAAYA,WAAW,KAAM,MAAmB,0CAAwC,uBAAYA,WAAW,KAAM,eAA4B,mEACnK,eACE,GAAM,oDACH,sDACL,kBAAK,iBAAe,uBAAYA,WAAW,KAAM,wBAAqC,0CAAwC,uBAAYA,WAAW,KAAM,+DAC3J,kBAAK,iCACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,4bAeP,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,sEAAoE,uBAAYC,WAAW,KAAM,4DAAyE,gBAC/K,eACE,GAAM,6CACH,+CACL,kBAAK,kDAAgD,uBAAYA,WAAW,KAAM,mEAAgF,gEAElK,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,usFA0CP,eACE,GAAM,yCACH,2CACL,kBAAK,8BAA4B,uBAAYA,WAAW,KAAM,SAAsB,8GACpF,oBACE,eAAIA,WAAW,MAAO,4BAA0B,uBAAYA,WAAW,MAAO,uBAAoC,SAAO,uBAAYA,WAAW,MAAO,yBAAsC,kBAC7L,eAAIA,WAAW,MAAO,sBAI3B,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://commerce-php/./src/pages/tutorials/frontend/custom-checkout/add-template.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-php/commerce-php/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-a-custom-template-for-a-form-field\"\n    }}>{`Add a custom template for a form field`}</h1>\n    <p>{`This topic describes how to replace the HTML template for a form field on the Checkout page. You might need to replace the template in order to add elements displayed with the field, change the CSS class assigned to it, add attributes and so on.`}</p>\n    <p>{`The forms used on the Checkout page are implemented using Knockout JS.`}</p>\n    <p>{`To change the template of the form field, do the following:`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-1-implement-the-html-template-for-the-field\"\n        }}>{`Create a custom HTML template for knockout JS script that will render the form field`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-2-specify-the-new-template-in-layout\"\n        }}>{`Specify the new template in the Checkout page layout`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#step-3-clear-files-after-modification\"\n        }}>{`Clear files after modification`}</a>{`.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/commerce-operations/configuration-guide/cli/set-mode.html\"\n      }}>{`Change to developer mode`}</a>{` when performing all customizations and debugging.`}</p>\n    <p>{`For the sake of compatibility, upgradability, and easy maintenance, do not edit the default application code. Instead, add your customizations in a separate module. For your checkout customization to be applied correctly, your custom module should `}<a parentName=\"p\" {...{\n        \"href\": \"../../../development/build/composer-integration.md\"\n      }}>{`depend`}</a>{` on the Magento_Checkout module.`}</p>\n    <p>{`Do not use `}<inlineCode parentName=\"p\">{`Ui`}</inlineCode>{` for your custom module name, because `}<inlineCode parentName=\"p\">{`%Vendor%_Ui`}</inlineCode>{` notation, required when specifying paths, might cause issues.`}</p>\n    <h2 {...{\n      \"id\": \"step-1-implement-the-html-template-for-the-field\"\n    }}>{`Step 1: Implement the HTML template for the field`}</h2>\n    <p>{`Create a new `}<inlineCode parentName=\"p\">{`<your_template>.html`}</inlineCode>{` template in the following directory: `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/web/template/form/element`}</inlineCode></p>\n    <p>{`Example of a field template:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!-- input field element and corresponding bindings -->\n<input class=\"input-text\" type=\"text\" data-bind=\"\n    value: value,\n    valueUpdate: 'keyup',\n    hasFocus: focused,\n    attr: {\n        name: inputName,\n        placeholder: placeholder,\n        'aria-describedby': noticeId,\n        id: uid,\n        disabled: disabled\n    }\" />\n<!-- additional content -->\n<img src=\"%path_to_image%\" alt=\"image_de\"/>\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The original templates of all form field types are located in the `}<inlineCode parentName=\"p\">{`app/code/Magento/Ui/view/base/web/templates/form/element`}</inlineCode>{` directory.`}</p>\n    <h2 {...{\n      \"id\": \"step-2-specify-the-new-template-in-layout\"\n    }}>{`Step 2: Specify the new template in layout`}</h2>\n    <p>{`In your custom module directory, create a new `}<inlineCode parentName=\"p\">{`<your_module_dir>/view/frontend/layout/checkout_index_index.xml`}</inlineCode>{` file.\nIn this file, add content similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<?xml version=\"1.0\"?>\n<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <body>\n        <referenceBlock name=\"checkout.root\">\n            <arguments>\n                <argument name=\"jsLayout\" xsi:type=\"array\">\n                    <item name=\"components\" xsi:type=\"array\">\n                        <item name=\"checkout\" xsi:type=\"array\">\n                            <item name=\"children\" xsi:type=\"array\">\n                                <item name=\"steps\" xsi:type=\"array\">\n                                    <item name=\"children\" xsi:type=\"array\">\n                                        <item name=\"shipping-step\" xsi:type=\"array\">\n                                            <item name=\"children\" xsi:type=\"array\">\n                                                <item name=\"shippingAddress\" xsi:type=\"array\">\n                                                    <item name=\"children\" xsi:type=\"array\">\n                                                        <!-- The name of the form the field belongs to -->\n                                                        <item name=\"shipping-address-fieldset\" xsi:type=\"array\">\n                                                            <item name=\"children\" xsi:type=\"array\">\n                                                                <!-- the field you are customizing -->\n                                                                <item name=\"telephone\" xsi:type=\"array\">\n                                                                    <item name=\"config\" xsi:type=\"array\">\n                                                                        <!-- Assigning a new template -->\n                                                                        <item name=\"elementTmpl\" xsi:type=\"string\">%Vendor_Module%/form/element/%your_template%</item>\n                                                                    </item>\n                                                                </item>\n                                                            </item>\n                                                        </item>\n                                                    </item>\n                                                </item>\n                                            </item>\n                                        </item>\n                                    </item>\n                                </item>\n                            </item>\n                        </item>\n                    </item>\n                </argument>\n            </arguments>\n        </referenceBlock>\n    </body>\n</page>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-3-clear-files-after-modification\"\n    }}>{`Step 3: Clear files after modification`}</h2>\n    <p>{`If you modify your custom `}<inlineCode parentName=\"p\">{`.html`}</inlineCode>{` template after it was applied on the store pages, the changes will not apply until you do the following:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Delete all files in the `}<inlineCode parentName=\"li\">{`pub/static/frontend`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`var/view_preprocessed`}</inlineCode>{` directories.`}</li>\n      <li parentName=\"ol\">{`Reload the pages.`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}